{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","../../../projects/ng-rule-editor/src/lib/variable.ts","../../../projects/ng-rule-editor/src/lib/units.ts","../../../projects/ng-rule-editor/src/lib/rule-editor.service.ts","../../../projects/ng-rule-editor/src/lib/calculate-sum-prompt/calculate-sum-prompt.component.ts","../../../projects/ng-rule-editor/src/lib/calculate-sum-prompt/calculate-sum-prompt.component.html","../../../projects/ng-rule-editor/src/lib/uneditable-variables/uneditable-variables.component.html","../../../projects/ng-rule-editor/src/lib/uneditable-variables/uneditable-variables.component.ts","../../../projects/ng-rule-editor/src/lib/syntax-preview/syntax-preview.component.html","../../../projects/ng-rule-editor/src/lib/syntax-preview/syntax-preview.component.ts","../../../projects/ng-rule-editor/src/lib/question/question.component.html","../../../projects/ng-rule-editor/src/lib/question/question.component.ts","../../../projects/ng-rule-editor/src/lib/query-observation/query-observation.component.html","../../../projects/ng-rule-editor/src/lib/query-observation/query-observation.component.ts","../../../projects/ng-rule-editor/src/lib/easy-path-expressions.pipe.ts","../../../projects/ng-rule-editor/src/lib/syntax-converter/syntax-converter.component.ts","../../../projects/ng-rule-editor/src/lib/syntax-converter/syntax-converter.component.html","../../../projects/ng-rule-editor/src/lib/variables/variables.component.html","../../../projects/ng-rule-editor/src/lib/variables/variables.component.ts","../../../projects/ng-rule-editor/src/lib/case-statements/case-statements.component.html","../../../projects/ng-rule-editor/src/lib/case-statements/case-statements.component.ts","../../../projects/ng-rule-editor/src/lib/rule-editor.component.html","../../../projects/ng-rule-editor/src/lib/rule-editor.component.ts","../../../projects/ng-rule-editor/src/lib/rule-editor.module.ts","../../../projects/ng-rule-editor/src/public-api.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { DatePipe } from '@angular/common';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  formAppearedAnnouncement = 'The rule editor for the selected form has appeared below the current field.';\n  calculatedExpression = 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-calculatedExpression';\n  originalLinkId = '/39156-5';\n  expressionTypes = [\n    {\n      name: 'Answer Expression',\n      uri: 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-answerExpression'\n    },\n    {\n      name: 'Calculated Expression',\n      uri: 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-calculatedExpression',\n      selected: true\n    },\n    {\n      name: 'Enable When Expression',\n      uri: 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-enableWhenExpression',\n    },\n    {\n      name: 'Initial Expression',\n      uri: 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-initialExpression'\n    }\n  ];\n\n  fhirPreview: string;\n  linkId = '';\n  linkIds;\n  expressionUri = this.calculatedExpression;\n  customExpressionUri = false;\n  fhir = null;\n  formType = 'bmisimple';\n  file = '';\n  error = '';\n  doNotAskToCalculateScore = false;\n\n  constructor(private http: HttpClient, private liveAnnouncer: LiveAnnouncer) {}\n\n  ngOnInit(): void {\n    this.onChange();\n  }\n\n  /**\n   * Used when changing the questionnaire dropdown\n   */\n  onChange(): void {\n    // Clear out preview when changing forms\n    this.fhirPreview = '';\n    this.error = '';\n    this.doNotAskToCalculateScore = false;\n\n    if (this.formType === '' || this.formType === 'upload') {\n      this.liveAnnouncer.announce('Additional settings must be entered below to load the rule editor.');\n      this.fhir = null;\n      this.file = '';\n      this.linkId = '';\n    } else {\n      this.liveAnnouncer.announce(this.formAppearedAnnouncement);\n      this.linkId = this.originalLinkId;\n      this.expressionUri = this.calculatedExpression;\n\n      this.http.get(`./${this.formType}.json`)\n        .subscribe(data => {\n          this.fhir = data;\n        });\n    }\n  }\n\n  /**\n   * Show a preview of the output questionnaire under the rule editor\n   */\n  onSave(fhirResult): void {\n    this.fhirPreview = JSON.stringify(fhirResult, null, 2);\n  }\n\n  /**\n   * Import a questionnaire from a file using the linkId and expression URI\n   * @param fileInput - input file change event\n   */\n  prepareForImport(fileInput): void {\n    if (fileInput.target.files && fileInput.target.files[0]) {\n      const fileReader = new FileReader();\n\n      fileReader.onload = (e) => {\n        if (typeof e.target.result === 'string') {\n          this.doNotAskToCalculateScore = false;\n          this.linkId = '';\n          try {\n            this.fhir = JSON.parse(e.target.result);\n            this.error = '';\n            if (this.fhir && this.fhir.item instanceof Array) {\n              this.linkIds = this.getQuestionnaireLinkIds(this.fhir.item);\n            }\n            this.liveAnnouncer.announce(this.formAppearedAnnouncement);\n          } catch (e) {\n            this.fhir = '';\n            this.error = `Could not parse file: ${e}`;\n            this.liveAnnouncer.announce(this.error);\n          }\n        } else {\n          this.fhir = '';\n          this.error = 'Could not read file';\n          this.liveAnnouncer.announce(this.error);\n        }\n      };\n\n      fileReader.readAsText(fileInput.target.files[0]);\n    }\n  }\n\n  /**\n   * Get the list of item link IDs in the questionnaire\n   * @param items - FHIR questionnaire item array\n   * @param level - Depth of item nesting, starting at 0\n   * @return Array of link IDs.\n   */\n  getQuestionnaireLinkIds(items, level = 0): Array<string> {\n    let linkIds = [];\n\n    items.forEach((item) => {\n      if (item.linkId) {\n        if (item.text) {\n          const indent = `${'—'.repeat(level)} `;\n          linkIds.push({\n            linkId: item.linkId,\n            text: `${indent} ${item.text} (${item.linkId})`\n          });\n        } else {\n          linkIds.push({\n            linkId: item.linkId,\n            text: item.linkId\n          });\n        }\n      }\n\n      if (item.item instanceof Array) {\n        linkIds = linkIds.concat(this.getQuestionnaireLinkIds(item.item, level + 1));\n      }\n    });\n\n    return linkIds;\n  }\n\n  /**\n   * Trigger a file download of the provided data.\n   * @param data - Content of the file which will be downloaded\n   * @param name - Name the user sees for the file\n   */\n  downloadJson(data: string, name?: string): void {\n    const datePipe = new DatePipe('en-US');\n    const blob = new Blob([data]);\n\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    const date = datePipe.transform(Date.now(), 'yyyyMMdd-hhmmss');\n\n    a.setAttribute('style', 'display: none');\n    a.href = url;\n    a.download = name ? `${name}.json` : `fhirpath-${date}.json`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  }\n\n  /**\n   * Called when the expression type changes\n   * @param $event - Event\n   */\n  expressionChange($event): void {\n    const newValue = $event.target.value;\n\n    if (newValue === 'custom') {\n      this.customExpressionUri = true;\n      this.expressionUri = '';\n    } else {\n      this.customExpressionUri = false;\n      this.expressionUri = newValue;\n    }\n  }\n}\n","<h1>Rule Editor Demo</h1>\n\n<p>\n  The Rule Editor is a widget which helps you add FHIRPath expressions to a FHIR Questionnaire.\n  For documentation refer to the <a href=\"https://github.com/NLMLHC/rule-editor#the-lhc-rule-editor\">Readme on GitHub</a>.\n  In the demo below you can choose one of the provided questionnaires or upload\n  your own to be able to add, remove or rearrange variables and expressions.\n</p>\n\n<label>\n  Questionnaire:\n  <select [(ngModel)]=\"formType\" (change)=\"onChange()\" id=\"questionnaire-select\">\n    <option value=\"upload\">Upload your own questionnaire</option>\n    <option value=\"bmi\">BMI Calculation</option>\n    <option value=\"bmisimple\">BMI Calculation (Easy Path expression)</option>\n    <option value=\"bmicase\">BMI Calculation (with cases)</option>\n    <option value=\"bmicasesimple\">BMI Calculation (Easy Path expression with cases)</option>\n    <option value=\"phq9\">PHQ9 (no FHIRPath)</option>\n    <option value=\"query\">Query</option>\n  </select>\n</label>\n<div *ngIf=\"formType == 'upload'\" id=\"upload\">\n  <p>Please specify the questionnaire, item Link ID, and the corresponding Expression URI where the output should be placed:</p>\n  <label>Questionnaire:\n    <input type=\"file\" id=\"file-upload\" [(ngModel)]=\"file\" accept=\".json\" (change)=\"prepareForImport($event)\">\n  </label>\n  <span *ngIf=\"fhir\">\n    <label>\n      Question:\n      <select required id=\"link-id\" [(ngModel)]=\"linkId\" (change)=\"doNotAskToCalculateScore = true\">\n        <option value=\"\">None (Edit top level variables)</option>\n        <option *ngFor=\"let currentLinkId of linkIds\" [value]=\"currentLinkId.linkId\">{{currentLinkId.text}}</option>\n      </select>\n    </label>\n    <label [hidden]=\"!linkId\">\n      Output Expression:\n      <div id=\"expression-entry\">\n        <select (change)=\"expressionChange($event)\">\n          <option value=\"\">None</option>\n          <option *ngFor=\"let expressionType of expressionTypes\" [value]=\"expressionType.uri\" [selected]=\"expressionType.selected\">\n            {{expressionType.name}}\n          </option>\n          <option value=\"custom\">Other...</option>\n        </select>\n        <input *ngIf=\"customExpressionUri\" required type=\"text\" id=\"expression-uri\" [(ngModel)]=\"expressionUri\">\n      </div>\n    </label>\n  </span>\n</div>\n<div class=\"error\" *ngIf=\"error\">\n  {{error}}\n</div>\n<div *ngIf=\"fhir\">\n  <div class=\"rule-editor\">\n    <lhc-rule-editor\n      [fhirQuestionnaire]=\"fhir\"\n      [itemLinkId]=\"linkId\"\n\n      [submitButtonName]=\"'Save'\"\n      [expressionLabel]=\"'Output Expression'\"\n      [expressionUri]=\"linkId ? expressionUri : ''\"\n      [lhcStyle]=\"{\n        buttonPrimary: { backgroundColor: 'navy', color: 'white' },\n        buttonSecondary: { backgroundColor: 'darkgreen', color: 'white' },\n        input: { backgroundColor: '#ffe' },\n        select: { backgroundColor: '#ffe' }\n      }\"\n      [doNotAskToCalculateScore]=\"doNotAskToCalculateScore\"\n      (save)=\"onSave($event)\">\n    </lhc-rule-editor>\n  </div>\n\n  <button *ngIf=\"fhirPreview\" (click)=\"downloadJson(fhirPreview)\" class=\"download\">\n    Download Questionnaire\n  </button>\n  <pre id=\"output\">{{fhirPreview}}</pre>\n</div>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { RuleEditorModule } from 'ng-rule-editor';\n\nimport { AppComponent } from './app.component';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    RuleEditorModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [\n    AppComponent\n  ]\n})\nexport class AppModule { }\n","export interface UneditableVariable {\n  name: string;\n  type?: string;\n  description?: string;\n}\n\nexport interface Variable {\n  __$index?: number;  // Original index in extension list\n  label: string;\n  type: string;\n  expression: string;\n  simple?: string;\n  linkId?: string;\n  unit?: string;\n  codes?: Array<string>;\n  timeInterval?: number;\n  timeIntervalUnit?: string;\n}\n\nexport interface Question {\n  linkId: string;\n  text: string;\n  itemHasScore?: boolean;\n  unit?: string;\n}\n\nexport interface CaseStatement {\n  condition: string;\n  simpleCondition?: string;\n  output: string;\n  simpleOutput?: string;\n}\n\nexport enum AllVariableType {\n  question = 'Question',\n  expression = 'FHIRPath Expression',\n  simple = 'Easy Path Expression',\n  query = 'FHIR Query',\n  queryObservation = 'FHIR Query (Observation)'\n}\n\nexport enum SimpleVariableType {\n  question = 'Question',\n  simple = 'Easy Path Expression',\n  queryObservation = 'FHIR Query (Observation)'\n}\n\nexport const CASE_REGEX = /^\\s*iif\\s*\\((.*)\\)\\s*$/;\n","// Conversion table for simple units\nexport interface Unit {\n  unit: string;\n  factor: number;\n}\n\n// Supported unit conversions. Key is the \"from\" and value is the \"to\" array\nexport const UNIT_CONVERSION: { [key: string]: Unit[] } = {\n  kg: [{ unit: 'lbs', factor: 2.20462 }],\n  lbs: [{ unit: 'kg', factor: 0.453592 }],\n  '[in_i]': [{ unit: 'cm', factor: 2.54 }, { unit: 'm', factor: 0.0254 }]\n};\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport copy from 'fast-copy';\n\nimport { CASE_REGEX, Question, UneditableVariable, Variable } from './variable';\nimport { UNIT_CONVERSION } from './units';\n\nexport interface SimpleStyle {\n  h1?: object;\n  h2?: object;\n  previewArea?: object;\n  variableHeader?: object;\n  variableRow?: object;\n  buttonPrimary?: object;\n  buttonSecondary?: object;\n  buttonDanger?: object;\n  input?: object;\n  select?: object;\n  description?: object;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RuleEditorService {\n  static SCORE_VARIABLE_EXTENSION = 'http://lhcforms.nlm.nih.gov/fhir/ext/rule-editor-score-variable';\n  static SCORE_EXPRESSION_EXTENSION = 'http://lhcforms.nlm.nih.gov/fhir/ext/rule-editor-score-expression';\n  static SIMPLE_SYNTAX_EXTENSION = 'http://lhcforms.nlm.nih.gov/fhir/ext/simple-syntax';\n\n  syntaxType = 'simple';\n  linkIdContext: string;\n  uneditableVariablesChange: Subject<UneditableVariable[]> =\n    new Subject<UneditableVariable[]>();\n  variablesChange: Subject<Variable[]> = new Subject<Variable[]>();\n  questionsChange: Subject<Question[]> = new Subject<Question[]>();\n  mightBeScoreChange: Subject<boolean> = new Subject<boolean>();\n  finalExpressionChange: Subject<string> = new Subject<string>();\n  disableAdvancedChange: Subject<boolean> = new Subject<boolean>();\n  uneditableVariables: UneditableVariable[];\n  variables: Variable[];\n  questions: Question[];\n  finalExpression: string;\n  finalExpressionExtension;\n  simpleExpression: string;\n  caseStatements: boolean;\n  needsAdvancedInterface = false;\n  doNotAskToCalculateScore = false;\n\n  private LANGUAGE_FHIRPATH = 'text/fhirpath';\n  private LANGUAGE_FHIR_QUERY = 'application/x-fhir-query';\n  private QUESTION_REGEX = /^%resource\\.item\\.where\\(linkId='(.*)'\\)\\.answer\\.value(?:\\*(\\d*\\.?\\d*))?$/;\n  private QUERY_REGEX = /^Observation\\?code=(.+)&date=gt{{today\\(\\)-(\\d+) (.+)}}&patient={{%patient.id}}&_sort=-date&_count=1$/;\n  private VARIABLE_EXTENSION = 'http://hl7.org/fhir/StructureDefinition/variable';\n  private CALCULATED_EXPRESSION = 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-calculatedExpression';\n  private LAUNCH_CONTEXT_URI = 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-launchContext';\n\n  private linkIdToQuestion = {};\n  private fhir;\n  mightBeScore = false;\n\n  constructor() {\n    this.variables = [];\n    this.uneditableVariables = [];\n  }\n\n  /**\n   * Create a new variable\n   */\n  addVariable(): void {\n    // Get all the existing variable names\n    const existingNames = this.variables.map((e) => e.label)\n      .concat(this.uneditableVariables.map((e) => e.name));\n\n    this.variables.push({\n      label: this.getNewLabelName(existingNames),\n      type: 'question',\n      expression: ''\n    });\n    this.variablesChange.next(this.variables);\n  }\n\n  /**\n   * Remove a variable\n   * @param i - index of variable to remove\n   */\n  remove(i: number): void {\n    this.variables.splice(i, 1);\n  }\n\n  /**\n   * Trigger an update (used when changing variable names to update the preview)\n   */\n  update(): void {\n    this.variablesChange.next(this.variables);\n  }\n\n  /**\n   * Checks the advanced interface status and allows toggle if no expressions or\n   * queries are present\n   * @param toggleOn - Set the advanced interface on (without having to run checks)\n   */\n  checkAdvancedInterface(toggleOn?: boolean): void {\n    if (toggleOn) {\n      this.needsAdvancedInterface = true;\n    } else {\n      let needsAdvanced = false;\n      // Check variables\n      if (this.variables.find((e) => e.type === 'expression' || e.type === 'query') !== undefined) {\n        needsAdvanced = true;\n      }\n\n      // Check final expression\n      if (this.syntaxType === 'fhirpath') {\n        needsAdvanced = true;\n      }\n\n      this.needsAdvancedInterface = needsAdvanced;\n    }\n\n    this.disableAdvancedChange.next(this.needsAdvancedInterface);\n  }\n\n  /**\n   * Get the list of uneditable variables based on the FHIR Questionnaire:\n   * Launch context + variables outside not on the current item scope\n   * @param questionnaire - FHIR Questionnaire\n   * @param linkIdContext - Context to use for final expression\n   * @param launchContextOnly - Only show the launch context related extensions (default: false)\n   */\n  getUneditableVariables(questionnaire, linkIdContext, launchContextOnly = false): UneditableVariable[] {\n    const uneditableVariables = [];\n\n    if (Array.isArray(questionnaire.extension)) {\n      const variables = questionnaire.extension.reduce((accumulator, extension) => {\n        if (extension.url === this.LAUNCH_CONTEXT_URI && extension.extension) {\n          accumulator.push({\n            name: extension.extension.find((e) => e.url === 'name').valueId,\n            type: extension.extension.filter((e) => e.url === 'type')?.map((e) => e.valueCode).join('|'),\n            description: extension.extension.find((e) => e.url === 'description')?.valueString\n          });\n        } else if (this.isVariable(extension) && !launchContextOnly) {\n          accumulator.push({\n            name: extension.valueExpression.name,\n            type: 'Variable',\n            description: extension.valueExpression.expression,  // Might want to show simplified form\n          });\n        }\n        return accumulator;\n      }, []);\n      uneditableVariables.push(...variables);\n    }\n\n    // Get the variables on item ancestors where linkId matches\n    if (questionnaire.item instanceof Array && !launchContextOnly) {\n      const ancestors = this.getAncestors(questionnaire.item, linkIdContext, []);\n\n      if (ancestors instanceof Array) {\n        ancestors.forEach(currentItem => {\n          if (currentItem.extension instanceof Array) {\n            currentItem.extension.forEach((extension) => {\n              if (this.isVariable(extension)) {\n                uneditableVariables.push({\n                  name: extension.valueExpression.name,\n                  type: 'Item variable',\n                  description: extension.valueExpression.expression,  // Might want to show simplified form\n                });\n              }\n            });\n          }\n        });\n      }\n    }\n\n    return uneditableVariables;\n  }\n\n  /**\n   * Find the ancestors of an item given the linkId and return those items.\n   * @param items - Items array\n   * @param itemLinkId - The item for which to determine ancestors\n   * @param ancestors - Array of ancestor items. Empty array for root level\n   * @return\n   */\n  getAncestors(items, itemLinkId, ancestors): Array<any> {\n    for (const currentItem of items) {\n      if (currentItem.linkId === itemLinkId) {\n        return ancestors;\n      }\n\n      if (currentItem.item instanceof Array) {\n        const tmp = this.getAncestors(currentItem.item, itemLinkId, ancestors.concat(currentItem));\n\n        if (tmp !== null) {\n          return tmp;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns true if extension is a variable with FHIRPath or FHIR Query as the\n   * language\n   * @param extension - FHIR extension\n   * @return true if extension is a variable\n   * @private\n   */\n  private isVariable(extension): boolean {\n    return extension.url === this.VARIABLE_EXTENSION && extension.valueExpression &&\n      (extension.valueExpression.language === this.LANGUAGE_FHIRPATH ||\n        extension.valueExpression.language === this.LANGUAGE_FHIR_QUERY);\n  }\n\n  /**\n   * Get and remove the variables from the FHIR object\n   * @param items - Question array\n   * @param linkIdContext - Context to use for extracting variables\n   * @return Array of variables\n   */\n  extractVariablesFromItems(items, linkIdContext): Variable[] {\n    // Look at the item fhirpath related extensions to populate the editable variables\n\n    const item = items.find((e) => e.linkId === linkIdContext && e.extension);\n    if (item) {\n      return this.extractVariablesFromExtensions(item);\n    } else {\n      if (items.item && items.item.length) {\n        for (const searchItem of items.item) {\n          if (searchItem.item) {\n            const ret = this.extractVariablesFromItems(searchItem.item, linkIdContext);\n            if (ret.length) {\n              return ret;\n            }\n          }\n        }\n      }\n\n      return [];\n    }\n  }\n\n  /**\n   * Get and remove the variables from an item or FHIR questionnaire\n   * @param item - FHIR Questionnaire or item\n   * @return Array of variables\n   * @private\n   */\n  private extractVariablesFromExtensions(item): Variable[] {\n    const variables = [];\n    const nonVariableExtensions = [];\n\n    // Add an index to each extension which we will then use to get the\n    // variables back in the correct order. __$index will be removed on save\n    item.extension = item.extension.map((e, i) => ({...e, __$index: i}));\n\n    item.extension.forEach((extension) => {\n      if (extension.url === this.VARIABLE_EXTENSION && extension.valueExpression) {\n        switch (extension.valueExpression.language) {\n          case this.LANGUAGE_FHIRPATH:\n            const fhirPathVarToAdd = this.processVariable(\n              extension.valueExpression.name,\n              extension.valueExpression.expression,\n              extension.__$index,\n              extension.valueExpression.extension);\n            if (fhirPathVarToAdd.type === 'expression') {\n              this.needsAdvancedInterface = true;\n            }\n            variables.push(fhirPathVarToAdd);\n            break;\n          case this.LANGUAGE_FHIR_QUERY:\n            const queryVarToAdd = this.processQueryVariable(\n              extension.valueExpression.name,\n              extension.valueExpression.expression,\n              extension.__$index);\n            if (queryVarToAdd.type === 'query') {\n              this.needsAdvancedInterface = true;\n            }\n            variables.push(queryVarToAdd);\n            break;\n        }\n      } else {\n        nonVariableExtensions.push(extension);\n      }\n    });\n\n    // Remove the variables so they can be re-added on export\n    item.extension = nonVariableExtensions;\n\n    return variables;\n  }\n\n  /**\n   * Get and remove the variables from the FHIR object\n   * @param fhir - FHIR Questionnaire\n   */\n  extractTopLevelVariables(fhir): Variable[] {\n    if (fhir.extension instanceof Array) {\n      return this.extractVariablesFromExtensions(fhir);\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * Check if the current item has an ordinalValue extension on the answer\n   * @param item - Question item or linkId\n   */\n  itemHasScore(item): boolean {\n    if (typeof item === 'string') {\n      item = this.linkIdToQuestion[item];\n    }\n\n    return (item.answerOption || []).some((answerOption) => {\n      return (answerOption.extension || []).some((extension) => {\n        return extension.url === 'http://hl7.org/fhir/StructureDefinition/ordinalValue';\n      });\n    });\n  }\n\n  /**\n   * Get the number of ordinalValue on the answers of the questions on the\n   * Questionnaire\n   * @param item - FHIR Questionnaire or item\n   * @param linkIdContext - linkId to exclude from calculation\n   * @return number of score questions on the questionnaire\n   */\n  getScoreQuestionCount(item, linkIdContext): number {\n    let scoreQuestions = 0;\n\n    item.item.forEach((currentItem) => {\n      if (!currentItem.repeats && this.itemHasScore(currentItem)) {\n        scoreQuestions++;\n      }\n\n      if (currentItem.item instanceof Array) {\n        const nestedScoreQuestionCount = this.getScoreQuestionCount(currentItem, linkIdContext);\n\n        scoreQuestions += nestedScoreQuestionCount;\n      }\n    });\n\n    return scoreQuestions;\n  }\n\n  /**\n   * Import a FHIR Questionnaire to populate questions\n   * @param expressionUri - URI of expression extension on linkIdContext question\n   *  to extract and modify\n   * @param questionnaire - FHIR Questionnaire\n   * @param linkIdContext - Context to use for final expression\n   * @return true if load was successful\n   */\n  import(expressionUri: string, questionnaire, linkIdContext): boolean {\n    this.linkIdContext = linkIdContext;\n    this.fhir = copy(questionnaire);\n    const loadSuccess = this.fhir.resourceType === 'Questionnaire';\n\n    if (loadSuccess && this.fhir.item && this.fhir.item.length) {\n      if (!this.doNotAskToCalculateScore) {\n        // If there is at least one score question we will ask the user if they\n        // want to calculate the score\n        const SCORE_MIN_QUESTIONS = 1;\n        this.mightBeScore = this.getScoreQuestionCount(this.fhir, linkIdContext) > SCORE_MIN_QUESTIONS;\n        this.mightBeScoreChange.next(this.mightBeScore);\n      }\n\n      this.linkIdToQuestion = {};\n      this.needsAdvancedInterface = false;\n      this.caseStatements = false;\n      this.processItem(this.fhir.item);\n\n      if (linkIdContext !== undefined && linkIdContext !== '') {\n        this.uneditableVariables = this.getUneditableVariables(this.fhir, linkIdContext);\n        this.variables = this.extractVariablesFromItems(this.fhir.item, linkIdContext);\n      } else {\n        this.uneditableVariables = this.getUneditableVariables(this.fhir, linkIdContext, true);\n        this.variables = this.extractTopLevelVariables(this.fhir);\n\n        // Since we don't have a target item the output expression does not make sense so hide it.\n        expressionUri = '';\n      }\n\n      this.uneditableVariablesChange.next(this.uneditableVariables);\n      this.variablesChange.next(this.variables);\n\n      this.questions = [];\n\n      // tslint:disable-next-line:forin\n      for (const key in this.linkIdToQuestion) {\n        if (!this.linkIdToQuestion.hasOwnProperty(key)) {\n          return;\n        }\n        const e = this.linkIdToQuestion[key];\n        // TODO decimal vs choice\n        const MAX_Q_LEN = 60;  // Maximum question length before truncating.\n\n        const text = e.text;\n\n        if (e.text) {\n          this.questions.push({\n            linkId: e.linkId,\n            text: text.length > MAX_Q_LEN ? text.substring(0, MAX_Q_LEN) + '...' : text,\n            unit: this.getQuestionUnits(e.linkId)\n          });\n        }\n      }\n      this.questionsChange.next(this.questions);\n\n      if (expressionUri) {\n        const expression = this.extractExpression(expressionUri, this.fhir.item, linkIdContext);\n\n        if (expression !== null) {\n          // @ts-ignore\n          this.finalExpression = expression.valueExpression.expression;\n          this.finalExpressionExtension = expression;\n\n          this.caseStatements = this.finalExpression.match(CASE_REGEX) !== null;\n\n          const simpleSyntax = this.extractSimpleSyntax(expression);\n\n          if (simpleSyntax === null && this.finalExpression !== '') {\n            this.syntaxType = 'fhirpath';\n            this.needsAdvancedInterface = true;\n          } else {\n            this.syntaxType = 'simple';\n            this.simpleExpression = simpleSyntax;\n          }\n        } else {\n          // Reset input to be a blank simple expression if there is nothing on\n          // the form\n          this.syntaxType = 'simple';\n          this.simpleExpression = '';\n          this.finalExpression = '';\n          this.finalExpressionExtension = {\n            url: expressionUri,\n            valueExpression: {\n              language: 'text/fhirpath',\n              expression: this.finalExpression\n            }\n          };\n        }\n\n        this.finalExpressionChange.next(this.finalExpression);\n      }\n    }\n\n    return loadSuccess;\n  }\n\n  /**\n   * Process nested FHIR Questionnaire items\n   * @param items - Current level of item nesting\n   * @private\n   */\n  private processItem(items): void {\n    items.forEach((e) => {\n      this.linkIdToQuestion[e.linkId] = e;\n      if (e.item) {\n        this.processItem(e.item);\n      }\n    });\n  }\n\n  /**\n   * Get and remove the simple syntax if available. If not return null\n   * @param expression\n   */\n  extractSimpleSyntax(expression): string|null {\n    if (expression.valueExpression && expression.valueExpression.extension) {\n      const customExtension = expression.valueExpression.extension.find((e) => {\n        return e.url === RuleEditorService.SIMPLE_SYNTAX_EXTENSION;\n      });\n\n      if (customExtension !== undefined) {\n        return customExtension.valueString;  // TODO move to code\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get and remove the final expression\n   * @param expressionUri - Expression extension URL\n   * @param items - FHIR questionnaire item array\n   * @param linkId - linkId of question where to extract expression\n   */\n  extractExpression(expressionUri, items, linkId): object|null {\n    for (const item of items) {\n      if (item.linkId === linkId && item.extension) {\n        const extensionIndex = item.extension.findIndex((e) => {\n          return e.url === expressionUri && e.valueExpression.language === this.LANGUAGE_FHIRPATH &&\n            e.valueExpression.expression;\n        });\n\n        if (extensionIndex !== -1) {\n          const finalExpression = item.extension[extensionIndex];\n          item.extension.splice(extensionIndex, 1);\n\n          return finalExpression;\n        }\n      } else if (item.item) {\n        return this.extractExpression(expressionUri, item.item, linkId);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Process a FHIRPath expression into a more user friendly format if possible.\n   * If the format of the FHIRPath matches a format we can display with a\n   * question dropdown, etc show that. If not show the FHIRPath expression.\n   * @param name - Name to assign variable\n   * @param expression - Expression to process\n   * @param index - Original order in extension list\n   * @param extensions - Any additional extensions (for simple fhirpath etc)\n   * @return Variable type which can be used by the Rule Editor to show a\n   * question, expression etc\n   * @private\n   */\n  private processVariable(name, expression, index?: number, extensions?): Variable {\n    const matches = expression.match(this.QUESTION_REGEX);\n\n    const simpleExtension = extensions && extensions.find(e => e.url === RuleEditorService.SIMPLE_SYNTAX_EXTENSION);\n\n    if (matches !== null) {\n      const linkId = matches[1];\n      const factor = matches[2];\n\n      const variable: Variable = {\n        __$index: index,\n        label: name,\n        type: 'question',\n        linkId,\n        expression\n      };\n\n      if (factor) {\n        // We might be able to do unit conversion\n        const sourceUnits = this.getQuestionUnits(linkId);\n\n        if (UNIT_CONVERSION.hasOwnProperty(sourceUnits)) {\n          const conversions = UNIT_CONVERSION[sourceUnits];\n          const conversion = conversions.find((e) => {\n            return e.factor.toString() === factor;\n          });\n\n          variable.unit = conversion.unit;\n        }\n      }\n\n      return variable;\n    } else if (simpleExtension !== undefined) {\n      return {\n        __$index: index,\n        label: name,\n        type: 'simple',\n        expression,\n        simple: simpleExtension.valueString\n      };\n    } else {\n      return {\n        __$index: index,\n        label: name,\n        type: 'expression',\n        expression\n      };\n    }\n  }\n\n  /**\n   * Process a x-fhir-query expression into a more user friendly format if\n   * possible. Show a code autocomplete field if possible if not show the\n   * expression editing field.\n   * @param name - Name to assign variable\n   * @param expression - Expression to process\n   * @param index - Original order in extension list\n   * @return Variable type which can be used by the Rule Editor to show a\n   * question, expression etc\n   * @private\n   */\n  private processQueryVariable(name, expression, index?: number): Variable {\n    const matches = expression.match(this.QUERY_REGEX);\n\n    if (matches !== null) {\n      const codes = matches[1].split('%2C');  // URL encoded comma ','\n      const timeInterval = parseInt(matches[2], 10);\n      const timeIntervalUnits = matches[3];\n\n      return {\n        __$index: index,\n        label: name,\n        type: 'queryObservation',\n        codes,\n        timeInterval,\n        timeIntervalUnit: timeIntervalUnits,\n        expression\n      };\n    } else {\n      return {\n        __$index: index,\n        label: name,\n        type: 'query',\n        expression\n      };\n    }\n  }\n\n  // TODO check behavior of repeating linkId\n  /**\n   * Get question units for the question\n   * @param linkId - Question linkId\n   * @private\n   */\n  private getQuestionUnits(linkId): string {\n    const QUESTIONNAIRE_UNIT = 'http://hl7.org/fhir/StructureDefinition/questionnaire-unit';\n    const question = this.linkIdToQuestion[linkId];\n\n    if (question.extension) {\n      const extension = question.extension.find((e) => {\n        return e.url === QUESTIONNAIRE_UNIT &&\n          e.valueCoding.system && e.valueCoding.system === 'http://unitsofmeasure.org';\n      });\n\n      if (extension && extension.valueCoding.code) {\n        return extension.valueCoding.code;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Generate a label name like A, B, C, ... AA, AB which is not already used\n   * @param existingNames {string[]} - Array of names already used by existing variables\n   * @private\n   */\n  private getNewLabelName(existingNames: string[]): string {\n    // All letters which can be used for a simple variable name\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n\n    // First pass is with a single character variable name. Other passes are with two\n    const firstLetterAlphabet = [''].concat(alphabet);\n    for (const firstLetter of firstLetterAlphabet) {\n      for (const secondLetter of alphabet) {\n        const potentialName = firstLetter + secondLetter;\n\n        const count = existingNames.filter((e) => e === potentialName);\n\n        if (count.length === 0) {\n          return potentialName;\n        }\n      }\n    }\n\n    // Don't return a suggested name if we exhausted all combinations\n    return '';\n  }\n\n  /**\n   * Toggle the mightBeScore\n   */\n  toggleMightBeScore(): void {\n    this.mightBeScore = !this.mightBeScore;\n    this.mightBeScoreChange.next(this.mightBeScore);\n  }\n\n  /**\n   * Add variables and finalExpression and return the new FHIR Questionnaire\n   * @param url Extension URL to use for the expression\n   * @param finalExpression\n   */\n  export(url: string, finalExpression): object {\n    // Copy the fhir object, so we can export more than once\n    // (if we add our data the second export will have duplicates)\n    const fhir = copy(this.fhir);\n\n    const variablesToAdd = this.variables.map((e) => {\n      const variable = {\n        __$index: e.__$index,\n        url: this.VARIABLE_EXTENSION,\n        valueExpression: {\n          name: e.label,\n          language: e.type === 'query' ? this.LANGUAGE_FHIR_QUERY : this.LANGUAGE_FHIRPATH,\n          expression: e.expression\n        }\n      };\n\n      if (e.type === 'simple') {\n        // @ts-ignore\n        variable.valueExpression.extension = [{\n          url: RuleEditorService.SIMPLE_SYNTAX_EXTENSION,\n          valueString: e.simple\n        }];\n      }\n\n      return variable;\n    });\n\n    // Split the variables into two buckets: Variables present when\n    // Questionnaire was imported and variables added by the user using the Rule\n    // Editor. Add variables present initially among the existing extensions.\n    // Add the remaining variables at the end\n    const variablesPresentInitially = [];\n    const variablesAdded = [];\n\n    variablesToAdd.forEach(e => {\n      if (e.__$index === undefined) {\n        variablesAdded.push(e);\n      } else {\n        variablesPresentInitially.push(e);\n      }\n    });\n\n    if (this.syntaxType === 'simple') {\n      this.findOrAddExtension(finalExpression.valueExpression.extension, RuleEditorService.SIMPLE_SYNTAX_EXTENSION, 'String', this.simpleExpression);\n    }\n\n    if (this.linkIdContext !== undefined && this.linkIdContext !== null && this.linkIdContext !== '') {\n      // Treat the final expression as an added variable since it needs to go after the variables added\n      this.insertExtensions(fhir, fhir.item, this.linkIdContext, variablesPresentInitially, variablesAdded.concat(finalExpression));\n    } else {\n      this.insertExtensions(fhir, fhir.item, this.linkIdContext, variablesPresentInitially, variablesAdded);\n    }\n\n    // If there are any query observation extensions check to make sure there is\n    // a patient launch context. If there is not add one.\n    const hasQueryObservations = this.variables.find((e) => {\n      return e.type === 'queryObservation';\n    });\n\n    if (hasQueryObservations !== undefined) {\n      const patientLaunchContext = fhir.extension.find((extension) => {\n        if (extension.url === this.LAUNCH_CONTEXT_URI &&\n            Array.isArray(extension.extension)) {\n          const patientName = extension.extension.find((subExtension) => {\n            return subExtension.url === 'name' && subExtension.valueId === 'patient';\n          });\n\n          if (patientName !== undefined) {\n            return true;\n          }\n        }\n\n        return false;\n      });\n\n      if (patientLaunchContext === undefined) {\n        // Add launchContext\n        if (!Array.isArray(fhir.extension)) {\n          fhir.extension = [];\n        }\n\n        const name = 'patient';\n        const type = 'Patient';\n        const description = 'For filling in patient information as the subject for the form';\n\n        fhir.extension.push({\n          url: this.LAUNCH_CONTEXT_URI,\n          extension: [\n            { url: 'name', valueId: name },\n            { url: 'type', valueCode: type },\n            { url: 'description', valueString: description }\n          ]\n        });\n\n        this.uneditableVariables.push({\n          name,\n          type,\n          description\n        });\n        this.uneditableVariablesChange.next(this.uneditableVariables);\n      }\n    }\n\n    return fhir;\n  }\n\n  /**\n   * Given an extension array, find an extension based on the URI and update the\n   * value for the type. If one does not exist add it to the extension list\n   * @param extension - Extension array\n   * @param uri - URI to search for\n   * @param type - Type of value\n   * @param value - Value\n   * @private\n   */\n  private findOrAddExtension(extension, uri, type, value): void {\n    if (extension instanceof Array) {\n      const index = extension.findIndex((e) =>  e.url === uri);\n      const extensionToAdd = {\n        url: uri,\n        ['value' + type]: value\n      };\n\n      if (index === -1) {\n        extension.push(extensionToAdd);\n      } else {\n        extension[index] = extensionToAdd;\n      }\n    }\n  }\n\n  /**\n   * Takes FHIR questionnaire definition and a linkId and returns the FHIR\n   * Questionnaire with a calculated expression at the given linkId which sums up\n   * all the ordinal values in the questionnaire\n   * @param questionnaire - FHIR Questionnaire\n   * @param linkId - Question linkId\n   */\n  addTotalScoreRule(questionnaire, linkId): object {\n    this.fhir = questionnaire;\n    this.linkIdContext = linkId;\n    return this.addSumOfScores();\n  }\n\n  /**\n   * Get a list of item ids based on the logic for `addSumOfScores()`\n   * @param items - FHIR item array\n   * @param linkId - Link ID context\n   */\n  getScoreItemIds(items, linkId: string): Array<string> {\n    let scoreItemIds = [];\n\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n\n      // Repeating items are currently not supported\n      if (item.repeats) {\n        continue;\n      }\n\n      if (item.linkId === linkId) {\n        // Do not consider items at or below the linkId context required\n        break;\n      } else if (this.hasRuleEditorExtension(item)) {\n        // If the current item is already a score calculation or this is\n        // repeating we should not consider it or any items above\n        scoreItemIds = [];\n      } else if (this.itemHasScore(item)) {\n        scoreItemIds.push(item.linkId);\n      }\n\n      // Work with nested items\n      if (item.item) {\n        scoreItemIds = scoreItemIds.concat(\n          this.getScoreItemIds(item.item, linkId));\n      }\n    }\n\n    return scoreItemIds;\n  }\n\n  /**\n   * Given the current FHIR questionnaire definition and a linkId return a new FHIR\n   * Questionnaire with a calculated expression at the given linkId which sums up\n   * all the ordinal values in the questionnaire:\n   *  * Assume scored items are above (in question order) the total score item.\n   *  * If a preceding item is also a total score item, don’t consider any earlier items.\n   */\n  addSumOfScores(): any {\n    const fhir = this.fhir;\n    const linkIdContext = this.linkIdContext;\n\n    const variableNames = [];\n    // Get an array of linkIds for score questions\n    const scoreQuestionLinkIds = this.getScoreItemIds(fhir.item, linkIdContext);\n\n    // Get as many short suggested variable names as we have score questions\n    scoreQuestionLinkIds.forEach(() => {\n      variableNames.push(this.getNewLabelName(variableNames));\n    });\n\n    const scoreQuestions = scoreQuestionLinkIds.map((e, i) => {\n      return {\n        url: this.VARIABLE_EXTENSION,\n        valueExpression: {\n          name: variableNames[i],\n          language: this.LANGUAGE_FHIRPATH,\n          expression: `%questionnaire.item.where(linkId = '${e}').answerOption` +\n            `.where(valueCoding.code=%resource.item.where(linkId = '${e}').answer.valueCoding.code).extension` +\n            `.where(url='http://hl7.org/fhir/StructureDefinition/ordinalValue').valueDecimal`,\n          extension: [{\n            url: RuleEditorService.SCORE_VARIABLE_EXTENSION\n          }]\n        }\n      };\n    });\n\n    const anyQuestionAnswered = {\n      url: this.VARIABLE_EXTENSION,\n      valueExpression: {\n        name: 'any_questions_answered',\n        language: this.LANGUAGE_FHIRPATH,\n        expression: variableNames.map((e) => `%${e}.exists()`).join(' or '),\n        extension: [{\n          url: RuleEditorService.SCORE_VARIABLE_EXTENSION\n        }]\n      }\n    };\n\n    const sumString = variableNames.map((e) => `iif(%${e}.exists(), %${e}, 0)`).join(' + ');\n\n    const totalCalculation = {\n      url: this.CALCULATED_EXPRESSION,\n      valueExpression: {\n        description: 'Total score calculation',\n        language: this.LANGUAGE_FHIRPATH,\n        expression: `iif(%any_questions_answered, ${sumString}, {})`,\n        extension: [{\n          url: RuleEditorService.SCORE_EXPRESSION_EXTENSION\n        }]\n      }\n    };\n\n    scoreQuestions.push(anyQuestionAnswered);\n    // @ts-ignore\n    scoreQuestions.push(totalCalculation);\n\n    this.insertExtensions(fhir, fhir.item, linkIdContext, [], scoreQuestions);\n\n    return fhir;\n  }\n\n  /**\n   * Checks if the referenced Questionnaire item is a score calculation added by\n   * the Rule Editor\n   * @param questionnaire - FHIR Questionnaire\n   * @param linkId - Questionnaire item Link ID to check, if not provided check\n   * all items on the questionnaire\n   * @return True if the question at linkId is a score calculation created by\n   * the Rule Editor, false otherwise\n   */\n  isScoreCalculation(questionnaire, linkId?): boolean {\n    const checkForScore = (item) => {\n      if (linkId === undefined || linkId === item.linkId) {\n        const isScore = this.hasRuleEditorExtension(item);\n\n        if (isScore) {\n          return true;\n        }\n      }\n\n      if (item.item) {\n        const subItemHasScore = item.item.find((subItem) => checkForScore(subItem));\n\n        if (subItemHasScore) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    return !!questionnaire.item.find((item) => checkForScore(item));\n  }\n\n  /**\n   * Returns true if the current item has a custom Rule Editor score extension\n   * (indicating it was previously modified by the Rule Editor)\n   * @param item\n   * @private\n   */\n  private hasRuleEditorExtension(item): boolean {\n    if (item.extension) {\n      return item.extension.find((extension) => !!this.isRuleEditorExtension(extension));\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Updates a FHIR questionnaire score calculation on the item identified by\n   * the linkId\n   * @param questionnaire - FHIR Questionnaire\n   * @param linkId - Questionnaire item Link ID to update\n   * @return Questionnaire with updated calculation\n   */\n  updateScoreCalculation(questionnaire, linkId): object {\n    this.removeSumOfScores(questionnaire, linkId);\n    return this.addTotalScoreRule(questionnaire, linkId);\n  }\n\n  /**\n   * Removes score calculations added by the rule editor on the entire\n   * questionnaire or on a specific item\n   * @param questionnaire - FHIR Questionnaire\n   * @param linkId - Questionnaire item Link ID where to remove score. If empty\n   * try to remove scores from all items.\n   * @return Questionnaire without the score calculation variable and expression\n   */\n  removeSumOfScores(questionnaire, linkId?): any {\n    this.fhir = questionnaire;\n\n    const removeItemScoreVariables = (item) => {\n      if (linkId === undefined || linkId === item.linkId) {\n        item.extension = item.extension.filter((extension) => !this.isRuleEditorExtension(extension));\n      }\n\n      if (item.item) {\n        item.item.forEach((subItem) => removeItemScoreVariables(subItem));\n      }\n    };\n\n    this.fhir.item.forEach(removeItemScoreVariables);\n\n    return this.fhir;\n  }\n\n  /**\n   * Returns true if the extension has an extension for calculating score false otherwise\n   * @param extension - FHIR Extension object\n   * @private\n   */\n  private isRuleEditorExtension(extension): boolean {\n    if (extension.valueExpression && extension.valueExpression.extension &&\n      extension.valueExpression.extension.length) {\n      return !!extension.valueExpression.extension.find(e => e &&\n        (e.url === RuleEditorService.SCORE_VARIABLE_EXTENSION ||\n          e.url === RuleEditorService.SCORE_EXPRESSION_EXTENSION));\n    } else {\n      return false;\n    }\n  }\n\n  private insertExtensions(fhir, items, linkId, variablesPresentInitially, variablesAdded): void {\n    if (linkId === undefined || linkId === null || linkId === '') {\n      addOrInsertExtensions(fhir);\n    } else {\n      for (const item of items) {\n        if (item.linkId === linkId) {\n          addOrInsertExtensions(item);\n\n          break;\n        } else if (item.item) {\n          this.insertExtensions(fhir, item.item, linkId, variablesPresentInitially, variablesAdded);\n        }\n      }\n    }\n\n    function addOrInsertExtensions(item): void {\n      if (item.extension) {\n        // Introduce variables present before\n        item.extension = item.extension.concat(variablesPresentInitially);\n        // Sort by index\n        item.extension.sort((a, b) => a.__$index - b.__$index);\n        // Add variables added by the user\n        item.extension = item.extension.concat(variablesAdded);\n      } else {\n        item.extension = variablesPresentInitially.concat(variablesAdded);\n      }\n\n      // Remove __$index\n      item.extension = item.extension.map(({__$index, ...other}) => other);\n    }\n  }\n\n  /**\n   * Get the expression for a question\n   * @param linkId - Question linkId\n   * @param itemHasScore - Answer has an ordinalValue extension\n   * @param convertible - Units can be converted\n   * @param unit - Base units\n   * @param toUnit - Destination units\n   */\n  valueOrScoreExpression(linkId: string, itemHasScore: boolean, convertible: boolean, unit: string, toUnit: string): string {\n    if (itemHasScore) {\n      return `%questionnaire.item.where(linkId = '${linkId}').answerOption` +\n        `.where(valueCoding.code=%resource.item.where(linkId = '${linkId}').answer.valueCoding.code).extension` +\n        `.where(url='http://hl7.org/fhir/StructureDefinition/ordinalValue').valueDecimal`;\n    } else if (convertible && unit && toUnit) {\n      const factor = UNIT_CONVERSION[unit].find((e) => e.unit === toUnit).factor;\n      return `%resource.item.where(linkId='${linkId}').answer.value*${factor}`;\n    } else {\n      return `%resource.item.where(linkId='${linkId}').answer.value`;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { RuleEditorService, SimpleStyle } from '../rule-editor.service';\n\n@Component({\n  selector: 'lhc-calculate-sum-prompt',\n  templateUrl: './calculate-sum-prompt.component.html',\n  styleUrls: ['./calculate-sum-prompt.component.css']\n})\nexport class CalculateSumPromptComponent implements OnInit {\n  @Input() lhcStyle: SimpleStyle = {};\n  @Output() export: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(private ruleEditorService: RuleEditorService) { }\n\n  /**\n   * Angular lifecycle hook called when the component is initialized\n   */\n  ngOnInit(): void {}\n\n  /**\n   * Close the dialog by specifying this should not be a score calculation\n   */\n  onCloseClick(): void {\n    this.ruleEditorService.toggleMightBeScore();\n  }\n\n  /**\n   * Export the sum of scores as a FHIR Questionnaire\n   */\n  onExportClick(): void {\n    this.export.emit();\n  }\n}\n","<div class=\"score-modal\">\n  <p [style]=\"lhcStyle.description\">It looks like this might be a score calculation.</p>\n\n  <p [style]=\"lhcStyle.description\">Would you like to calculate the sum of scores?</p>\n\n  <button class=\"primary\" (click)=\"onExportClick()\" [style]=\"lhcStyle.buttonPrimary\" id=\"export-score\">Yes</button>\n  <button (click)=\"onCloseClick()\" id=\"skip-export-score\">No</button>\n</div>\n","<div *ngIf=\"uneditableVariables.length\">\n  <h2>Variables in Scope for This Item</h2>\n\n  <div class=\"container\">\n    <div class=\"variable-header\">\n      <div class=\"variable-column-label\">Label</div>\n      <div class=\"variable-column-type\">Variable Type</div>\n      <div class=\"variable-column-details\">Description/Expression</div>\n    </div>\n    <div class=\"variable-row\" *ngFor=\"let variable of uneditableVariables\">\n      <div class=\"variable-column-label\">{{variable.name}}</div>\n      <div class=\"variable-column-type\">{{variable.type}}</div>\n      <div class=\"variable-column-details\">{{variable.description}}</div>\n    </div>\n  </div>\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { RuleEditorService } from '../rule-editor.service';\nimport { UneditableVariable } from '../variable';\n\n@Component({\n  selector: 'lhc-uneditable-variables',\n  templateUrl: './uneditable-variables.component.html',\n  styleUrls: ['./uneditable-variables.component.css']\n})\nexport class UneditableVariablesComponent implements OnInit, OnDestroy {\n  uneditableVariables: UneditableVariable[];\n  uneditableVariablesSubscription;\n\n  constructor(private variableService: RuleEditorService) {}\n\n  /**\n   * Angular lifecycle hook called when the component is initialized\n   */\n  ngOnInit(): void {\n    this.uneditableVariables = this.variableService.uneditableVariables;\n    this.uneditableVariablesSubscription =\n        this.variableService.uneditableVariablesChange.subscribe((variables) => {\n      this.uneditableVariables = variables;\n    });\n  }\n\n  /**\n   * Angular lifecycle hook called before the component is destroyed\n   */\n  ngOnDestroy(): void {\n    this.uneditableVariablesSubscription.unsubscribe();\n  }\n}\n","<div class=\"text-muted syntax-preview\" [ngStyle]=\"lhcStyle\" *ngIf=\"syntax || showWhenEmpty\">\n  <div class=\"fhirpath\">\n    FHIRPath:\n    <pre class=\"d-inline text-muted syntax\" matTooltip=\"{{syntax}}\">\n      {{syntax}}\n    </pre>\n  </div>\n  <button class=\"copy\" matTooltip=\"Copy to clipboard\"\n          [cdkCopyToClipboard]=\"syntax\" (click)=\"copyNotification()\" aria-label=\"Copy to clipboard\">\n    <!-- Copy icon https://fonts.google.com/icons?icon.query=copy -->\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16px\" viewBox=\"0 0 24 24\" width=\"24px\" fill=\"#000000\">\n      <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n      <path d=\"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z\"/>\n    </svg>\n  </button>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { SimpleStyle } from '../rule-editor.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'lhc-syntax-preview',\n  templateUrl: './syntax-preview.component.html',\n  styleUrls: ['./syntax-preview.component.css']\n})\nexport class SyntaxPreviewComponent implements OnInit {\n  @Input() syntax;\n  @Input() lhcStyle: SimpleStyle;\n  @Input() showWhenEmpty = false;\n\n  constructor(private snackBar: MatSnackBar) { }\n\n  ngOnInit(): void {\n  }\n\n  /**\n   * Show an ephemeral notification that the value was copied.\n   */\n  copyNotification(): void {\n    this.snackBar.open('Copied to clipboard', null, {\n      duration: 2000\n    });\n  }\n}\n","<div class=\"form-inline question\">\n  <div class=\"question-select\">\n    <select [(ngModel)]=\"linkId\" (change)=\"onChange(true)\" [style]=\"lhcStyle.select\" aria-label=\"Question\">\n      <option value=\"\" disabled hidden>Select...</option>\n      <option *ngFor=\"let question of questions\" [value]=\"question.linkId\">\n        {{question.text + ' (' + question.linkId + ')'}}\n      </option>\n    </select>\n  </div>\n\n  <div class=\"unit-select\">\n    <select *ngIf=\"conversionOptions\" [(ngModel)]=\"toUnit\" [style]=\"lhcStyle.select\"\n            (change)=\"onChange(false)\" aria-label=\"Unit conversion\">\n      <option value=\"\">Keep form units ({{unit}})</option>\n      <option *ngFor=\"let u of conversionOptions\" value=\"{{u.unit}}\">Convert to {{u.unit}}</option>\n    </select>\n\n    <div *ngIf=\"isNonConvertibleUnit\" class=\"detail\">{{unit}}</div>\n    <div *ngIf=\"itemHasScore\" class=\"detail\">Score</div>\n  </div>\n</div>\n\n<lhc-syntax-preview [syntax]=\"variable.expression\" [lhcStyle]=\"lhcStyle\"></lhc-syntax-preview>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Question, Variable } from '../variable';\nimport { RuleEditorService, SimpleStyle } from '../rule-editor.service';\nimport { Unit, UNIT_CONVERSION } from '../units';\n\n@Component({\n  selector: 'lhc-question',\n  templateUrl: './question.component.html',\n  styleUrls: ['./question.component.css']\n})\nexport class QuestionComponent implements OnInit {\n  @Input() variable: Variable;\n  @Input() lhcStyle: SimpleStyle = {};\n  linkId = '';\n  questions: Question[];\n  itemHasScore = false;\n  isNonConvertibleUnit = false;\n  toUnit: string;\n  unit: string;\n  conversionOptions: Unit[];\n\n  constructor(private variableService: RuleEditorService) {}\n\n  /**\n   * Angular lifecycle hook called when the component is initialized\n   */\n  ngOnInit(): void {\n    this.linkId = this.variable.linkId ? this.variable.linkId : '';\n    this.toUnit = this.variable.unit ? this.variable.unit : '';\n    this.questions = this.variableService.questions;\n\n    this.onChange(false);\n\n    this.variableService.questionsChange.subscribe((questions) => {\n      this.questions = questions;\n    });\n  }\n\n  /**\n   * Get the question based on linkId\n   * @param linkId - FHIR linkId\n   */\n  getQuestion(linkId): Question {\n    return this.questions.find((q) => {\n      return q.linkId === linkId;\n    });\n  }\n\n  /**\n   * Get the list of units we can convert to based on the starting unit\n   * @param unit - Starting unit\n   */\n  getConversionOptions(unit: string): Unit[] {\n    return UNIT_CONVERSION[unit];\n  }\n\n  /**\n   * Called when the questionnaire question or unit is changed\n   * @param isQuestion - The change was for a question\n   */\n  onChange(isQuestion): void {\n    if (isQuestion) {\n      // Reset the conversion options when the question changes\n      this.toUnit = '';\n    }\n\n    // If we already have a question selected (as opposed to the select... prompt)\n    if (this.linkId) {\n      const question = this.getQuestion(this.linkId);\n      this.unit = question?.unit;\n      this.conversionOptions = this.getConversionOptions(this.unit);\n      this.isNonConvertibleUnit = this.unit && !this.conversionOptions;\n\n      // Check if this is a score\n      if (!this.conversionOptions && !this.isNonConvertibleUnit) {\n        this.itemHasScore = this.variableService.itemHasScore(this.linkId);\n      } else {\n        this.itemHasScore = false;\n      }\n\n      this.variable.expression = this.variableService.valueOrScoreExpression(\n        this.linkId, this.itemHasScore, !this.isNonConvertibleUnit, this.unit, this.toUnit);\n    }\n  }\n}\n","<div class=\"form-inline query\">\n  <div class=\"query-select\">\n    <input [style]=\"lhcStyle.input\" placeholder=\"LOINC Name / LOINC Number / Other Code\"\n           class=\"query-autocomplete\" #autoComplete id=\"autocomplete-{{index}}\" />\n  </div>\n  <div class=\"time-input\">\n    <input [style]=\"lhcStyle.input\" [(ngModel)]=\"timeInterval\" (change)=\"onChange()\"\n           aria-label=\"Time interval\" type=\"number\" min=\"1\" />\n  </div>\n  <div class=\"time-select\">\n    <select [style]=\"lhcStyle.input\" [(ngModel)]=\"timeIntervalUnit\"\n            (change)=\"onChange()\" aria-label=\"Time interval units\">\n      <option value=\"days\">Day(s)</option>\n      <option value=\"weeks\">Week(s)</option>\n      <option value=\"months\">Month(s)</option>\n      <option value=\"years\">Year(s)</option>\n    </select>\n  </div>\n</div>\n<div class=\"syntax-preview text-muted\" [ngStyle]=\"lhcStyle\" *ngIf=\"codes.length\">\n  x-fhir-query: <pre class=\"d-inline text-muted\" title=\"{{expression}}\">{{expression}}</pre>\n</div>\n","import { AfterViewInit, Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { SimpleStyle } from '../rule-editor.service';\nimport Def from 'autocomplete-lhc';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'lhc-query-observation',\n  templateUrl: './query-observation.component.html',\n  styleUrls: ['./query-observation.component.css']\n})\nexport class QueryObservationComponent implements OnInit, AfterViewInit, OnDestroy {\n  queryUrl = 'https://clinicaltables.nlm.nih.gov/api/loinc_items/v3/search?df=text,LOINC_NUM';\n\n  @Input() variable;\n  @Input() index;\n  @Input() lhcStyle: SimpleStyle = {};\n  @ViewChild('autoComplete') autoCompleteElement;\n  autoComplete;\n  codes: Array<string>;\n  timeInterval: number;\n  timeIntervalUnit: string;\n  expression: string;\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit(): void {\n    if (this.variable !== undefined) {\n      this.codes = (this.variable.codes !== undefined) ? this.variable.codes : [];\n      this.timeInterval = this.variable.timeInterval || 1;\n      this.timeIntervalUnit = this.variable.timeIntervalUnit || 'months';\n      this.expression = this.variable.expression;\n    } else {\n      this.codes = [];\n    }\n  }\n\n  /**\n   * After the autocomplete is ready to be interacted with fetch the name for\n   * any codes already in the query search.\n   */\n  ngAfterViewInit(): void {\n    this.autoComplete = new Def.Autocompleter.Search(\n      this.autoCompleteElement.nativeElement, this.queryUrl,\n      {\n        tableFormat: true,\n        valueCols: [0, 1],\n        colHeaders: ['Text', 'LOINC Number'],\n        maxSelect: '*'\n      });\n\n    this.codes.forEach((code) => {\n      const matches = code.match(/http:\\/\\/loinc.org\\|(.+)/);\n\n      if (matches !== null) {\n        const loincCode = matches[1];\n        // LOINC Code\n        this.http.get(`${this.queryUrl}&terms=${loincCode}`)\n          .subscribe((data) => {\n            const namePosition = 3;\n            const name = [data[namePosition][0][0], loincCode].join(' - ');\n            this.autoComplete.storeSelectedItem(name, loincCode);\n            this.autoComplete.addToSelectedArea(name);\n          });\n      } else {\n        // Non-loinc code\n        this.autoComplete.storeSelectedItem(code, undefined);\n        this.autoComplete.addToSelectedArea(code);\n      }\n\n    });\n\n    Def.Autocompleter.Event.observeListSelections(`autocomplete-${this.index}`, () => {\n      const selectedItemData = this.autoComplete.getSelectedItemData();\n\n      // If there is no code then this is not a loinc code and we need to get\n      // the value from the array above\n      this.codes = this.autoComplete.getSelectedCodes().map((code, index) => {\n        return (code === undefined) ? selectedItemData[index].text : `http://loinc.org|${code}`;\n      });\n      this.onChange();\n    });\n  }\n\n  /**\n   * Angular lifecycle hook\n   */\n  ngOnDestroy(): void {\n    if (this.autoComplete !== undefined) {\n      this.autoComplete.destroy();\n    }\n  }\n\n  /**\n   * On changes update the expression and preview\n   */\n  onChange(): void {\n    // Separate with URL encoded version of the comma: ','\n    const codes = this.codes.join('%2C');\n\n    this.variable.expression = this.expression =\n      `Observation?code=${codes}&` +\n      `date=gt{{today()-${this.timeInterval} ${this.timeIntervalUnit}}}&` +\n      `patient={{%patient.id}}&_sort=-date&_count=1`;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as easyPathExpressions from 'easy-path-expressions';\n\n@Pipe({\n  name: 'easyPathExpressions'\n})\nexport class EasyPathExpressionsPipe implements PipeTransform {\n\n  transform(value: string, variables: string[]): string {\n    if (value !== undefined) {\n      const fhirPath = easyPathExpressions.fhirConvert(value, variables);\n      if (fhirPath !== null) {\n        return fhirPath;\n      }\n    }\n\n    return 'Not valid';\n  }\n}\n","import { Component, Input, Output, EventEmitter, OnChanges } from '@angular/core';\nimport { EasyPathExpressionsPipe } from '../easy-path-expressions.pipe';\nimport { SimpleStyle } from '../rule-editor.service';\n\n@Component({\n  selector: 'lhc-syntax-converter',\n  templateUrl: './syntax-converter.component.html',\n  styleUrls: ['./syntax-converter.component.css']\n})\nexport class SyntaxConverterComponent implements OnChanges {\n  @Input() simple: string;\n  @Input() variables;\n  @Input() lhcStyle: SimpleStyle = {};\n  @Output() simpleChange = new EventEmitter<string>();\n  @Output() expressionChange = new EventEmitter<string>();\n\n  fhirPathExpression: string;\n  jsToFhirPathPipe = new EasyPathExpressionsPipe();\n\n  constructor() { }\n\n  ngOnChanges(): void {\n    this.onExpressionChange(this.simple);\n  }\n\n  onExpressionChange(simple): void {\n    const fhirPath: string = this.jsToFhirPathPipe.transform(simple, this.variables);\n    this.fhirPathExpression = fhirPath;\n\n    this.simpleChange.emit(simple);\n    this.expressionChange.emit(fhirPath);\n  }\n}\n","<input [(ngModel)]=\"simple\" (ngModelChange)=\"onExpressionChange($event)\" class=\"simple-expression\"\n       aria-label=\"Easy Path Expression\" [style]=\"lhcStyle.input\" />\n<lhc-syntax-preview [syntax]=\"fhirPathExpression\"></lhc-syntax-preview>\n","<h2 [style]=\"lhcStyle.h2\">Item Variables</h2>\n\n<div class=\"container\">\n  <div class=\"variable-header\" [style]=\"lhcStyle.variableHeader\" aria-hidden=\"true\">\n    <div class=\"variable-column-label\">Label</div>\n    <div class=\"variable-column-type\">Variable Type</div>\n    <div class=\"variable-column-details\">Question/FHIRPath Expression/FHIR Query</div>\n  </div>\n  <div cdkDropList (cdkDropListDropped)=\"drop($event)\">\n    <div class=\"variable-row drag-variable\" [style]=\"lhcStyle.variableRow\" *ngFor=\"let variable of variables; index as i\" [id]=\"'row-' + i\" cdkDrag>\n      <div class=\"variable-column-label\">\n        <!-- Inline SVG for the row drag and drop handle -->\n        <svg cdkDragHandle xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" class=\"handle\" viewBox=\"0 0 16 16\">\n          <path d=\"M7 2a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z\"/>\n        </svg>\n        <input [id]=\"'variable-label-' + i\" [(ngModel)]=\"variable.label\" (change)=\"onNameChange()\" [style]=\"lhcStyle.input\" class=\"label\" aria-label=\"Variable label\" />\n      </div>\n      <div class=\"variable-column-type\">\n        <select [id]=\"'variable-type-' + i\" [(ngModel)]=\"variable.type\" (change)=\"onTypeChange($event)\" [style]=\"lhcStyle.select\" aria-label=\"Variable type\">\n          <option value=\"\" disabled hidden>Select...</option>\n          <option *ngFor=\"let type of variableType | keyvalue\" value=\"{{type.key}}\">{{type.value}}</option>\n        </select>\n      </div>\n      <div class=\"variable-column-details\" [ngSwitch]=\"variable.type\">\n        <lhc-question [variable]=\"variable\" *ngSwitchCase=\"'question'\" [lhcStyle]=\"lhcStyle\"></lhc-question>\n        <lhc-query-observation [variable]=\"variable\" [index]=\"i\" *ngSwitchCase=\"'queryObservation'\" [lhcStyle]=\"lhcStyle\"></lhc-query-observation>\n        <div class=\"form-inline\" *ngSwitchCase=\"'simple'\">\n          <lhc-syntax-converter\n            [id]=\"'variable-expression-' + i\"\n            [simple]=\"variable.simple\"\n            [variables]=\"getAvailableVariables(i)\"\n            [lhcStyle]=\"lhcStyle\"\n            (simpleChange)=\"updateSimpleExpression(i, $event)\"\n            (expressionChange)=\"updateExpression(i, $event)\">\n          </lhc-syntax-converter>\n        </div>\n        <div class=\"form-inline\" *ngSwitchCase=\"'expression'\">\n          <input [id]=\"'variable-expression-' + i\" [(ngModel)]=\"variable.expression\" [style]=\"lhcStyle.input\" aria-label=\"FHIRPath Expression\" />\n        </div>\n        <div class=\"form-inline\" *ngSwitchCase=\"'query'\">\n          <input [id]=\"'variable-expression-' + i\" [(ngModel)]=\"variable.expression\" [style]=\"lhcStyle.input\"\n                 aria-label=\"FHIR Query\" placeholder=\"x-fhir-query\" />\n        </div>\n      </div>\n      <div class=\"variable-column-actions\">\n        <button class=\"btn btn-danger remove-variable\" aria-label=\"Remove variable\" title=\"Remove variable\" [style]=\"lhcStyle.buttonDanger\" (click)=\"onRemove(i)\">x</button>\n      </div>\n    </div>\n    <div *ngIf=\"!variables.length\" class=\"no-variables\">No variables, please <a href=\"#\" (click)=\"onAdd()\">add one</a>.</div>\n  </div>\n</div>\n\n<button id=\"add-variable\" class=\"btn btn-secondary mt-2\" (click)=\"onAdd()\" [ngStyle]=\"lhcStyle.buttonSecondary\">Add variable</button>\n","import { Component, Input, OnChanges, OnDestroy, OnInit } from '@angular/core';\n\nimport { Variable, AllVariableType, SimpleVariableType } from '../variable';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { RuleEditorService, SimpleStyle } from '../rule-editor.service';\n\n@Component({\n  selector: 'lhc-variables',\n  templateUrl: './variables.component.html',\n  styleUrls: ['./variables.component.css']\n})\nexport class VariablesComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() lhcStyle: SimpleStyle = {};\n  @Input() advancedInterface: boolean;\n\n  variableType: any = SimpleVariableType;\n  variableSubscription;\n  variables: Variable[];\n\n  constructor(private ruleEditorService: RuleEditorService) {}\n\n  /**\n   * Angular lifecycle hook called when the component is initialized\n   */\n  ngOnInit(): void {\n    this.variables = this.ruleEditorService.variables;\n    this.variableSubscription = this.ruleEditorService.variablesChange.subscribe((variables) => {\n      this.variables = variables;\n    });\n  }\n\n  /**\n   * Angular lifecycle hook called when bound property changes\n   */\n  ngOnChanges(changes): void {\n    if (changes.advancedInterface) {\n      this.variableType = this.advancedInterface ? AllVariableType : SimpleVariableType;\n      if (this.variables) {\n        const previousValues = [];\n\n        this.variables.forEach((variable, index) => {\n          previousValues[index] = variable.type;\n          variable.type = '';\n        });\n\n        // Not sure of a better way of setting the previous values than this\n        setTimeout(() => {\n          previousValues.forEach((type, index) => {\n            this.variables[index].type = type;\n          });\n        }, 10);\n      }\n    }\n  }\n\n  /**\n   * Angular lifecycle hook called before the component is destroyed\n   */\n  ngOnDestroy(): void {\n    this.variableSubscription.unsubscribe();\n  }\n\n  /**\n   * Called when adding a new variable\n   */\n  onAdd(): void {\n    this.ruleEditorService.addVariable();\n  }\n\n  /**\n   * Remove a variable at an index\n   * @param i - index to remove\n   */\n  onRemove(i: number): void {\n    this.ruleEditorService.remove(i);\n  }\n\n  /**\n   * Drag and drop rearrange of variable order\n   * @param event - drag and drop event\n   */\n  drop(event: CdkDragDrop<Variable[]>): void {\n    moveItemInArray(this.variables, event.previousIndex, event.currentIndex);\n  }\n\n  /**\n   * Update the preview when the variable name changes\n   */\n  onNameChange(): void {\n    this.ruleEditorService.update();\n  }\n\n  /**\n   * Toggle the advanced interface based on the type\n   */\n  onTypeChange(event): void {\n    if (event.target.value === 'query' || event.target.value === 'expression') {\n      this.ruleEditorService.checkAdvancedInterface(true);\n    } else {\n      // Need to check all other variables and the final expression before we\n      // allow the advanced interface to be removed\n      this.ruleEditorService.checkAdvancedInterface();\n    }\n  }\n\n  /**\n   * Get the labels of available variables at the current index\n   * @param index - Index of variable we're editing\n   */\n  getAvailableVariables(index: number): Array<string> {\n    const uneditableVariables = this.ruleEditorService.uneditableVariables.map((e) => e.name);\n    // Only return variables up to but not including index\n    const editableVariables = this.variables.map((e) => e.label).slice(0, index);\n\n    return uneditableVariables.concat(editableVariables);\n  }\n\n  /**\n   * Update the expression for variable at the given index.\n   * @param i - index\n   * @param expression - new expression to use\n   */\n  updateExpression(i: number, expression): void {\n    this.variables[i].expression = expression;\n  }\n\n  /**\n   * Update the Easy Path for variable at the given index.\n   * @param i - index\n   * @param easyPath - new expression to use\n   */\n  updateSimpleExpression(i: number, easyPath): void {\n    this.variables[i].simple = easyPath;\n  }\n}\n","<div class=\"container\">\n  <div class=\"case-header\" [style]=\"lhcStyle.variableHeader\" aria-hidden=\"true\">\n    <div class=\"case-condition-column\">When expression is true</div>\n    <div class=\"case-output-column\">\n      Output\n      <input type=\"checkbox\" id=\"output-expressions\" [(ngModel)]=\"outputExpressions\" (change)=\"onChange()\">\n      <label for=\"output-expressions\">Use expressions (strings if unchecked)</label>\n    </div>\n  </div>\n  <div cdkDropList (cdkDropListDropped)=\"drop($event)\">\n    <div class=\"case-row drag-case\" [style]=\"lhcStyle.variableRow\" *ngFor=\"let caseStatement of cases; index as i\" [id]=\"'row-' + i\" cdkDrag>\n      <div class=\"case-condition-column\">\n        <!-- Inline SVG for the row drag and drop handle -->\n        <svg cdkDragHandle xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" class=\"handle\" viewBox=\"0 0 16 16\">\n          <path d=\"M7 2a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z\"/>\n        </svg>\n        <input *ngIf=\"syntax !== 'simple'\" type=\"text\" [id]=\"'case-condition-' + i\" [(ngModel)]=\"caseStatement.condition\" (ngModelChange)=\"onChange()\" [style]=\"lhcStyle.input\" class=\"condition\" aria-label=\"Case condition\" />\n        <input *ngIf=\"syntax === 'simple'\" type=\"text\" [id]=\"'case-condition-' + i\" [(ngModel)]=\"caseStatement.simpleCondition\" (ngModelChange)=\"onChange()\" [style]=\"lhcStyle.input\" class=\"condition\" aria-label=\"Case condition\" />\n        <span class=\"arrow\">→</span>\n      </div>\n      <div class=\"case-output-column\">\n        <input *ngIf=\"syntax !== 'simple'\" type=\"text\" [id]=\"'case-output-' + i\" [(ngModel)]=\"caseStatement.output\" (ngModelChange)=\"onChange()\" [style]=\"lhcStyle.input\" class=\"output\" aria-label=\"Case output\" />\n        <input *ngIf=\"syntax === 'simple'\" type=\"text\" [id]=\"'case-output-' + i\" [(ngModel)]=\"caseStatement.simpleOutput\" (ngModelChange)=\"onChange()\" [style]=\"lhcStyle.input\" class=\"output\" aria-label=\"Case output\" />\n      </div>\n      <div class=\"case-column-actions\" *ngIf=\"cases.length > 1\">\n        <button class=\"btn btn-danger remove-case\" aria-label=\"Remove case\" title=\"Remove case\" [style]=\"lhcStyle.buttonDanger\" (click)=\"onRemove(i)\">x</button>\n      </div>\n    </div>\n  </div>\n</div>\n\n<button id=\"add-case\" class=\"btn btn-secondary mt-2\" (click)=\"onAdd()\" [ngStyle]=\"lhcStyle.buttonSecondary\">Add case</button>\n\n<div class=\"case-row\">\n  <div class=\"case-condition-column\"></div>\n  <div class=\"case-output-column\">\n    <label>\n      Default output value:\n      <input *ngIf=\"syntax !== 'simple'\" type=\"text\" [(ngModel)]=\"defaultCase\" (ngModelChange)=\"onChange()\" [style]=\"lhcStyle.input\" class=\"default\" />\n      <input *ngIf=\"syntax === 'simple'\" type=\"text\" [(ngModel)]=\"simpleDefaultCase\" (ngModelChange)=\"onChange()\" [style]=\"lhcStyle.input\" class=\"default\" />\n    </label>\n  </div>\n</div>\n<lhc-syntax-preview [lhcStyle]=\"lhcStyle\" [syntax]=\"output\" *ngIf=\"!hidePreview\"></lhc-syntax-preview>\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output } from '@angular/core';\nimport { RuleEditorService, SimpleStyle } from '../rule-editor.service';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { CASE_REGEX, CaseStatement, Variable } from '../variable';\nimport { EasyPathExpressionsPipe } from '../easy-path-expressions.pipe';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\n\n@Component({\n  selector: 'lhc-case-statements',\n  templateUrl: './case-statements.component.html',\n  styleUrls: ['./case-statements.component.css']\n})\nexport class CaseStatementsComponent implements OnInit, OnChanges {\n  @Input() lhcStyle: SimpleStyle = {};\n  @Input() syntax: string;\n  @Input() simpleExpression: string;\n  @Input() expression: string;\n\n  @Output() expressionChange = new EventEmitter<string>();\n  @Output() simpleChange = new EventEmitter<string>();\n\n  STRING_REGEX = /^'(.*)'$/;\n  pipe = new EasyPathExpressionsPipe();\n  outputExpressions = true;\n  defaultCase: string;\n  simpleDefaultCase: string;\n  cases: Array<CaseStatement> = [{condition: '', simpleCondition: '', output: '', simpleOutput: ''}];\n  output = '';\n  hidePreview = false;\n\n  constructor(private ruleEditorService: RuleEditorService,\n              private liveAnnouncer: LiveAnnouncer) {}\n\n  /**\n   * Angular lifecycle hook for initialization\n   */\n  ngOnInit(): void {\n    if (this.syntax === 'fhirpath' && this.expression !== undefined) {\n      this.parseIif(this.expression, 0);\n    } else if (this.syntax === 'simple' && this.simpleExpression !== undefined) {\n      this.parseSimpleCases();\n    }\n\n    this.output = this.getIif(0);\n  }\n\n  /**\n   * Parses the Easy Path expression and populates the case editor. Toggles \"use\n   * expressions\" off if output is only strings.\n   */\n  parseSimpleCases(): void {\n    this.parseIif(this.simpleExpression, 0);\n\n    // If all output values are strings toggle off \"use expressions\"\n    const outputString = this.cases.find(e => (!this.isString(e.simpleOutput)));\n    const defaultIsString = this.isString(this.simpleDefaultCase);\n\n    if (outputString === undefined && defaultIsString) {\n      this.outputExpressions = false;\n      // Remove quotes from output strings and default case\n      this.cases.forEach(e => {\n        e.simpleOutput = this.removeQuotes(e.simpleOutput);\n      });\n      this.simpleDefaultCase = this.removeQuotes(this.simpleDefaultCase);\n    }\n  }\n\n  /**\n   * Checks if the expression is a string\n   */\n  isString(expression: string): boolean {\n    return this.STRING_REGEX.test(expression);\n  }\n\n  /**\n   * Removes surrounding quotes\n   */\n  removeQuotes(expression: string): string {\n    return expression.match(this.STRING_REGEX)[1];\n  }\n\n  /**\n   * Angular lifecycle hook for changes\n   */\n  ngOnChanges(changes): void {\n    if (changes.syntax && this.syntax === 'simple' && changes.syntax.firstChange === false) {\n      this.parseSimpleCases();\n      this.onChange();\n    } else if (changes.syntax && this.syntax === 'fhirpath' && changes.syntax.firstChange === false) {\n      this.outputExpressions = true;\n      this.parseIif(this.expression, 0);\n      this.onChange();\n    }\n  }\n\n  /**\n   * Called when adding a new case\n   */\n  onAdd(): void {\n    this.cases.push({condition: '', simpleCondition: '', output: '', simpleOutput: ''});\n    this.onChange();\n    // TODO select next input box that was added\n  }\n\n  /**\n   * Remove the case at an index\n   * @param i - index to remove\n   */\n  onRemove(i): void {\n    this.cases.splice(i, 1);\n    this.onChange();\n  }\n\n  /**\n   * Angular lifecycle hook for changes\n   */\n  onChange(): void {\n    this.output = this.getIif(0);\n    this.expressionChange.emit(this.output);\n    this.simpleChange.emit(this.simpleExpression);\n  }\n\n  /**\n   * Parse iif expression at specified level. Top level is 0\n   * @param expression - expression to parse\n   * @param level - depth or level of expression nesting\n   */\n  parseIif(expression: string, level: number): boolean {\n    // If expressions don't start with iif( and end with ) they cannot be parsed\n    const matches = expression.match(CASE_REGEX);\n\n    if (matches !== null) {\n      const iifContents = matches[1];\n      let commaMatches = 0;\n      let nestingLevel = 0;\n      let comma1 = -1;\n      let comma2 = -1;\n\n      // Check where the ',' is relative to depth as indicated by parenthesis\n      for (let i = 0; i < iifContents.length; i++) {\n        switch (iifContents[i]) {\n          case '(':\n            nestingLevel++;\n            break;\n          case ')':\n            nestingLevel--;\n            break;\n          case ',':\n            if (nestingLevel === 0) {\n              commaMatches++;\n              if (comma1 === -1) {\n                comma1 = i;\n              } else if (comma2 === -1) {\n                comma2 = i;\n              }\n            }\n            break;\n        }\n      }\n\n      if (commaMatches === 2 && nestingLevel === 0) {\n        // Clear out any existing cases if we have a match for iif\n        if (level === 0) {\n          this.cases = [];\n        }\n        const condition = iifContents.substring(0, comma1).trim();\n        const trueCase = iifContents.substring(comma1 + 1, comma2).trim();\n        const falseCase = iifContents.substring(comma2 + 1, iifContents.length).trim();\n\n        if (this.syntax === 'simple') {\n          const variableNames = this.ruleEditorService.variables.map(e => e.label);\n\n          this.cases.push({\n            simpleCondition: condition,\n            simpleOutput: trueCase,\n            condition: this.pipe.transform(condition, variableNames),\n            output: this.pipe.transform(trueCase, variableNames)\n          });\n        } else {\n          this.cases.push({\n            condition,\n            output: trueCase\n          });\n        }\n\n        const parseResult = this.parseIif(falseCase, level + 1);\n        if (parseResult === false && this.syntax !== 'simple') {\n          this.defaultCase = falseCase;\n        } else if (parseResult === false && this.syntax === 'simple') {\n          this.simpleDefaultCase = falseCase;\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get an iif expression given a nesting level\n   * @param level - nesting level\n   */\n  getIif(level: number): string {\n    const isSimple = this.syntax === 'simple';\n    const output = this.transformIfSimple(isSimple ?\n      this.cases[level].simpleOutput :\n      this.cases[level].output, true);\n    const condition = this.transformIfSimple(isSimple ?\n      this.cases[level].simpleCondition :\n      this.cases[level].condition, false);\n\n    const defaultCase = this.transformIfSimple(isSimple ?\n      this.simpleDefaultCase : this.defaultCase, true);\n\n    if (level === 0) {\n      const previousValue = this.hidePreview;\n      this.hidePreview = condition === '' || output === '' || defaultCase === '';\n\n      if (!this.hidePreview && previousValue !== this.hidePreview) {\n        this.liveAnnouncer.announce('A FHIRPath conversion preview has appeared below.');\n      }\n    }\n\n    if (level === this.cases.length - 1) {\n      return `iif(${condition},${output},${defaultCase})`;\n    } else {\n      return `iif(${condition},${output},${this.getIif(level + 1)})`;\n    }\n  }\n\n  /**\n   * Transform the expression parameter if the syntax type is Easy Path,\n   * otherwise return the expression. Additionally if this is an output column\n   * and output expressions are off surround with quotes.\n   * @param expression - Easy Path or FHIRPath expression\n   * @param isOutput - True if processing an output or default value\n   * @return FHIRPath Expression\n   */\n  transformIfSimple(expression: string, isOutput: boolean): string {\n    if (expression === undefined) {\n      return '';\n    }\n\n    let processedExpression = expression;\n\n    if (isOutput && !this.outputExpressions) {\n      processedExpression = `'${processedExpression}'`;  // TODO should we escape the expression?\n    }\n\n    // Convert when syntax is simple but not in the output column is outputExpressions is disabled\n    if (this.syntax === 'simple' && !(isOutput && !this.outputExpressions)) {\n      return this.pipe.transform(processedExpression, this.ruleEditorService.variables.map(e => e.label));\n    } else {\n      return processedExpression;\n    }\n  }\n\n  /**\n   * Drag and drop rearrange of variable order\n   * @param event - drag and drop event\n   */\n  drop(event: CdkDragDrop<Variable[]>): void {\n    moveItemInArray(this.cases, event.previousIndex, event.currentIndex);\n    this.onChange();\n  }\n}\n","<div *ngIf=\"loadError\" class=\"error\">{{errorLoading}}</div>\n<lhc-calculate-sum-prompt *ngIf=\"calculateSum && !loadError\" (export)=\"addSumOfScores()\" [lhcStyle]=\"lhcStyle\"></lhc-calculate-sum-prompt>\n<div *ngIf=\"!calculateSum && !loadError\">\n  <h1 [style]=\"lhcStyle.h1\">{{titleName}}</h1>\n\n  <span class=\"checkbox\" matTooltip=\"When in the advanced interface you can edit FHIRPath and x-fhir-query directly. This mode is automatically enabled for complex Questionnaires.\">\n    <input type=\"checkbox\" id=\"advanced-interface\" [disabled]=\"disableInterfaceToggle\"\n           [(ngModel)]=\"advancedInterface\">\n    <label for=\"advanced-interface\">Advanced interface</label>\n  </span>\n\n  <section id=\"uneditable-variables-section\" class=\"mb-3\">\n    <lhc-uneditable-variables></lhc-uneditable-variables>\n  </section>\n\n  <section id=\"variables-section\" class=\"mb-3\">\n    <lhc-variables [lhcStyle]=\"lhcStyle\" [advancedInterface]=\"advancedInterface\"></lhc-variables>\n  </section>\n\n  <section id=\"final-expression-section\" class=\"mb-3\" *ngIf=\"expressionUri\">\n    <h2 [style]=\"lhcStyle.h2\">{{expressionLabel}}</h2>\n\n    <div class=\"checkbox\">\n      <input type=\"checkbox\" id=\"case-statements\" [(ngModel)]=\"caseStatements\">\n      <label for=\"case-statements\">Use case statements</label>\n    </div>\n\n    <div class=\"flex-container\">\n      <div class=\"expression-type\" *ngIf=\"advancedInterface\">\n        <select class=\"form-control\" [(ngModel)]=\"expressionSyntax\" (change)=\"onTypeChange($event)\" aria-label=\"Expression syntax type\" [ngStyle]=\"lhcStyle.select\">\n          <option value=\"simple\">Easy Path Expression</option>\n          <option value=\"fhirpath\">FHIRPath Expression</option>\n        </select>\n      </div>\n      <div *ngIf=\"!caseStatements\" class=\"expression\" [ngSwitch]=\"expressionSyntax\">\n        <lhc-syntax-converter\n          *ngSwitchCase=\"'simple'\"\n          [simple]=\"simpleExpression\"\n          [variables]=\"variables\"\n          (expressionChange)=\"updateFinalExpression($event)\"\n          (simpleChange)=\"updateSimpleExpression($event)\"\n          [lhcStyle]=\"lhcStyle\"></lhc-syntax-converter>\n        <input type=\"text\" aria-label=\"FHIRPath\" *ngSwitchCase=\"'fhirpath'\" id=\"final-expression\" class=\"form-control\" [(ngModel)]=\"finalExpression\" [ngStyle]=\"lhcStyle.input\">\n      </div>\n      <lhc-case-statements\n        *ngIf=\"caseStatements\"\n        [syntax]=\"expressionSyntax\"\n        [simpleExpression]=\"simpleExpression\"\n        [expression]=\"finalExpression\"\n        [lhcStyle]=\"lhcStyle\"\n        (expressionChange)=\"updateFinalExpression($event)\"\n        (simpleChange)=\"updateSimpleExpression($event)\">\n      </lhc-case-statements>\n    </div>\n  </section>\n\n  <button class=\"primary\" (click)=\"export()\" [ngStyle]=\"lhcStyle.buttonPrimary\" id=\"export\">{{submitButtonName}}</button>\n</div>\n","import { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output } from '@angular/core';\n\nimport { RuleEditorService, SimpleStyle } from './rule-editor.service';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'lhc-rule-editor',\n  templateUrl: 'rule-editor.component.html',\n  styleUrls: ['rule-editor.component.css']\n})\nexport class RuleEditorComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() advancedInterface = false;\n  @Input() doNotAskToCalculateScore = false;\n  @Input() fhirQuestionnaire = null;\n  @Input() itemLinkId = null;\n  @Input() submitButtonName = 'Submit';\n  @Input() titleName = 'Rule Editor';\n  @Input() expressionLabel = 'Final Expression';\n  @Input() expressionUri = '';\n  @Input() lhcStyle: SimpleStyle = {};\n  @Output() save = new EventEmitter<object>();\n\n  errorLoading = 'Could not detect a FHIR Questionnaire; please try a different file.';\n  expressionSyntax: string;\n  simpleExpression: string;\n  finalExpression: string;\n  finalExpressionExtension;\n  linkIdContext: string;\n  calculateSum: boolean;\n  variables: string[];\n  caseStatements: boolean;\n  disableInterfaceToggle = false;\n  loadError = false;\n\n  private calculateSumSubscription;\n  private finalExpressionSubscription;\n  private variablesSubscription;\n  private disableAdvancedSubscription;\n\n  constructor(private variableService: RuleEditorService, private liveAnnouncer: LiveAnnouncer) {}\n\n  ngOnInit(): void {\n    this.calculateSumSubscription = this.variableService.mightBeScoreChange.subscribe((mightBeScore) => {\n      this.calculateSum = mightBeScore;\n    });\n    this.finalExpressionSubscription = this.variableService.finalExpressionChange.subscribe((finalExpression) => {\n      this.finalExpression = finalExpression;\n    });\n    this.variablesSubscription = this.variableService.variablesChange.subscribe((variables) => {\n      this.variables = variables.map(e => e.label);\n    });\n    this.disableAdvancedSubscription = this.variableService.disableAdvancedChange.subscribe((disable) => {\n      this.disableInterfaceToggle = disable;\n    });\n  }\n\n  /**\n   * Angular lifecycle hook called before the component is destroyed\n   */\n  ngOnDestroy(): void {\n    this.calculateSumSubscription.unsubscribe();\n    this.finalExpressionSubscription.unsubscribe();\n    this.variablesSubscription.unsubscribe();\n    this.disableAdvancedSubscription.unsubscribe();\n  }\n\n  /**\n   * Angular lifecycle hook called on input changes\n   */\n  ngOnChanges(): void {\n    this.reload();\n  }\n\n  /**\n   * Re-import fhir and context and show the form\n   */\n  reload(): void {\n    if (this.fhirQuestionnaire instanceof Object) {\n      this.variableService.doNotAskToCalculateScore = this.doNotAskToCalculateScore;\n      this.loadError = !this.variableService.import(this.expressionUri, this.fhirQuestionnaire, this.itemLinkId);\n      if (this.loadError) {\n        this.liveAnnouncer.announce(this.errorLoading);\n      }\n      this.disableInterfaceToggle = this.variableService.needsAdvancedInterface;\n      this.advancedInterface = this.variableService.needsAdvancedInterface;\n    }\n\n    this.caseStatements = this.variableService.caseStatements;\n    this.simpleExpression = this.variableService.simpleExpression;\n    this.linkIdContext = this.variableService.linkIdContext;\n    this.expressionSyntax = this.variableService.syntaxType;\n    this.calculateSum = this.variableService.mightBeScore;\n    this.finalExpressionExtension = this.variableService.finalExpressionExtension;\n    this.finalExpression = this.variableService.finalExpression;\n    this.variables = this.variableService.uneditableVariables.map(e => e.name).concat(\n      this.variableService.variables.map(e => e.label));\n  }\n\n  /**\n   * Export FHIR Questionnaire and download as a file\n   */\n  export(): void {\n    const finalExpression = this.finalExpressionExtension;\n    finalExpression.valueExpression.expression = this.finalExpression;\n    this.save.emit(this.variableService.export(this.expressionUri, finalExpression));\n  }\n\n  /**\n   * Create a new instance of a FHIR questionnaire file by summing all ordinal\n   * values\n   */\n  addSumOfScores(): void {\n    this.save.emit(this.variableService.addSumOfScores());\n  }\n\n  /**\n   * Update the final expression\n   */\n  updateFinalExpression(expression): void {\n    this.finalExpression = expression;\n  }\n\n  /**\n   * Update the simple final expression\n   */\n  updateSimpleExpression(simple): void {\n    this.simpleExpression = simple;\n  }\n\n  /**\n   * Toggle the advanced interface based on the type\n   */\n  onTypeChange(event): void {\n    if (event.target.value === 'fhirpath') {\n      this.variableService.checkAdvancedInterface(true);\n    } else {\n      // Need to check all other variables and the final expression before we\n      // allow the advanced interface to be removed\n      this.variableService.checkAdvancedInterface();\n    }\n\n    if (this.variableService.needsAdvancedInterface) {\n      this.advancedInterface = true;\n      this.disableInterfaceToggle = true;\n    } else {\n      this.disableInterfaceToggle = false;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\nimport { RuleEditorComponent } from './rule-editor.component';\nimport { VariablesComponent } from './variables/variables.component';\nimport { UneditableVariablesComponent } from './uneditable-variables/uneditable-variables.component';\nimport { QuestionComponent } from './question/question.component';\nimport { CalculateSumPromptComponent } from './calculate-sum-prompt/calculate-sum-prompt.component';\nimport { EasyPathExpressionsPipe } from './easy-path-expressions.pipe';\nimport { SyntaxConverterComponent } from './syntax-converter/syntax-converter.component';\nimport { SyntaxPreviewComponent } from './syntax-preview/syntax-preview.component';\nimport { QueryObservationComponent } from './query-observation/query-observation.component';\nimport { CaseStatementsComponent } from './case-statements/case-statements.component';\n\n@NgModule({\n  declarations: [\n    RuleEditorComponent,\n    VariablesComponent,\n    UneditableVariablesComponent,\n    QuestionComponent,\n    CalculateSumPromptComponent,\n    EasyPathExpressionsPipe,\n    SyntaxConverterComponent,\n    SyntaxPreviewComponent,\n    QueryObservationComponent,\n    CaseStatementsComponent\n  ],\n  imports: [\n    FormsModule,\n    BrowserAnimationsModule,\n    DragDropModule,\n    MatRadioModule,\n    ClipboardModule,\n    MatTooltipModule,\n    MatSnackBarModule\n  ],\n  exports: [\n    RuleEditorComponent\n  ]\n})\nexport class RuleEditorModule {\n}\n","/*\n * Public API Surface of ng-rule-editor\n */\n\nexport * from './lib/rule-editor.service';\nexport * from './lib/rule-editor.component';\nexport * from './lib/rule-editor.module';\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}