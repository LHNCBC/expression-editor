{"version":3,"file":"case-statements.component.d.ts","sources":["case-statements.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnChanges, OnInit } from '@angular/core';\nimport { RuleEditorService, SimpleStyle } from '../rule-editor.service';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport { CaseStatement, Variable } from '../variable';\nimport { EasyPathExpressionsPipe } from '../math-to-fhirpath.pipe';\nexport declare class CaseStatementsComponent implements OnInit, OnChanges {\n    private ruleEditorService;\n    lhcStyle: SimpleStyle;\n    syntax: string;\n    simpleExpression: string;\n    expression: string;\n    expressionChange: EventEmitter<string>;\n    simpleChange: EventEmitter<string>;\n    STRING_REGEX: RegExp;\n    pipe: EasyPathExpressionsPipe;\n    outputExpressions: boolean;\n    defaultCase: string;\n    simpleDefaultCase: string;\n    cases: Array<CaseStatement>;\n    output: string;\n    constructor(ruleEditorService: RuleEditorService);\n    /**\n     * Angular lifecycle hook for initialization\n     */\n    ngOnInit(): void;\n    /**\n     * Parses the Easy Path expression and populates the case editor. Toggles \"use\n     * expressions\" off if output is only strings.\n     */\n    parseSimpleCases(): void;\n    /**\n     * Checks if the expression is a string\n     */\n    isString(expression: string): boolean;\n    /**\n     * Removes surrounding quotes\n     */\n    removeQuotes(expression: string): string;\n    /**\n     * Angular lifecycle hook for changes\n     */\n    ngOnChanges(changes: any): void;\n    /**\n     * Called when adding a new case\n     */\n    onAdd(): void;\n    /**\n     * Remove the case at an index\n     * @param i - index to remove\n     */\n    onRemove(i: any): void;\n    /**\n     * Angular lifecycle hook for changes\n     */\n    onChange(): void;\n    /**\n     * Parse iif expression at specified level. Top level is 0\n     * @param expression - expression to parse\n     * @param level - depth or level of expression nesting\n     */\n    parseIif(expression: string, level: number): boolean;\n    /**\n     * Get an iif expression given a nesting level\n     * @param level - nesting level\n     */\n    getIif(level: number): string;\n    /**\n     * Transform the expression parameter if the syntax type is Easy Path,\n     * otherwise return the expression. Additionally if this is an output column\n     * and output expressions are off surround with quotes.\n     * @param expression - Easy Path or FHIRPath expression\n     * @param isOutput - True if processing an output or default value\n     * @return FHIRPath Expression\n     */\n    transformIfSimple(expression: string, isOutput: boolean): string;\n    /**\n     * Drag and drop rearrange of variable order\n     * @param event - drag and drop event\n     */\n    drop(event: CdkDragDrop<Variable[]>): void;\n}\n"]}