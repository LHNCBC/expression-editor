{"version":3,"file":"rule-editor.component.d.ts","sources":["rule-editor.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { DatePipe } from '@angular/common';\nimport { EventEmitter, OnChanges, OnInit } from '@angular/core';\nimport { MatRadioChange } from '@angular/material/radio';\nimport { RuleEditorService, SimpleStyle } from './rule-editor.service';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nexport declare class RuleEditorComponent implements OnInit, OnChanges {\n    private variableService;\n    private liveAnnouncer;\n    advancedInterface: boolean;\n    fhirQuestionnaire: any;\n    itemLinkId: any;\n    submitButtonName: string;\n    titleName: string;\n    expressionLabel: string;\n    expressionUri: string;\n    lhcStyle: SimpleStyle;\n    save: EventEmitter<object>;\n    errorLoading: string;\n    expressionSyntax: string;\n    simpleExpression: string;\n    finalExpression: string;\n    finalExpressionFhirPath: string;\n    linkIdContext: string;\n    datePipe: DatePipe;\n    calculateSum: boolean;\n    suggestions: any[];\n    variables: string[];\n    caseStatements: boolean;\n    disableInterfaceToggle: boolean;\n    loadError: boolean;\n    private calculateSumSubscription;\n    private finalExpressionSubscription;\n    private variablesSubscription;\n    private disableAdvancedSubscription;\n    constructor(variableService: RuleEditorService, liveAnnouncer: LiveAnnouncer);\n    ngOnInit(): void;\n    /**\n     * Angular lifecycle hook called before the component is destroyed\n     */\n    ngDestroy(): void;\n    /**\n     * Angular lifecycle hook called on input changes\n     */\n    ngOnChanges(args: any): void;\n    /**\n     * Re-import fhir and context and show the form\n     */\n    reload(): void;\n    /**\n     * Export FHIR Questionnaire and download as a file\n     */\n    export(): void;\n    /**\n     * Create a new instance of a FHIR questionnaire file by summing all ordinal\n     * values\n     */\n    addSumOfScores(): void;\n    /**\n     * Called when the syntax type is changed to clean up expressions if the data cannot be converted\n     * @param $event - event from from the caller\n     */\n    onSyntaxChange($event: MatRadioChange): void;\n    /**\n     * Update the final expression\n     */\n    updateFinalExpression(expression: any): void;\n    /**\n     * Update the simple final expression\n     */\n    updateSimpleExpression(simple: any): void;\n    /**\n     * Toggle the advanced interface based on the type\n     */\n    onTypeChange(event: any): void;\n}\n"]}