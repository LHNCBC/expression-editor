{"version":3,"file":"variables.component.d.ts","sources":["variables.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnChanges, OnInit } from '@angular/core';\nimport { Variable } from '../variable';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport { RuleEditorService, SimpleStyle } from '../rule-editor.service';\nexport declare class VariablesComponent implements OnInit, OnChanges {\n    private ruleEditorService;\n    lhcStyle: SimpleStyle;\n    advancedInterface: boolean;\n    variableType: any;\n    variableSubscription: any;\n    variables: Variable[];\n    levels: {\n        level: number;\n        name: string;\n    }[];\n    constructor(ruleEditorService: RuleEditorService);\n    /**\n     * Angular lifecycle hook called when the component is initialized\n     */\n    ngOnInit(): void;\n    /**\n     * Angular lifecycle hook called when bound property changes\n     */\n    ngOnChanges(changes: any): void;\n    /**\n     * Angular lifecycle hook called before the component is destroyed\n     */\n    ngDestroy(): void;\n    /**\n     * Called when adding a new variable\n     */\n    onAdd(): void;\n    /**\n     * Remove a variable at an index\n     * @param i - index to remove\n     */\n    onRemove(i: number): void;\n    /**\n     * Drag and drop rearrange of variable order\n     * @param event - drag and drop event\n     */\n    drop(event: CdkDragDrop<Variable[]>): void;\n    /**\n     * Update the preview when the variable name changes\n     */\n    onNameChange(): void;\n    /**\n     * Toggle the advanced interface based on the type\n     */\n    onTypeChange(event: any): void;\n    /**\n     * Get the labels of available variables at the current index\n     * @param index - Index of variable we're editing\n     */\n    getAvailableVariables(index: number): Array<string>;\n    /**\n     * Update the expression for variable at the given index.\n     * @param i - index\n     * @param expression - new expression to use\n     */\n    updateExpression(i: number, expression: any): void;\n    /**\n     * Update the Easy Path for variable at the given index.\n     * @param i - index\n     * @param easyPath - new expression to use\n     */\n    updateSimpleExpression(i: number, easyPath: any): void;\n}\n"]}