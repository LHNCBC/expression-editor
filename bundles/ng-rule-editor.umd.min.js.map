{"version":3,"sources":["../../../node_modules/rxjs/src/internal/config.ts","../../../node_modules/rxjs/src/internal/Observer.ts","../../../node_modules/rxjs/src/internal/util/isObject.ts","../../../node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","../../../node_modules/rxjs/src/internal/Subscription.ts","../../../node_modules/rxjs/src/internal/symbol/rxSubscriber.ts","../../../node_modules/rxjs/src/internal/Subscriber.ts","../../../node_modules/rxjs/src/internal/util/canReportError.ts","../../../node_modules/rxjs/src/internal/util/pipe.ts","../../../node_modules/rxjs/src/internal/Observable.ts","../../../node_modules/rxjs/src/internal/util/toSubscriber.ts","../../../node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts","../../../node_modules/rxjs/src/internal/SubjectSubscription.ts","../../../node_modules/rxjs/src/internal/Subject.ts","../../../node_modules/rxjs/src/internal/Notification.ts","../../../node_modules/rxjs/src/internal/util/subscribeToArray.ts","../../../node_modules/rxjs/src/internal/scheduled/scheduleArray.ts","../../../node_modules/rxjs/src/internal/operators/map.ts","../../../node_modules/rxjs/src/internal/symbol/iterator.ts","../../../node_modules/rxjs/src/internal/util/subscribeTo.ts","../../../node_modules/rxjs/src/internal/util/subscribeToObservable.ts","../../../node_modules/rxjs/src/internal/util/subscribeToPromise.ts","../../../node_modules/rxjs/src/internal/util/subscribeToIterable.ts","../../../node_modules/rxjs/src/internal/scheduled/scheduled.ts","../../../node_modules/rxjs/src/internal/util/isInteropObservable.ts","../../../node_modules/rxjs/src/internal/scheduled/scheduleObservable.ts","../../../node_modules/rxjs/src/internal/scheduled/schedulePromise.ts","../../../node_modules/rxjs/src/internal/util/isIterable.ts","../../../node_modules/rxjs/src/internal/scheduled/scheduleIterable.ts","../../../node_modules/rxjs/src/internal/observable/from.ts","../../../node_modules/rxjs/src/internal/observable/forkJoin.ts","../../../node_modules/fast-copy/src/utils.ts","../../../node_modules/fast-copy/src/index.ts","../../../projects/ng-rule-editor/src/lib/units.ts","../../../projects/ng-rule-editor/src/lib/rule-editor.service.ts","../../../projects/ng-rule-editor/src/lib/rule-editor.component.ts","../../../../../packages/forms/src/directives/control_value_accessor.ts","../../../../../packages/forms/src/directives/checkbox_value_accessor.ts","../../../../../packages/forms/src/directives/default_value_accessor.ts","../../../../../packages/forms/src/validators.ts","../../../../../packages/forms/src/directives/abstract_control_directive.ts","../../../../../packages/forms/src/directives/control_container.ts","../../../../../packages/forms/src/directives/ng_control.ts","../../../../../packages/forms/src/directives/ng_control_status.ts","../../../../../packages/forms/src/directives/number_value_accessor.ts","../../../../../packages/forms/src/directives/radio_control_value_accessor.ts","../../../../../packages/forms/src/directives/range_value_accessor.ts","../../../../../packages/forms/src/directives/error_examples.ts","../../../../../packages/forms/src/directives/reactive_errors.ts","../../../../../packages/forms/src/directives/select_control_value_accessor.ts","../../../../../packages/forms/src/directives/select_multiple_control_value_accessor.ts","../../../../../packages/forms/src/directives/shared.ts","../../../../../packages/forms/src/model.ts","../../../../../packages/forms/src/directives/ng_form.ts","../../../../../packages/forms/src/directives/abstract_form_group_directive.ts","../../../../../packages/forms/src/directives/template_driven_errors.ts","../../../../../packages/forms/src/directives/ng_model_group.ts","../../../../../packages/forms/src/directives/ng_model.ts","../../../../../packages/forms/src/directives/ng_no_validate_directive.ts","../../../../../packages/forms/src/directives/reactive_directives/form_control_directive.ts","../../../../../packages/forms/src/directives/reactive_directives/form_group_directive.ts","../../../../../packages/forms/src/directives/reactive_directives/form_group_name.ts","../../../../../packages/forms/src/directives/reactive_directives/form_control_name.ts","../../../../../packages/forms/src/directives/validators.ts","../../../../../packages/forms/src/directives.ts","../../../../../packages/forms/src/form_builder.ts","../../../../../packages/forms/src/version.ts","../../../projects/ng-rule-editor/src/lib/variable.ts","../../../../../packages/forms/src/form_providers.ts","../../../projects/ng-rule-editor/src/lib/variables/variables.component.ts","../../../projects/ng-rule-editor/src/lib/uneditable-variables/uneditable-variables.component.ts","../../../projects/ng-rule-editor/src/lib/question/question.component.ts","../../../../../packages/platform-browser/src/browser/browser_adapter.ts","../../../../../packages/platform-browser/src/browser/generic_browser_adapter.ts","../../../../../packages/platform-browser/src/browser/server-transition.ts","../../../../../packages/platform-browser/src/browser/testability.ts","../../../../../packages/platform-browser/src/dom/util.ts","../../../../../packages/platform-browser/src/dom/debug/ng_probe.ts","../../../../../packages/platform-browser/src/dom/events/event_manager.ts","../../../../../packages/platform-browser/src/dom/shared_styles_host.ts","../../../../../packages/platform-browser/src/dom/dom_renderer.ts","../../../../../packages/platform-browser/src/dom/events/dom_events.ts","../../../../../packages/platform-browser/src/dom/events/hammer_gestures.ts","../../../../../packages/platform-browser/src/dom/events/key_events.ts","../../../../../packages/platform-browser/src/security/dom_sanitization_service.ts","../../../../../packages/platform-browser/src/browser.ts","../../../../../packages/platform-browser/src/browser/meta.ts","../../../../../packages/platform-browser/src/browser/title.ts","../../../../../packages/platform-browser/src/browser/tools/browser.ts","../../../../../packages/platform-browser/src/browser/tools/common_tools.ts","../../../../../packages/platform-browser/src/browser/transfer_state.ts","../../../../../packages/platform-browser/src/dom/debug/by.ts","../../../../../packages/platform-browser/src/version.ts","../../../../../packages/platform-browser/animations/src/animation_builder.ts","../../../../../packages/platform-browser/animations/src/animation_renderer.ts","../../../../../packages/platform-browser/animations/src/providers.ts","../../../../../packages/platform-browser/animations/src/module.ts","../../../projects/ng-rule-editor/src/lib/calculate-sum-prompt/calculate-sum-prompt.component.ts","../../../node_modules/math-to-fhirpath/index.js","../../../projects/ng-rule-editor/src/lib/math-to-fhirpath.pipe.ts","../../../projects/ng-rule-editor/src/lib/syntax-converter/syntax-converter.component.ts","../../../projects/ng-rule-editor/src/lib/syntax-preview/syntax-preview.component.ts","../../../projects/ng-rule-editor/src/lib/rule-editor.module.ts"],"names":["_enable_super_gross_mode_that_will_cause_bad_things","config","Promise","undefined","value","Error","closed","next","useDeprecatedSynchronousErrorHandling","x","UnsubscriptionErrorImpl","errors","call","this","message","length","map","err","i","toString","join","name","prototype","Object","create","Subscription","_parentOrParents","_subscriptions","unsubscribe","_ctorUnsubscribe","_a","_unsubscribe","index","isFunction","isArray","len","sub","isObject","e","UnsubscriptionError","add","teardown","subscription","tmp","indexOf","subscriptions","subscriptionIndex","empty","rxSubscriber","Subscriber","_super","_this","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","empty$1","destinationOrNext","SafeSubscriber","error","complete","tslib_1","subscriber","_next","_error","_complete","_parentSubscriber","context","observerOrNext","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","parent","fn","hostReportError","observer","closed_1","fns","input","Observable","_isScalar","subscribe","lift","operator","observable","source","sink","nextOrObserver","toSubscriber","_subscribe","canReportError","forEach","promiseCtor","getPromiseCtor","reject","operations","toPromise","ObjectUnsubscribedErrorImpl","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","Subject","hasError","AnonymousSubject","copy","slice","thrownError","_trySubscribe","push","asObservable","NotificationKind","array","scheduler","schedule","project","thisArg","MapOperator","MapSubscriber","count","result","Symbol","iterator","getSymbolIterator","obj","obs","promise","iterable","item","iterator$1","done","return","isInteropObservable","Symbol_iterator","sources","keys","values","Array","completed","_loop_1","from","hasValue","emitted","reduce","key","toStringFunction","Function","defineProperty","getOwnPropertyDescriptor","getOwnPropertyNames","getOwnPropertySymbols","getPrototypeOf","hasOwnProperty","propertyIsEnumerable","SUPPORTS","WeakMap","getCleanClone","object","realm","constructor","Constructor","__proto__","getObjectCloneLoose","handleCopy","cache","clone","set","symbols","length_1","symbol","getObjectCloneStrict","properties","concat","property","descriptor","get","GLOBAL_THIS","self","window","global","console","options","isStrict","getObjectClone","has","regExp","flags","Date","getTime","RegExp","ignoreCase","multiline","unicode","sticky","lastIndex","Map","Set","Blob","size","type","Buffer","isBuffer","allocUnsafe","ArrayBuffer","isView","buffer","then","WeakSet","_keys","_values","createCache","default","strict","UNIT_CONVERSION","kg","unit","factor","lbs","[in_i]","RuleEditorService","syntaxType","uneditableVariablesChange","variablesChange","questionsChange","mightBeScoreChange","finalExpressionChange","LANGUAGE_FHIRPATH","QUESTION_REGEX","VARIABLE_EXTENSION","SCORE_VARIABLE_EXTENSION","SCORE_EXPRESSION_EXTENSION","SIMPLE_SYNTAX_EXTENSION","CALCULATED_EXPRESSION","linkIdToQuestion","mightBeScore","variables","uneditableVariables","addVariable","existingNames","label","getNewLabelName","expression","remove","splice","getUneditableVariables","fhir","extension","accumulator","url","uneditableVariable","find","valueId","filter","valueCode","description","_b","valueString","extractVariables","variables_1","nonVariableExtensions_1","assign","_index","valueExpression","language","processVariable","itemHasScore","answerOption","some","getScoreQuestionCount","linkIdContext","scoreQuestions","import","expressionUri","resourceType","processItem","questions","text","linkId","substring","getQuestionUnits","extractExpression","finalExpression","simpleSyntax","extractSimpleSyntax","simpleExpression","items","customExtension","items_1","__values","items_1_1","extensionIndex","findIndex","matches","match","factor_1","variable","sourceUnits","conversion","question","valueCoding","system","code","alphabet","split","firstLetterAlphabet","firstLetterAlphabet_1","firstLetterAlphabet_1_1","firstLetter","secondLetter","potentialName","alphabet_1","e_3","alphabet_1_1","toggleMightBeScore","export","variablesToAdd","variablesPresentInitially","variablesAdded","sort","a","b","__rest","finalExpressionExtension","insertExtensions","addTotalScoreRule","addSumOfScores","variableNames","scoreQuestionLinkIds","anyQuestionAnswered","sumString","totalCalculation","removeSumOfScores","questionnaire","questionnaireWithoutScores","removeItemScoreVariables","isScoreExtension","subItem","extensions","items_2","items_2_1","valueOrScoreExpression","convertible","toUnit","Injectable","args","providedIn","RuleEditorComponent","variableService","fhirQuestionnaire","itemLinkId","submitButtonName","titleName","expressionLabel","lhcStyle","save","EventEmitter","datePipe","DatePipe","suggestions","ngDestroy","calculateSumSubscription","finalExpressionSubscription","variablesSubscription","ngOnChanges","reload","expressionSyntax","calculateSum","emit","onSyntaxChange","$event","newSyntax","updateFinalExpression","Component","selector","template","Input","Output","NG_VALUE_ACCESSOR","InjectionToken","CHECKBOX_VALUE_ACCESSOR","provide","useExisting","forwardRef","CheckboxControlValueAccessor","multi","_renderer","_elementRef","onChange","_","onTouched","writeValue","setProperty","nativeElement","registerOnChange","registerOnTouched","setDisabledState","isDisabled","Directive","host","(change)","(blur)","providers","Renderer2","ElementRef","DEFAULT_VALUE_ACCESSOR","DefaultValueAccessor","COMPOSITION_BUFFER_MODE","_compositionMode","userAgent","_composing","getDOM","getUserAgent","test","toLowerCase","normalizedValue","_handleInput","_compositionStart","_compositionEnd","isEmptyInputValue","hasValidLength","(input)","(compositionstart)","(compositionend)","Optional","Inject","NG_VALIDATORS","NG_ASYNC_VALIDATORS","EMAIL_REGEXP","Validators","min","control","parseFloat","isNaN","actual","max","required","requiredTrue","email","minLength","minlength","requiredLength","actualLength","maxLength","maxlength","pattern","regexStr","charAt","regex","requiredPattern","actualValue","nullValidator","compose","validators","presentValidators","isPresent","mergeErrors","executeValidators","composeAsync","_i","first_1","resultSelector_1","pop","isArray$1","forkJoin","toObservable","pipe","o","r","isPromise","isObservable","ngDevMode","arrayOfErrors","res","validator","normalizeValidators","validate","isValidatorFn","c","composeValidators","composeAsyncValidators","mergeValidators","controlValidators","dirValidator","__spread","getControlValidators","_rawValidators","getControlAsyncValidators","_rawAsyncValidators","AbstractControlDirective","_onDestroyCallbacks","valid","invalid","pending","disabled","enabled","pristine","dirty","touched","status","untouched","statusChanges","valueChanges","_setValidators","_composedValidatorFn","_setAsyncValidators","_composedAsyncValidatorFn","_registerOnDestroy","_invokeOnDestroyCallbacks","reset","errorCode","path","getError","__extends","ControlContainer","NgControl","apply","arguments","_parent","valueAccessor","AbstractControlStatus","cd","_cd","_c","ngControlStatusHost","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","NgControlStatus","decorators","Self","NgControlStatusGroup","NUMBER_VALUE_ACCESSOR","NumberValueAccessor","RADIO_VALUE_ACCESSOR","RadioControlValueAccessor","RadioControlRegistry","_accessors","accessor","select","_isSameGroup","fireUncheck","controlPair","_control","_registry","_injector","ngOnInit","_checkName","ngOnDestroy","_state","_fn","formControlName","throwNameError","Injector","RANGE_VALUE_ACCESSOR","RangeValueAccessor","FormErrorExamples","ReactiveErrors","controlParentException","Examples","ngModelGroupException","missingFormException","groupParentException","arrayParentException","disabledAttrWarning","warn","ngModelWarning","directiveName","SELECT_VALUE_ACCESSOR","SelectControlValueAccessor","_buildValueString","id","_optionMap","_idCounter","_compareWith","is","JSON","stringify","_getOptionId","_getOptionValue","_registerOption","_e","_f","_extractId","NgSelectOption","_element","_select","_setElementValue","delete","Host","SELECT_MULTIPLE_VALUE_ACCESSOR","SelectMultipleControlValueAccessor","optionSelectedStateSetter","ids_1","v","opt","_setSelected","selected","selectedOptions","val","_value","ɵNgSelectMultipleOption","controlPath","setUpControl","dir","_throwError","setUpValidators","newValue","_pendingValue","_pendingChange","_pendingDirty","updateOn","updateControl","setUpViewChangePipeline","emitModelEvent","viewToModelUpdate","_unregisterOnChange","setUpModelChangePipeline","_pendingTouched","markAsTouched","setUpBlurPipeline","onDisabledChange_1","registerOnDisabledChange","_unregisterOnDisabledChange","setUpDisabledChangeHandler","cleanUpControl","noop","_noControlError","cleanUpValidators","_registerOnCollectionChange","registerOnValidatorChange","handleOnValidatorChange","setValidators","asyncValidators","asyncValidator","setAsyncValidators","onValidatorChange","updateValueAndValidity","markAsDirty","setValue","emitModelToViewChange","setUpFormContainer","messageEnd","isPropertyUpdated","changes","viewModel","change","isFirstChange","currentValue","BUILTIN_ACCESSORS","syncPendingControls","form","directives","_syncPendingControls","selectValueAccessor","valueAccessors","defaultAccessor","builtinAccessor","customAccessor","removeListItem","list","el","_ngModelWarning","instance","warningConfig","_ngModelWarningSentOnce","_ngModelWarningSent","VALID","INVALID","PENDING","DISABLED","pickValidators","validatorOrOpts","isOptionsObj","coerceToValidator","pickAsyncValidators","coerceToAsyncValidator","AbstractControl","_hasOwnPendingAsyncValidator","_onCollectionChange","_onDisabledChange","validatorFn","asyncValidatorFn","_updateOn","newValidator","clearValidators","clearAsyncValidators","opts","onlySelf","markAllAsTouched","_forEachChild","markAsUntouched","_updateTouched","markAsPristine","_updatePristine","markAsPending","emitEvent","disable","skipPristineCheck","_parentMarkedDirty","_updateValue","_updateAncestors","changeFn","enable","setParent","_setInitialStatus","_cancelExistingSubscription","_runValidator","_calculateStatus","_runAsyncValidator","_updateTreeValidity","ctrl","_allControlsDisabled","_asyncValidationSubscription","setErrors","_updateControlsErrors","delimiter","controlToFind","FormGroup","controls","FormArray","at","_find","_initObservables","_anyControlsHaveStatus","_anyControls","_anyControlsDirty","_anyControlsTouched","_isBoxedValue","formState","_setUpdateStrategy","parentDirty","FormControl","_onChange","_applyFormState","emitViewToModelChange","patchValue","condition","cb","_setUpControls","registerControl","addControl","removeControl","setControl","contains","controlName","_checkAllValuesPresent","_throwIfControlMissing","getRawValue","_reduceChildren","acc","subtreeUpdated","updated","child","k","_reduceValue","initValue","_registerControl","insert","removeAt","clear","formDirectiveProvider","NgForm","resolvedPromise","resolve","submitted","_directives","ngSubmit","ngAfterViewInit","container","_findContainer","getControl","addFormGroup","group","removeFormGroup","getFormGroup","updateModel","onSubmit","onReset","resetForm","(submit)","(reset)","outputs","exportAs","AbstractFormGroupDirective","_checkParentType","formDirective","TemplateDrivenErrors","modelParentException","formGroupNameException","missingNameException","modelGroupParentException","modelGroupProvider","NgModelGroup","SkipSelf","formControlBinding","NgModel","_registered","update","_checkForErrors","_setUpControl","_updateDisabled","model","_isStandalone","_setUpStandalone","standalone","disabledValue","novalidate","NG_MODEL_WITH_FORM_CONTROL_WARNING","FormControlDirective","_ngModelWarningConfig","_isControlChanged","FormGroupDirective","_checkFormPresent","_updateValidators","_updateDomValue","_updateRegistrations","_oldForm","addFormArray","removeFormArray","getFormArray","newCtrl","formGroupNameProvider","FormGroupName","_hasInvalidParent","formArrayNameProvider","FormArrayName","controlNameBinding","FormControlName","_added","REQUIRED_VALIDATOR","RequiredValidator","CHECKBOX_REQUIRED_VALIDATOR","CheckboxRequiredValidator","_required","[attr.required]","EMAIL_VALIDATOR","EmailValidator","_enabled","MIN_LENGTH_VALIDATOR","MinLengthValidator","_validator","_createValidator","parseInt","[attr.minlength]","MAX_LENGTH_VALIDATOR","MaxLengthValidator","[attr.maxlength]","PATTERN_VALIDATOR","PatternValidator","[attr.pattern]","SHARED_FORM_DIRECTIVES","NgNoValidate","NgSelectMultipleOption","TEMPLATE_DRIVEN_DIRECTIVES","REACTIVE_DRIVEN_DIRECTIVES","NgModule","declarations","exports","FormBuilder","controlsConfig","_reduceControls","isAbstractControlOptions","_createControl","controlConfig","Version","VariableType","InternalFormsSharedModule","ReactiveFormsModule","withConfig","ngModule","useValue","warnOnNgModelWithFormControl","VariablesComponent","ruleEditorService","variableType","levels","level","variableSubscription","onAdd","onRemove","drop","event","moveItemInArray","previousIndex","currentIndex","getAvailableVariables","editableVariables","UneditableVariablesComponent","uneditableVariablesSubscription","QuestionComponent","isNonConvertibleUnit","getQuestion","q","getConversionOptions","isQuestion","conversionOptions","urlParsingNode","GenericBrowserDomAdapter","DomAdapter","supportsDOMEvents","BrowserDomAdapter","makeCurrent","setRootDomAdapter","getProperty","log","logGroup","logGroupEnd","groupEnd","onAndCancel","evt","listener","addEventListener","removeEventListener","dispatchEvent","node","parentNode","removeChild","getValue","createElement","tagName","doc","getDefaultDocument","createHtmlDocument","document","implementation","createHTMLDocument","isElementNode","nodeType","Node","ELEMENT_NODE","isShadowRoot","DocumentFragment","getGlobalEventTarget","target","body","getHistory","history","getLocation","location","getBaseHref","href","baseElement","querySelector","getAttribute","getBaseElementHref","setAttribute","pathname","relativePath","resetBaseElement","navigator","performanceNow","performance","now","supportsCookies","getCookie","parseCookieValue","cookie","TRANSITION_ID","SERVER_TRANSITION_PROVIDERS","APP_INITIALIZER","useFactory","transitionId","injector","ApplicationInitStatus","donePromise","dom","querySelectorAll","deps","DOCUMENT","BrowserGetTestability","init","setTestabilityGetter","addToWindow","registry","elem","findInAncestors","testability","findTestabilityInTree","getAllTestabilities","getAllRootElements","callback","testabilities","didWork","decrement","didWork_","whenStable","t","getTestability","parentElement","exportNgVar","COMPILED","CORE_TOKENS","ApplicationRef","NgZone","inspectNativeElementR2","element","ɵgetDebugNodeR2","ELEMENT_PROBE_PROVIDERS","coreTokens","prev","token","NgProbeToken","EVENT_MANAGER_PLUGINS","EventManager","plugins","_zone","_eventNameToPlugin","p","manager","_plugins","reverse","eventName","handler","_findPluginFor","addGlobalEventListener","getZone","plugin","plugin_1","supports","EventManagerPlugin","_doc","SharedStylesHost","_stylesSet","addStyles","styles","additions","style","onStylesAdded","getAllStyles","DomSharedStylesHost","_hostNodes","_styleNodes","head","_addStylesToHost","styleEl","textContent","appendChild","addHost","hostNode","removeHost","styleNode","NAMESPACE_URIS","svg","xhtml","xlink","xml","xmlns","COMPONENT_REGEX","NG_DEV_MODE","HOST_ATTR","CONTENT_ATTR","flattenStyles","compId","replace","decoratePreventDefault","eventHandler","preventDefault","returnValue","hasLoggedNativeEncapsulationWarning","DomRendererFactory2","eventManager","sharedStylesHost","appId","rendererByCompId","defaultRenderer","DefaultDomRenderer2","createRenderer","encapsulation","ViewEncapsulation","Emulated","renderer","EmulatedEncapsulationDomRenderer2","applyToHost","ShadowDom","ShadowDomRenderer","begin","end","APP_ID","data","destroy","namespace","createElementNS","createComment","createText","createTextNode","newChild","insertBefore","refChild","oldChild","selectRootElement","selectorOrNode","preserveContent","nextSibling","namespaceUri","setAttributeNS","removeAttribute","removeAttributeNS","addClass","classList","removeClass","setStyle","RendererStyleFlags2","DashCase","Important","removeStyle","removeProperty","checkNoSyntheticProp","nodeValue","listen","AT_CHARCODE","charCodeAt","nameKind","component","componentShortId","contentAttr","hostAttr","shimHostAttribute","hostEl","shadowRoot","attachShadow","mode","nodeOrShadowRoot","DomEventsPlugin","EVENT_NAMES","pan","panstart","panmove","panend","pancancel","panleft","panright","panup","pandown","pinch","pinchstart","pinchmove","pinchend","pinchcancel","pinchin","pinchout","press","pressup","rotate","rotatestart","rotatemove","rotateend","rotatecancel","swipe","swipeleft","swiperight","swipeup","swipedown","tap","HAMMER_GESTURE_CONFIG","HAMMER_LOADER","HammerGestureConfig","events","overrides","buildHammer","mc","Hammer","HammerGesturesPlugin","_config","loader","isCustomEvent","zone","cancelRegistration_1","deregister_1","catch","runOutsideAngular","eventObj","runGuarded","on","off","Console","HAMMER_PROVIDERS__PRE_R3__","useClass","HAMMER_PROVIDERS","MODIFIER_KEYS","_keyMap","\b","\t","","\u001b","Del","Esc","Left","Right","Up","Down","Menu","Scroll","Win","_chromeNumKeyPadMap","A","B","C","D","E","F","G","H","I","J","K","M","N","O","`","","MODIFIER_KEY_GETTERS","alt","altKey","ctrlKey","meta","metaKey","shift","shiftKey","KeyEventsPlugin","parseEventName","parsedEvent","outsideHandler","eventCallback","parts","domEventName","_normalizeKey","fullKey","modifierName","getEventFullKey","keyIdentifier","startsWith","String","fromCharCode","getEventKey","modifierGetter","keyName","domSanitizerImplFactory","DomSanitizerImpl","sanitize","ctx","SecurityContext","NONE","HTML","allowSanitizationBypassOrThrow","unwrapSafeValue","_sanitizeHtml","STYLE","SCRIPT","URL","getSanitizationBypassType","_sanitizeUrl","RESOURCE_URL","bypassSecurityTrustHtml","bypassSanitizationTrustHtml","bypassSecurityTrustStyle","bypassSanitizationTrustStyle","bypassSecurityTrustScript","bypassSanitizationTrustScript","bypassSecurityTrustUrl","bypassSanitizationTrustUrl","bypassSecurityTrustResourceUrl","bypassSanitizationTrustResourceUrl","DomSanitizer","PLATFORM_BROWSER_ID","INTERNAL_BROWSER_PLATFORM_PROVIDERS","PLATFORM_ID","ɵ0$4","PLATFORM_INITIALIZER","ɵsetDocument","BROWSER_SANITIZATION_PROVIDERS","Sanitizer","BROWSER_MODULE_PROVIDERS","createPlatformFactory","platformCore","INJECTOR_SCOPE","ErrorHandler","RendererFactory2","Testability","BrowserModule","parentModule","withServerTransition","params","createMeta","Meta","ɵɵinject","CommonModule","ApplicationModule","_dom","addTag","tag","forceCreation","_getOrCreateElement","addTags","tags","getTag","attrSelector","getTags","updateTag","_parseSelector","_setMetaElementAttributes","removeTag","removeTagElement","_containsAttributes","getElementsByTagName","prop","_getMetaKeyMap","attr","every","META_KEYS_MAP","httpEquiv","createTitle","Title","getTitle","title","setTitle","newTitle","win","msPerTick","numTicks","AngularProfiler","ref","appRef","timeChangeDetection","record","profileName","isProfilerAvailable","profile","start","tick","profileEnd","toFixed","ChangeDetectionPerfRecord","TransferState","store","onSerializeCallbacks","initState","transferState","defaultValue","hasKey","onSerialize","toJson","By","all","css","debugElement","n","msMatchesSelector","webkitMatchesSelector","elementMatches","directive","debugNode","providerTokens","BrowserAnimationBuilder","rootRenderer","_nextAnimationId","typeData","None","animation","build","entry","sequence","issueAnimationCommand","BrowserAnimationFactory","AnimationBuilder","_id","RendererAnimationPlayer","AnimationFactory","parentPlayer","_started","totalTime","_command","_listen","command","onDone","onStart","onDestroy","hasStarted","play","pause","restart","finish","setPosition","getPosition","engine","players","ANIMATION_PREFIX","DISABLE_ANIMATIONS_FLAG","AnimationRendererFactory","delegate","_currentId","_microtaskId","_animationCallbacksBuffer","_rendererCache","_cdRecurDepth","onRemovalComplete","hostElement","BaseAnimationRenderer","componentId","namespaceId","register","registerTrigger","trigger","AnimationRenderer","_scheduleCountTask","scheduleListenerCallback","run","tuple","__read","flush","whenRenderingDone","AnimationEngine","destroyNode","onInsert","isMove","isHostElement","disableAnimations","factory","process","substr","resolveElementFromTarget","phase","triggerName","dotIndex","parseTriggerCallbackName","countId","InjectableAnimationEngine","driver","normalizer","AnimationDriver","AnimationStyleNormalizer","ANIMATION_MODULE_TYPE","SHARED_ANIMATION_PROVIDERS","WebAnimationsStyleNormalizer","BROWSER_ANIMATIONS_PROVIDERS","supportsWebAnimations","WebAnimationsDriver","CssKeyframesDriver","NoopAnimationDriver","CalculateSumPromptComponent","onCloseClick","onExportClick","fhirconvert","str","vars","op","j","ops","includes","lsearch","op_l","rsearch","op_r","lcount","rcount","funs","varfind","convert","funs2","base","lfind","power","rfind","trim","f","funcappend","logappend","func","eq","open","close","cma","search","lstr","rstr","MathToFhirpathPipe","transform","fhirPath","mathToFhirpath.fhirconvert","Pipe","SyntaxConverterComponent","expressionChange","jsToFhirPathPipe","onExpressionChange","fhirPathExpression","SyntaxPreviewComponent","showWhenEmpty","imports","FormsModule","BrowserAnimationsModule","DragDropModule","MatRadioModule"],"mappings":"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","sourcesContent":["let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n","import { Observer } from './types';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete(): void { /*noop*/ }\n};\n","export function isObject(x: any): x is Object {\n  return x !== null && typeof x === 'object';\n}\n","export interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  new(errors: any[]): UnsubscriptionError;\n}\n\nconst UnsubscriptionErrorImpl = (() => {\n  function UnsubscriptionErrorImpl(this: any, errors: any[]) {\n    Error.call(this);\n    this.message = errors ?\n      `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n    this.name = 'UnsubscriptionError';\n    this.errors = errors;\n    return this;\n  }\n\n  UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\n\n  return UnsubscriptionErrorImpl;\n})();\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = UnsubscriptionErrorImpl as any;","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parentOrParents: Subscription | Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (this as any)._ctorUnsubscribe = true;\n      (this as any)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parentOrParents, _ctorUnsubscribe, _unsubscribe, _subscriptions } = (this as any);\n\n    this.closed = true;\n    this._parentOrParents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    if (_parentOrParents instanceof Subscription) {\n      _parentOrParents.remove(this);\n    } else if (_parentOrParents !== null) {\n      for (let index = 0; index < _parentOrParents.length; ++index) {\n        const parent = _parentOrParents[index];\n        parent.remove(this);\n      }\n    }\n\n    if (isFunction(_unsubscribe)) {\n      // It's only possible to null _unsubscribe - to release the reference to\n      // any teardown function passed in the constructor - if the property was\n      // actually assigned in the constructor, as there are some classes that\n      // are derived from Subscriber (which derives from Subscription) that\n      // implement an _unsubscribe method as a mechanism for obtaining\n      // unsubscription notifications and some of those subscribers are\n      // recycled. Also, in some of those subscribers, _unsubscribe switches\n      // from a prototype method to an instance property - see notifyNext in\n      // RetryWhenSubscriber.\n      if (_ctorUnsubscribe) {\n        (this as any)._unsubscribe = undefined;\n      }\n      try {\n        _unsubscribe.call(this);\n      } catch (e) {\n        errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n      let index = -1;\n      let len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          try {\n            sub.unsubscribe();\n          } catch (e) {\n            errors = errors || [];\n            if (e instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n            } else {\n              errors.push(e);\n            }\n          }\n        }\n      }\n    }\n\n    if (errors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription. Can also be used to add a child subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * When a parent subscription is unsubscribed, any child subscriptions that were added to it are also unsubscribed.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    let subscription = (<Subscription>teardown);\n\n    if (!teardown) {\n      return Subscription.EMPTY;\n    }\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void)>teardown);\n      case 'object':\n        if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          // This also covers the case where `subscription` is `Subscription.EMPTY`, which is always in `closed` state.\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (!(subscription instanceof Subscription)) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default: {\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n      }\n    }\n\n    // Add `this` as parent of `subscription` if that's not already the case.\n    let { _parentOrParents } = subscription;\n    if (_parentOrParents === null) {\n      // If we don't have a parent, then set `subscription._parents` to\n      // the `this`, which is the common case that we optimize for.\n      subscription._parentOrParents = this;\n    } else if (_parentOrParents instanceof Subscription) {\n      if (_parentOrParents === this) {\n        // The `subscription` already has `this` as a parent.\n        return subscription;\n      }\n      // If there's already one parent, but not multiple, allocate an\n      // Array to store the rest of the parent Subscriptions.\n      subscription._parentOrParents = [_parentOrParents, this];\n    } else if (_parentOrParents.indexOf(this) === -1) {\n      // Only add `this` to the _parentOrParents list if it's not already there.\n      _parentOrParents.push(this);\n    } else {\n      // The `subscription` already has `this` as a parent.\n      return subscription;\n    }\n\n    // Optimize for the common case when adding the first subscription.\n    const subscriptions = this._subscriptions;\n    if (subscriptions === null) {\n      this._subscriptions = [subscription];\n    } else {\n      subscriptions.push(subscription);\n    }\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","/** @deprecated do not use, this is no longer checked by RxJS internals */\nexport const rxSubscriber = (() =>\n  typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random())();\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver, TeardownLogic } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const {  _parentOrParents } = this;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n\n/**\n * Determines whether the ErrorObserver is closed or stopped or has a\n * destination that is closed or stopped - in which case errors will\n * need to be reported via a different mechanism.\n * @param observer the observer\n */\nexport function canReportError(observer: Subscriber<any> | Subject<any>): boolean {\n  while (observer) {\n    const { closed, destination, isStopped } = observer as any;\n    if (closed || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n  return true;\n}\n","import { noop } from './noop';\nimport { identity } from './identity';\nimport { UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>, ...fns: UnaryFunction<any, any>[]): UnaryFunction<T, {}>;\n/* tslint:enable:max-line-length */\n\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (fns.length === 0) {\n    return identity as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, PartialObserver, Subscribable } from './types';\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  /** Internal implementation detail, do not use directly. */\n  public _isScalar: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  source: Observable<any>;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   * @nocollapse\n   * @deprecated use new Observable() instead\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  /** @deprecated Use an observer instead of a complete callback */\n  subscribe(next: null | undefined, error: null | undefined, complete: () => void): Subscription;\n  /** @deprecated Use an observer instead of an error callback */\n  subscribe(next: null | undefined, error: (error: any) => void, complete?: () => void): Subscription;\n  /** @deprecated Use an observer instead of a complete callback */\n  subscribe(next: (value: T) => void, error: null | undefined, complete: () => void): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```ts\n   * import { of } from 'rxjs';\n   *\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() {\n   *     // We actually could just remove this method,\n   *     // since we do not really care about errors right now.\n   *   },\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   *   .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```ts\n   * import { of } from 'rxjs'\n   *\n   * let sum = 0;\n   *\n   * of(1, 2, 3).subscribe(\n   *   value => {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   () => console.log('Sum equals: ' + sum)\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```ts\n   * import { interval } from 'rxjs';\n   *\n   * const subscription = interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => {\n   *     // Will not be called, even when cancelling subscription.\n   *     console.log('completed!');\n   *   }\n   * );\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      sink.add(operator.call(sink, this.source));\n    } else {\n      sink.add(\n        this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n        this._subscribe(sink) :\n        this._trySubscribe(sink)\n      );\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n      if (canReportError(sink)) {\n        sink.error(err);\n      } else {\n        console.warn(err);\n      }\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a ReferenceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    }) as Promise<void>;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const { source } = this;\n    return source && source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words. Deprecated in\n  // favor of iif and throwError functions.\n  /**\n   * @nocollapse\n   * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n   */\n  static if: typeof iif;\n  /**\n   * @nocollapse\n   * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n   */\n  static throw: typeof throwError;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>, ...operations: OperatorFunction<any, any>[]): Observable<{}>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```ts\n   * import { interval } from 'rxjs';\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nimport { PartialObserver } from '../types';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","export interface ObjectUnsubscribedError extends Error {\n}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  new(): ObjectUnsubscribedError;\n}\n\nconst ObjectUnsubscribedErrorImpl = (() => {\n  function ObjectUnsubscribedErrorImpl(this: any) {\n    Error.call(this);\n    this.message = 'object unsubscribed';\n    this.name = 'ObjectUnsubscribedError';\n    return this;\n  }\n\n  ObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);\n\n  return ObjectUnsubscribedErrorImpl;\n})();\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = ObjectUnsubscribedErrorImpl as any;","import { Subject } from './Subject';\nimport { Observer } from './types';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n *\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse\n   * @deprecated use new Subject() instead\n  */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { PartialObserver } from './types';\nimport { Observable } from './Observable';\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\nimport { deprecate } from 'util';\n\n// TODO: When this enum is removed, replace it with a type alias. See #4556.\n/**\n * @deprecated NotificationKind is deprecated as const enums are not compatible with isolated modules. Use a string literal instead.\n */\nexport enum NotificationKind {\n  NEXT = 'N',\n  ERROR = 'E',\n  COMPLETE = 'C',\n}\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: 'N' | 'E' | 'C', public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return of(this.value);\n      case 'E':\n        return throwError(this.error);\n      case 'C':\n        return empty();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   * @nocollapse\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Subscriber } from '../Subscriber';\n\n/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\nexport const subscribeToArray = <T>(array: ArrayLike<T>) => (subscriber: Subscriber<T>) => {\n  for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n    subscriber.next(array[i]);\n  }\n  subscriber.complete();\n};\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\n\nexport function scheduleArray<T>(input: ArrayLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    let i = 0;\n    sub.add(scheduler.schedule(function () {\n      if (i === input.length) {\n        subscriber.complete();\n        return;\n      }\n      subscriber.next(input[i++]);\n      if (!subscriber.closed) {\n        sub.add(this.schedule());\n      }\n    }));\n    return sub;\n  });\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: R;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n\n/**\n * @deprecated use {@link iterator} instead\n */\nexport const $$iterator = iterator;\n","import { ObservableInput } from '../types';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport const subscribeTo = <T>(result: ObservableInput<T>): (subscriber: Subscriber<T>) => Subscription | void => {\n  if (!!result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result as any);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result as Promise<any>);\n  } else if (!!result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result as any);\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};\n","import { Subscriber } from '../Subscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport const subscribeToObservable = <T>(obj: any) => (subscriber: Subscriber<T>) => {\n  const obs = obj[Symbol_observable]();\n  if (typeof obs.subscribe !== 'function') {\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  } else {\n    return obs.subscribe(subscriber);\n  }\n};\n","import { Subscriber } from '../Subscriber';\nimport { hostReportError } from './hostReportError';\n\nexport const subscribeToPromise = <T>(promise: PromiseLike<T>) => (subscriber: Subscriber<T>) => {\n  promise.then(\n    (value) => {\n      if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n      }\n    },\n    (err: any) => subscriber.error(err)\n  )\n  .then(null, hostReportError);\n  return subscriber;\n};\n","import { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport const subscribeToIterable = <T>(iterable: Iterable<T>) => (subscriber: Subscriber<T>) => {\n  const iterator = (iterable as any)[Symbol_iterator]();\n\n  do {\n    let item: IteratorResult<T>;\n    try {\n      item = iterator.next();\n    } catch (err) {\n      subscriber.error(err);\n      return subscriber;\n    }\n    if (item.done) {\n      subscriber.complete();\n      break;\n    }\n    subscriber.next(item.value);\n    if (subscriber.closed) {\n      break;\n    }\n  } while (true);\n\n  // Finalize the iterator if it happens to be a Generator\n  if (typeof iterator.return === 'function') {\n    subscriber.add(() => {\n      if (iterator.return) {\n        iterator.return();\n      }\n    });\n  }\n\n  return subscriber;\n};\n","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { ObservableInput, SchedulerLike, Observable } from 'rxjs';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\n\n/**\n * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\n * are scheduled on the provided scheduler.\n *\n * @see from\n * @see of\n *\n * @param input The observable, array, promise, iterable, etc you would like to schedule\n * @param scheduler The scheduler to use to schedule the subscription and emissions from\n * the returned observable.\n */\nexport function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    } else if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    } else if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }  else if (isIterable(input) || typeof input === 'string') {\n      return scheduleIterable(input, scheduler);\n    }\n  }\n\n  throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n","import { InteropObservable } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input: any): input is InteropObservable<any> {\n  return input && typeof input[Symbol_observable] === 'function';\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { InteropObservable, SchedulerLike, Subscribable } from '../types';\n\nexport function scheduleObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike) {\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    sub.add(scheduler.schedule(() => {\n      const observable: Subscribable<T> = input[Symbol_observable]();\n      sub.add(observable.subscribe({\n        next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },\n        error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },\n        complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },\n      }));\n    }));\n    return sub;\n  });\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\n\nexport function schedulePromise<T>(input: PromiseLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    sub.add(scheduler.schedule(() => input.then(\n      value => {\n        sub.add(scheduler.schedule(() => {\n          subscriber.next(value);\n          sub.add(scheduler.schedule(() => subscriber.complete()));\n        }));\n      },\n      err => {\n        sub.add(scheduler.schedule(() => subscriber.error(err)));\n      }\n    )));\n    return sub;\n  });\n}\n","import { iterator as Symbol_iterator } from '../symbol/iterator';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return input && typeof input[Symbol_iterator] === 'function';\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    let iterator: Iterator<T>;\n    sub.add(() => {\n      // Finalize generators\n      if (iterator && typeof iterator.return === 'function') {\n        iterator.return();\n      }\n    });\n    sub.add(scheduler.schedule(() => {\n      iterator = input[Symbol_iterator]();\n      sub.add(scheduler.schedule(function () {\n        if (subscriber.closed) {\n          return;\n        }\n        let value: T;\n        let done: boolean;\n        try {\n          const result = iterator.next();\n          value = result.value;\n          done = result.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      }));\n    }));\n    return sub;\n  });\n}\n","import { Observable } from '../Observable';\nimport { subscribeTo } from '../util/subscribeTo';\nimport { ObservableInput, SchedulerLike, ObservedValueOf } from '../types';\nimport { scheduled } from '../scheduled/scheduled';\n\nexport function from<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;\n/** @deprecated use {@link scheduled} instead. */\nexport function from<O extends ObservableInput<any>>(input: O, scheduler: SchedulerLike): Observable<ObservedValueOf<O>>;\n\n/**\n * Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\n *\n * <span class=\"informal\">Converts almost anything to an Observable.</span>\n *\n * ![](from.png)\n *\n * `from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\n * <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\n * object into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\n * as an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\n * converted through this operator.\n *\n * ## Examples\n *\n * ### Converts an array to an Observable\n *\n * ```ts\n * import { from } from 'rxjs';\n *\n * const array = [10, 20, 30];\n * const result = from(array);\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 10\n * // 20\n * // 30\n * ```\n *\n * ---\n *\n * ### Convert an infinite iterable (from a generator) to an Observable\n *\n * ```ts\n * import { from } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * function* generateDoubles(seed) {\n *    let i = seed;\n *    while (true) {\n *      yield i;\n *      i = 2 * i; // double it\n *    }\n * }\n *\n * const iterator = generateDoubles(3);\n * const result = from(iterator).pipe(take(10));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 3\n * // 6\n * // 12\n * // 24\n * // 48\n * // 96\n * // 192\n * // 384\n * // 768\n * // 1536\n * ```\n *\n * ---\n *\n * ### With async scheduler\n *\n * ```ts\n * import { from, asyncScheduler } from 'rxjs';\n *\n * console.log('start');\n *\n * const array = [10, 20, 30];\n * const result = from(array, asyncScheduler);\n *\n * result.subscribe(x => console.log(x));\n *\n * console.log('end');\n *\n * // Logs:\n * // start\n * // end\n * // 10\n * // 20\n * // 30\n * ```\n *\n * @see {@link fromEvent}\n * @see {@link fromEventPattern}\n *\n * @param {ObservableInput<T>} A subscription object, a Promise, an Observable-like,\n * an Array, an iterable, or an array-like object to be converted.\n * @param {SchedulerLike} An optional {@link SchedulerLike} on which to schedule the emission of values.\n * @return {Observable<T>}\n * @name from\n * @owner Observable\n */\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\n  if (!scheduler) {\n    if (input instanceof Observable) {\n      return input;\n    }\n    return new Observable<T>(subscribeTo(input));\n  } else {\n    return scheduled(input, scheduler);\n  }\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, ObservedValuesFromArray, ObservedValueOf, SubscribableOrPromise } from '../types';\nimport { isArray } from '../util/isArray';\nimport { map } from '../operators/map';\nimport { isObject } from '../util/isObject';\nimport { isObservable } from '../util/isObservable';\nimport { from } from './from';\n\n/* tslint:disable:max-line-length */\n\n// forkJoin(a$, b$, c$)\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T>(v1: SubscribableOrPromise<T>): Observable<[T]>;\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n// forkJoin([a$, b$, c$]);\n// TODO(benlesh): Uncomment for TS 3.0\n// export function forkJoin(sources: []): Observable<never>;\nexport function forkJoin<A>(sources: [ObservableInput<A>]): Observable<[A]>;\nexport function forkJoin<A, B>(sources: [ObservableInput<A>, ObservableInput<B>]): Observable<[A, B]>;\nexport function forkJoin<A, B, C>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>]): Observable<[A, B, C]>;\nexport function forkJoin<A, B, C, D>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>]): Observable<[A, B, C, D]>;\nexport function forkJoin<A, B, C, D, E>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>, ObservableInput<E>]): Observable<[A, B, C, D, E]>;\nexport function forkJoin<A, B, C, D, E, F>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>, ObservableInput<E>, ObservableInput<F>]): Observable<[A, B, C, D, E, F]>;\nexport function forkJoin<A extends ObservableInput<any>[]>(sources: A): Observable<ObservedValuesFromArray<A>[]>;\n\n// forkJoin({})\nexport function forkJoin(sourcesObject: {}): Observable<never>;\nexport function forkJoin<T, K extends keyof T>(sourcesObject: T): Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>;\n\n/** @deprecated resultSelector is deprecated, pipe to map instead */\nexport function forkJoin(...args: Array<ObservableInput<any>|Function>): Observable<any>;\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T>(...sources: ObservableInput<T>[]): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Accepts an `Array` of {@link ObservableInput} or a dictionary `Object` of {@link ObservableInput} and returns\n * an {@link Observable} that emits either an array of values in the exact same order as the passed array,\n * or a dictionary of values in the same shape as the passed dictionary.\n *\n * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n *\n * ![](forkJoin.png)\n *\n * `forkJoin` is an operator that takes any number of input observables which can be passed either as an array\n * or a dictionary of input observables. If no input observables are provided, resulting stream will complete\n * immediately.\n *\n * `forkJoin` will wait for all passed observables to complete and then it will emit an array or an object with last\n * values from corresponding observables.\n *\n * If you pass an array of `n` observables to the operator, resulting\n * array will have `n` values, where first value is the last thing emitted by the first observable,\n * second value is the last thing emitted by the second observable and so on.\n *\n * If you pass a dictionary of observables to the operator, resulting\n * objects will have the same keys as the dictionary passed, with their last values they've emitted\n * located at the corresponding key.\n *\n * That means `forkJoin` will not emit more than once and it will complete after that. If you need to emit combined\n * values not only at the end of lifecycle of passed observables, but also throughout it, try out {@link combineLatest}\n * or {@link zip} instead.\n *\n * In order for resulting array to have the same length as the number of input observables, whenever any of\n * that observables completes without emitting any value, `forkJoin` will complete at that moment as well\n * and it will not emit anything either, even if it already has some last values from other observables.\n * Conversely, if there is an observable that never completes, `forkJoin` will never complete as well,\n * unless at any point some other observable completes without emitting value, which brings us back to\n * the previous case. Overall, in order for `forkJoin` to emit a value, all observables passed as arguments\n * have to emit something at least once and complete.\n *\n * If any input observable errors at some point, `forkJoin` will error as well and all other observables\n * will be immediately unsubscribed.\n *\n * Optionally `forkJoin` accepts project function, that will be called with values which normally\n * would land in emitted array. Whatever is returned by project function, will appear in output\n * observable instead. This means that default project can be thought of as a function that takes\n * all its arguments and puts them into an array. Note that project function will be called only\n * when output observable is supposed to emit a result.\n *\n * ## Examples\n *\n * ### Use forkJoin with a dictionary of observable inputs\n * ```ts\n * import { forkJoin, of, timer } from 'rxjs';\n *\n * const observable = forkJoin({\n *   foo: of(1, 2, 3, 4),\n *   bar: Promise.resolve(8),\n *   baz: timer(4000),\n * });\n * observable.subscribe({\n *  next: value => console.log(value),\n *  complete: () => console.log('This is how it ends!'),\n * });\n *\n * // Logs:\n * // { foo: 4, bar: 8, baz: 0 } after 4 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * ### Use forkJoin with an array of observable inputs\n * ```ts\n * import { forkJoin, of } from 'rxjs';\n *\n * const observable = forkJoin([\n *   of(1, 2, 3, 4),\n *   Promise.resolve(8),\n *   timer(4000),\n * ]);\n * observable.subscribe({\n *  next: value => console.log(value),\n *  complete: () => console.log('This is how it ends!'),\n * });\n *\n * // Logs:\n * // [4, 8, 0] after 4 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n *\n * @param {...ObservableInput} sources Any number of Observables provided either as an array or as an arguments\n * passed directly to the operator.\n * @param {function} [project] Function that takes values emitted by input Observables and returns value\n * that will appear in resulting Observable instead of default array.\n * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n * or value from project function.\n */\nexport function forkJoin(\n  ...sources: any[]\n): Observable<any> {\n  if (sources.length === 1) {\n    const first = sources[0];\n    if (isArray(first)) {\n      return forkJoinInternal(first, null);\n    }\n    // TODO(benlesh): isObservable check will not be necessary when deprecated path is removed.\n    if (isObject(first) && Object.getPrototypeOf(first) === Object.prototype) {\n      const keys = Object.keys(first);\n      return forkJoinInternal(keys.map(key => first[key]), keys);\n    }\n  }\n\n  // DEPRECATED PATHS BELOW HERE\n  if (typeof sources[sources.length - 1] === 'function') {\n    const resultSelector = sources.pop() as Function;\n    sources = (sources.length === 1 && isArray(sources[0])) ? sources[0] : sources;\n    return forkJoinInternal(sources, null).pipe(\n      map((args: any[]) => resultSelector(...args))\n    );\n  }\n\n  return forkJoinInternal(sources, null);\n}\n\nfunction forkJoinInternal(sources: ObservableInput<any>[], keys: string[] | null): Observable<any> {\n  return new Observable(subscriber => {\n    const len = sources.length;\n    if (len === 0) {\n      subscriber.complete();\n      return;\n    }\n    const values = new Array(len);\n    let completed = 0;\n    let emitted = 0;\n    for (let i = 0; i < len; i++) {\n      const source = from(sources[i]);\n      let hasValue = false;\n      subscriber.add(source.subscribe({\n        next: value => {\n          if (!hasValue) {\n            hasValue = true;\n            emitted++;\n          }\n          values[i] = value;\n        },\n        error: err => subscriber.error(err),\n        complete: () => {\n          completed++;\n          if (completed === len || !hasValue) {\n            if (emitted === len) {\n              subscriber.next(keys ?\n                keys.reduce((result, key, i) => (result[key] = values[i], result), {}) :\n                values);\n            }\n            subscriber.complete();\n          }\n        }\n      }));\n    }\n  });\n}\n","const { toString: toStringFunction } = Function.prototype;\nconst {\n  create,\n  defineProperty,\n  getOwnPropertyDescriptor,\n  getOwnPropertyNames,\n  getOwnPropertySymbols,\n  getPrototypeOf,\n} = Object;\nconst { hasOwnProperty, propertyIsEnumerable } = Object.prototype;\n\n/**\n * @enum\n *\n * @const {Object} SUPPORTS\n *\n * @property {boolean} SYMBOL_PROPERTIES are symbol properties supported\n * @property {boolean} WEAKMAP is WeakMap supported\n */\nexport const SUPPORTS = {\n  SYMBOL_PROPERTIES: typeof getOwnPropertySymbols === 'function',\n  WEAKMAP: typeof WeakMap === 'function',\n};\n\n/**\n * @function createCache\n *\n * @description\n * get a new cache object to prevent circular references\n *\n * @returns the new cache object\n */\nexport const createCache = (): FastCopy.Cache => {\n  if (SUPPORTS.WEAKMAP) {\n    return new WeakMap();\n  }\n\n  // tiny implementation of WeakMap\n  const object = create({\n    has: (key: any) => !!~object._keys.indexOf(key),\n    set: (key: any, value: any) => {\n      object._keys.push(key);\n      object._values.push(value);\n    },\n    get: (key: any) => object._values[object._keys.indexOf(key)],\n  });\n\n  object._keys = [];\n  object._values = [];\n\n  return object;\n};\n\n/**\n * @function getCleanClone\n *\n * @description\n * get an empty version of the object with the same prototype it has\n *\n * @param object the object to build a clean clone from\n * @param realm the realm the object resides in\n * @returns the empty cloned object\n */\nexport const getCleanClone = (object: any, realm: FastCopy.Realm): any => {\n  if (!object.constructor) {\n    return create(null);\n  }\n\n  const { constructor: Constructor } = object;\n  const prototype = object.__proto__ || getPrototypeOf(object);\n\n  if (Constructor === realm.Object) {\n    return prototype === realm.Object.prototype ? {} : create(prototype);\n  }\n\n  if (~toStringFunction.call(Constructor).indexOf('[native code]')) {\n    try {\n      return new Constructor();\n    } catch {}\n  }\n\n  return create(prototype);\n};\n\n/**\n * @function getObjectCloneLoose\n *\n * @description\n * get a copy of the object based on loose rules, meaning all enumerable keys\n * and symbols are copied, but property descriptors are not considered\n *\n * @param object the object to clone\n * @param realm the realm the object resides in\n * @param handleCopy the function that handles copying the object\n * @returns the copied object\n */\nexport const getObjectCloneLoose: FastCopy.ObjectCloner = (\n  object: any,\n  realm: FastCopy.Realm,\n  handleCopy: FastCopy.Copier,\n  cache: FastCopy.Cache,\n): any => {\n  const clone: any = getCleanClone(object, realm);\n  // set in the cache immediately to be able to reuse the object recursively\n  cache.set(object, clone);\n\n  for (const key in object) {\n    if (hasOwnProperty.call(object, key)) {\n      clone[key] = handleCopy(object[key], cache);\n    }\n  }\n\n  if (SUPPORTS.SYMBOL_PROPERTIES) {\n    const symbols: symbol[] = getOwnPropertySymbols(object);\n\n    const { length } = symbols;\n\n    if (length) {\n      for (let index = 0, symbol; index < length; index++) {\n        symbol = symbols[index];\n\n        if (propertyIsEnumerable.call(object, symbol)) {\n          clone[symbol] = handleCopy(object[symbol], cache);\n        }\n      }\n    }\n  }\n\n  return clone;\n};\n\n/**\n * @function getObjectCloneStrict\n *\n * @description\n * get a copy of the object based on strict rules, meaning all keys and symbols\n * are copied based on the original property descriptors\n *\n * @param object the object to clone\n * @param realm the realm the object resides in\n * @param handleCopy the function that handles copying the object\n * @returns the copied object\n */\nexport const getObjectCloneStrict: FastCopy.ObjectCloner = (\n  object: any,\n  realm: FastCopy.Realm,\n  handleCopy: FastCopy.Copier,\n  cache: FastCopy.Cache,\n): any => {\n  const clone: any = getCleanClone(object, realm);\n  // set in the cache immediately to be able to reuse the object recursively\n  cache.set(object, clone);\n\n  const properties: (string | symbol)[] = SUPPORTS.SYMBOL_PROPERTIES\n    ? getOwnPropertyNames(object).concat((getOwnPropertySymbols(object) as unknown) as string[])\n    : getOwnPropertyNames(object);\n\n  const { length } = properties;\n\n  if (length) {\n    for (let index = 0, property, descriptor; index < length; index++) {\n      property = properties[index];\n\n      if (property !== 'callee' && property !== 'caller') {\n        descriptor = getOwnPropertyDescriptor(object, property);\n\n        if (descriptor) {\n          // Only clone the value if actually a value, not a getter / setter.\n          if (!descriptor.get && !descriptor.set) {\n            descriptor.value = handleCopy(object[property], cache);\n          }\n\n          try {\n            defineProperty(clone, property, descriptor);\n          } catch (error) {\n            // Tee above can fail on node in edge cases, so fall back to the loose assignment.\n            clone[property] = descriptor.value;\n          }\n        } else {\n          // In extra edge cases where the property descriptor cannot be retrived, fall back to\n          // the loose assignment.\n          clone[property] = handleCopy(object[property], cache);\n        }\n      }\n    }\n  }\n\n  return clone;\n};\n\n/**\n * @function getRegExpFlags\n *\n * @description\n * get the flags to apply to the copied regexp\n *\n * @param regExp the regexp to get the flags of\n * @returns the flags for the regexp\n */\nexport const getRegExpFlags = (regExp: RegExp): string => {\n  let flags = '';\n\n  if (regExp.global) {\n    flags += 'g';\n  }\n\n  if (regExp.ignoreCase) {\n    flags += 'i';\n  }\n\n  if (regExp.multiline) {\n    flags += 'm';\n  }\n\n  if (regExp.unicode) {\n    flags += 'u';\n  }\n\n  if (regExp.sticky) {\n    flags += 'y';\n  }\n\n  return flags;\n};\n","// utils\nimport { createCache, getObjectCloneLoose, getObjectCloneStrict, getRegExpFlags } from './utils';\n\nconst { isArray } = Array;\n\nconst GLOBAL_THIS = (() => {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n\n  if (console && console.error) {\n    console.error('Unable to locate global object, returning \"this\".');\n  }\n})();\n\n/**\n * @function copy\n *\n * @description\n * copy an object deeply as much as possible\n *\n * If `strict` is applied, then all properties (including non-enumerable ones)\n * are copied with their original property descriptors on both objects and arrays.\n *\n * The object is compared to the global constructors in the `realm` provided,\n * and the native constructor is always used to ensure that extensions of native\n * objects (allows in ES2015+) are maintained.\n *\n * @param object the object to copy\n * @param [options] the options for copying with\n * @param [options.isStrict] should the copy be strict\n * @param [options.realm] the realm (this) object the object is copied from\n * @returns the copied object\n */\nfunction copy<T>(object: T, options?: FastCopy.Options): T {\n  // manually coalesced instead of default parameters for performance\n  const isStrict: boolean = !!(options && options.isStrict);\n  const realm: FastCopy.Realm = (options && options.realm) || GLOBAL_THIS;\n\n  const getObjectClone: FastCopy.ObjectCloner = isStrict\n    ? getObjectCloneStrict\n    : getObjectCloneLoose;\n\n  /**\n   * @function handleCopy\n   *\n   * @description\n   * copy the object recursively based on its type\n   *\n   * @param object the object to copy\n   * @returns the copied object\n   */\n  const handleCopy: FastCopy.Copier = (object: any, cache: FastCopy.Cache): any => {\n    if (!object || typeof object !== 'object') {\n      return object;\n    } if (cache.has(object)) {\n      return cache.get(object);\n    }\n\n    const { constructor: Constructor } = object;\n\n    // plain objects\n    if (Constructor === realm.Object) {\n      return getObjectClone(object, realm, handleCopy, cache);\n    }\n\n    let clone: any;\n    // arrays\n    if (isArray(object)) {\n      // if strict, include non-standard properties\n      if (isStrict) {\n        return getObjectCloneStrict(object, realm, handleCopy, cache);\n      }\n\n      const { length } = object;\n\n      clone = new Constructor();\n      cache.set(object, clone);\n\n      for (let index: number = 0; index < length; index++) {\n        clone[index] = handleCopy(object[index], cache);\n      }\n\n      return clone;\n    }\n\n    // dates\n    if (object instanceof realm.Date) {\n      return new Constructor(object.getTime());\n    }\n\n    // regexps\n    if (object instanceof realm.RegExp) {\n      clone = new Constructor(object.source, object.flags || getRegExpFlags(object));\n\n      clone.lastIndex = object.lastIndex;\n\n      return clone;\n    }\n\n    // maps\n    if (realm.Map && object instanceof realm.Map) {\n      clone = new Constructor();\n      cache.set(object, clone);\n\n      object.forEach((value: any, key: any) => {\n        clone.set(key, handleCopy(value, cache));\n      });\n\n      return clone;\n    }\n\n    // sets\n    if (realm.Set && object instanceof realm.Set) {\n      clone = new Constructor();\n      cache.set(object, clone);\n\n      object.forEach((value: any) => {\n        clone.add(handleCopy(value, cache));\n      });\n\n      return clone;\n    }\n\n    // blobs\n    if (realm.Blob && object instanceof realm.Blob) {\n      return object.slice(0, object.size, object.type);\n    }\n\n    // buffers (node-only)\n    if (realm.Buffer && realm.Buffer.isBuffer(object)) {\n      clone = realm.Buffer.allocUnsafe\n        ? realm.Buffer.allocUnsafe(object.length)\n        : new Constructor(object.length);\n\n      cache.set(object, clone);\n      object.copy(clone);\n\n      return clone;\n    }\n\n    // arraybuffers / dataviews\n    if (realm.ArrayBuffer) {\n      // dataviews\n      if (realm.ArrayBuffer.isView(object)) {\n        clone = new Constructor(object.buffer.slice(0));\n        cache.set(object, clone);\n        return clone;\n      }\n\n      // arraybuffers\n      if (object instanceof realm.ArrayBuffer) {\n        clone = object.slice(0);\n        cache.set(object, clone);\n        return clone;\n      }\n    }\n\n    // if the object cannot / should not be cloned, don't\n    if (\n      // promise-like\n      typeof object.then === 'function' ||\n      // errors\n      object instanceof Error ||\n      // weakmaps\n      (realm.WeakMap && object instanceof realm.WeakMap) ||\n      // weaksets\n      (realm.WeakSet && object instanceof realm.WeakSet)\n    ) {\n      return object;\n    }\n\n    // assume anything left is a custom constructor\n    return getObjectClone(object, realm, handleCopy, cache);\n  };\n\n  return handleCopy(object, createCache());\n}\n\n// Adding reference to allow usage in CommonJS libraries compiled using TSC, which\n// expects there to be a default property on the exported object. See\n// [#37](https://github.com/planttheidea/fast-copy/issues/37) for details.\ncopy.default = copy;\n\n/**\n * @function strictCopy\n *\n * @description\n * copy the object with `strict` option pre-applied\n *\n * @param object the object to copy\n * @param [options] the options for copying with\n * @param [options.realm] the realm (this) object the object is copied from\n * @returns the copied object\n */\ncopy.strict = function strictCopy(object: any, options?: FastCopy.Options) {\n  return copy(object, {\n    isStrict: true,\n    realm: options ? options.realm : void 0,\n  });\n};\n\nexport default copy;\n","// Conversion table for simple units\nexport interface Unit {\n  unit: string;\n  factor: number;\n}\n\n// Supported unit conversions. Key is the \"from\" and value is the \"to\" array\nexport const UNIT_CONVERSION: { [key: string]: Unit[] } = {\n  kg: [{ unit: 'lbs', factor: 2.20462 }],\n  lbs: [{ unit: 'kg', factor: 0.453592 }],\n  '[in_i]': [{ unit: 'cm', factor: 2.54 }, { unit: 'm', factor: 0.0254 }]\n};\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport copy from 'fast-copy';\n\nimport { Question, UneditableVariable, Variable } from './variable';\nimport { UNIT_CONVERSION } from './units';\n\nexport interface SimpleStyle {\n  h1?: object;\n  h2?: object;\n  previewArea?: object;\n  variableHeader?: object;\n  variableRow?: object;\n  buttonPrimary?: object;\n  buttonSecondary?: object;\n  buttonDanger?: object;\n  input?: object;\n  select?: object;\n  description?: object;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RuleEditorService {\n  syntaxType = 'simple';\n  linkIdContext: string;\n  uneditableVariablesChange: Subject<UneditableVariable[]> =\n    new Subject<UneditableVariable[]>();\n  variablesChange: Subject<Variable[]> = new Subject<Variable[]>();\n  questionsChange: Subject<Question[]> = new Subject<Question[]>();\n  mightBeScoreChange: Subject<boolean> = new Subject<boolean>();\n  finalExpressionChange: Subject<string> = new Subject<string>();\n  uneditableVariables: UneditableVariable[];\n  variables: Variable[];\n  questions: Question[];\n  finalExpression: string;\n  simpleExpression: string;\n\n  private LANGUAGE_FHIRPATH = 'text/fhirpath';\n  private QUESTION_REGEX = /^%resource\\.item\\.where\\(linkId='(.*)'\\)\\.answer\\.value(?:\\*(\\d*\\.?\\d*))?$/;\n  private VARIABLE_EXTENSION = 'http://hl7.org/fhir/StructureDefinition/variable';\n  private SCORE_VARIABLE_EXTENSION = 'http://lhcforms.nlm.nih.gov/fhir/ext/rule-editor-score-variable';\n  private SCORE_EXPRESSION_EXTENSION = 'http://lhcforms.nlm.nih.gov/fhir/ext/rule-editor-expression';\n  private SIMPLE_SYNTAX_EXTENSION = 'http://lhcforms.nlm.nih.gov/fhir/ext/simple-syntax';\n  private CALCULATED_EXPRESSION = 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-calculatedExpression';\n\n  private linkIdToQuestion = {};\n  private fhir;\n  mightBeScore = false;\n\n  constructor() {\n    this.variables = [];\n    this.uneditableVariables = [];\n  }\n\n  /**\n   * Create a new variable\n   */\n  addVariable(): void {\n    // Get all the existing variable names\n    const existingNames = this.variables.map((e) => e.label)\n      .concat(this.uneditableVariables.map((e) => e.name));\n\n    this.variables.push({\n      label: this.getNewLabelName(existingNames),\n      type: 'question',\n      expression: ''\n    });\n    this.variablesChange.next(this.variables);\n  }\n\n  /**\n   * Remove a variable\n   * @param i - index of variable to remove\n   */\n  remove(i: number): void {\n    this.variables.splice(i, 1);\n  }\n\n  /**\n   * Get the list of uneditable variables based on the FHIR Questionnaire\n   * @param fhir - FHIR Questionnaire\n   */\n  getUneditableVariables(fhir): UneditableVariable[] {\n    const launchContextExtensionUrl = 'http://hl7.org/fhir/StructureDefinition/questionnaire-launchContext';\n\n    if (Array.isArray(fhir.extension)) {\n      return fhir.extension.reduce((accumulator, extension) => {\n        if (extension.url === launchContextExtensionUrl && extension.extension) {\n          const uneditableVariable = {\n            name: extension.extension.find((e) => e.url === 'name').valueId,\n            type: extension.extension.filter((e) => e.url === 'type')?.map((e) => e.valueCode).join('|'),\n            description: extension.extension.find((e) => e.url === 'description')?.valueString\n          };\n\n          accumulator.push(uneditableVariable);\n        }\n        return accumulator;\n      }, []);\n    }\n\n    return [];\n  }\n\n  /**\n   * Get and remove the variables from the FHIR object\n   * @param fhir\n   */\n  extractVariables(fhir): Variable[] {\n    // Look at the top level fhirpath related extensions to populate the editable variables\n    // TODO look at the focus item variables\n\n    if (fhir.extension) {\n      const variables = [];\n      const nonVariableExtensions = [];\n\n      // Add an index to each extension which we will then use to get the\n      // variables back in the correct order. _index will be removed on save\n      fhir.extension = fhir.extension.map((e, i) => ({ ...e, _index: i }));\n\n      fhir.extension.forEach((extension) => {\n        if (extension.url === this.VARIABLE_EXTENSION &&\n          extension.valueExpression && extension.valueExpression.language === this.LANGUAGE_FHIRPATH) {\n          variables.push(\n            this.processVariable(\n              extension.valueExpression.name,\n              extension.valueExpression.expression,\n              extension._index));\n        } else {\n          nonVariableExtensions.push(extension);\n        }\n      });\n\n      // Remove the variables so they can be re-added on export\n      fhir.extension = nonVariableExtensions;\n\n      return variables;\n    }\n\n    return [];\n  }\n\n  /**\n   * Check if the current item has an ordinalValue extension on the answer\n   * @param item - Question item or linkId\n   */\n  itemHasScore(item): boolean {\n    if (typeof item === 'string') {\n      item = this.linkIdToQuestion[item];\n    }\n\n    return (item.answerOption || []).some((answerOption) => {\n      return (answerOption.extension || []).some((extension) => {\n        return extension.url === 'http://hl7.org/fhir/StructureDefinition/ordinalValue';\n      });\n    });\n  }\n\n  /**\n   * Get the number of ordinalValue on the answers of the questions on the\n   * Questionnaire\n   * @param fhir - FHIR Questionnaire\n   * @param linkIdContext - linkId to exclude from calculation\n   * @return number of score questions on the questionnaire\n   */\n  getScoreQuestionCount(fhir, linkIdContext): number {\n    let scoreQuestions = 0;\n\n    fhir.item.forEach((item) => {\n      if (this.itemHasScore(item)) {\n        scoreQuestions++;\n      }\n    });\n\n    return scoreQuestions;\n  }\n\n  /**\n   * Import a FHIR Questionnaire to populate questions\n   * @param expressionUri - URI of expression extension on linkIdContext question\n   *  to extract and modify\n   * @param fhir - FHIR Questionnaire\n   * @param linkIdContext - Context to use for final expression\n   */\n  import(expressionUri: string, fhir, linkIdContext): void {\n    this.linkIdContext = linkIdContext;  // TODO change notification for linkId?\n    this.fhir = copy(fhir);\n\n    if (this.fhir.resourceType === 'Questionnaire' && this.fhir.item && this.fhir.item.length) {\n      // If there is at least one score question we will ask the user if they\n      // want to calculate the score\n      const SCORE_MIN_QUESTIONS = 1;\n      this.mightBeScore = this.getScoreQuestionCount(this.fhir, linkIdContext) > SCORE_MIN_QUESTIONS;\n      this.mightBeScoreChange.next(this.mightBeScore);\n\n      this.uneditableVariables = this.getUneditableVariables(this.fhir);\n      this.uneditableVariablesChange.next(this.uneditableVariables);\n\n      this.linkIdToQuestion = {};\n      this.processItem(this.fhir.item);\n\n      this.variables = this.extractVariables(this.fhir);\n      this.variablesChange.next(this.variables);\n\n      this.questions = [];\n\n      // tslint:disable-next-line:forin\n      for (const key in this.linkIdToQuestion) {\n        if (!this.linkIdToQuestion.hasOwnProperty(key)) {\n          return;\n        }\n        const e = this.linkIdToQuestion[key];\n        // TODO decimal vs choice\n        const MAX_Q_LEN = 60;  // Maximum question length before truncating.\n\n        const text = e.text;\n\n        this.questions.push({\n          linkId: e.linkId,\n          text: text.length > MAX_Q_LEN ? text.substring(0, MAX_Q_LEN) + '...' : text,\n          unit: this.getQuestionUnits(e.linkId)\n        });\n      }\n      this.questionsChange.next(this.questions);\n\n      const expression = this.extractExpression(expressionUri, this.fhir.item, linkIdContext);\n\n      if (expression !== null) {\n        // @ts-ignore\n        this.finalExpression = expression.valueExpression.expression;\n        this.finalExpressionChange.next(this.finalExpression);\n\n        const simpleSyntax = this.extractSimpleSyntax(expression);\n\n        if (simpleSyntax === null && this.finalExpression !== '') {\n          this.syntaxType = 'fhirpath';\n        } else {\n          this.syntaxType = 'simple';\n          this.simpleExpression = simpleSyntax;\n        }\n      }\n    }\n  }\n\n  /**\n   * Process nested FHIR Questionnaire items\n   * @param items - Current level of item nesting\n   * @private\n   */\n  private processItem(items): void {\n    items.forEach((e) => {\n      this.linkIdToQuestion[e.linkId] = e;\n      if (e.item) {\n        this.processItem(e.item);\n      }\n    });\n  }\n\n  /**\n   * Get and remove the simple syntax if available. If not return null\n   * @param expression\n   */\n  extractSimpleSyntax(expression): string|null {\n    if (expression.extension) {\n      const customExtension = expression.extension.find((e) => {\n        return e.url === this.SIMPLE_SYNTAX_EXTENSION;\n      });\n\n      if (customExtension !== undefined) {\n        return customExtension.valueString;  // TODO move to code\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get and remove the final expression\n   * @param expressionUri - Expression extension URL\n   * @param items - FHIR questionnaire item array\n   * @param linkId - linkId of question where to extract expression\n   */\n  extractExpression(expressionUri, items, linkId): object|null {\n    for (const item of items) {\n      if (item.extension) {\n        const extensionIndex = item.extension.findIndex((e) => {\n          return e.url === expressionUri && e.valueExpression.language === this.LANGUAGE_FHIRPATH &&\n            e.valueExpression.expression;\n        });\n\n        if (extensionIndex !== -1) {\n          const finalExpression = item.extension[extensionIndex];\n          item.extension.splice(extensionIndex, 1);\n\n          return finalExpression;\n        }\n      } else if (item.item) {\n        return this.extractExpression(expressionUri, item.item, linkId);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Process a FHIRPath expression into a more user friendly format if possible.\n   * If the format of the FHIRPath matches a format we can display with a\n   * question dropdown, etc show that. If not show the FHIRPath expression.\n   * @param name - Name to assign variable\n   * @param expression - Expression to process\n   * @param index - Original order in extension list\n   * @return Variable type which can be used by the Rule Editor to show a\n   * question, expression etc\n   * @private\n   */\n  private processVariable(name, expression, index?: number): Variable {\n    const matches = expression.match(this.QUESTION_REGEX);\n\n    if (matches !== null) {\n      const linkId = matches[1];\n      const factor = matches[2];\n\n      const variable: Variable = {\n        _index: index,\n        label: name,\n        type: 'question',\n        linkId,\n        expression\n      };\n\n      if (factor) {\n        // We might be able to do unit conversion\n        const sourceUnits = this.getQuestionUnits(linkId);\n\n        if (UNIT_CONVERSION.hasOwnProperty(sourceUnits)) {\n          const conversions = UNIT_CONVERSION[sourceUnits];\n          const conversion = conversions.find((e) => {\n            return e.factor.toString() === factor;\n          });\n\n          variable.unit = conversion.unit;\n        }\n      }\n\n      return variable;\n    } else {\n      return {\n        _index: index,\n        label: name,\n        type: 'expression',\n        expression\n      };\n    }\n  }\n\n  // TODO check behavior of repeating linkId\n  /**\n   * Get question units for the question\n   * @param linkId - Question linkId\n   * @private\n   */\n  private getQuestionUnits(linkId): string {\n    const QUESTIONNAIRE_UNIT = 'http://hl7.org/fhir/StructureDefinition/questionnaire-unit';\n    const question = this.linkIdToQuestion[linkId];\n\n    if (question.extension) {\n      const extension = question.extension.find((e) => {\n        return e.url === QUESTIONNAIRE_UNIT &&\n          e.valueCoding.system && e.valueCoding.system === 'http://unitsofmeasure.org';\n      });\n\n      if (extension && extension.valueCoding.code) {\n        return extension.valueCoding.code;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Generate a label name like A, B, C, ... AA, AB which is not already used\n   * @param existingNames {string[]} - Array of names already used by existing variables\n   * @private\n   */\n  private getNewLabelName(existingNames: string[]): string {\n    // All letters which can be used for a simple variable name\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n\n    // First pass is with a single character variable name. Other passes are with two\n    const firstLetterAlphabet = [''].concat(alphabet);\n    for (const firstLetter of firstLetterAlphabet) {\n      for (const secondLetter of alphabet) {\n        const potentialName = firstLetter + secondLetter;\n\n        const count = existingNames.filter((e) => e === potentialName);\n\n        if (count.length === 0) {\n          return potentialName;\n        }\n      }\n    }\n\n    // Don't return a suggested name if we exhausted all combinations\n    return '';\n  }\n\n  /**\n   * Toggle the mightBeScore\n   */\n  toggleMightBeScore(): void {\n    this.mightBeScore = !this.mightBeScore;\n    this.mightBeScoreChange.next(this.mightBeScore);\n  }\n\n  /**\n   * Add variables and finalExpression and return the new FHIR Questionnaire\n   * @param url Extension URL to use for the expression\n   * @param finalExpression\n   */\n  export(url: string, finalExpression: string): object {\n    // TODO support for different variable scopes\n    // Copy the fhir object so we can export more than once\n    // (if we add our data the second export will have duplicates)\n    const fhir = copy(this.fhir);\n\n    const variablesToAdd = this.variables.map((e) => {\n      return {\n        _index: e._index,\n        url: this.VARIABLE_EXTENSION,\n        valueExpression: {\n          name: e.label,\n          language: this.LANGUAGE_FHIRPATH,\n          expression: e.expression\n        }\n      };\n    });\n\n    // Split the variables into two buckets: Variables present when\n    // Questionnaire was imported and variables added by the user using the Rule\n    // Editor. Add variables present initially among the existing extensions.\n    // Add the remaining variables at the end\n    const variablesPresentInitially = [];\n    const variablesAdded = [];\n\n    variablesToAdd.forEach(e => {\n      if (e._index === undefined) {\n        variablesAdded.push(e);\n      } else {\n        variablesPresentInitially.push(e);\n      }\n    });\n\n    if (fhir.extension) {\n      // Introduce variables present before\n      fhir.extension = fhir.extension.concat(variablesPresentInitially);\n      // Sort by index\n      fhir.extension.sort((a, b) => a._index - b._index);\n      // Add variables added by the user\n      fhir.extension = fhir.extension.concat(variablesAdded);\n    } else {\n      fhir.extension = variablesPresentInitially.concat(variablesAdded);\n    }\n\n    // Remove _index\n    fhir.extension = fhir.extension.map(({_index, ...other}) => other);\n\n    const finalExpressionExtension: any = {\n      url,\n      valueExpression: {\n        language: this.LANGUAGE_FHIRPATH,\n        expression: finalExpression\n      }\n    };\n\n    // TODO keep existing extensions\n    if (this.syntaxType === 'simple') {\n      finalExpressionExtension.extension = [{\n        url: this.SIMPLE_SYNTAX_EXTENSION,\n        valueString: this.simpleExpression\n      }];\n    }\n\n    this.insertExtensions(fhir.item, this.linkIdContext, [finalExpressionExtension]);\n\n    return fhir;\n  }\n\n\n  /**\n   * Takes FHIR questionnaire definition and a linkId and returns the FHIR\n   * Questionnaire with a calculated expression at the given linkId which sums up\n   * all the ordinal values in the questionnaire\n   */\n  addTotalScoreRule(fhir, linkId): object {\n    this.fhir = fhir;\n    this.linkIdContext = linkId;\n    return this.addSumOfScores();\n  }\n\n  /**\n   * Given the current FHIR questionnaire definition and a linkId return a new FHIR\n   * Questionnaire with a calculated expression at the given linkId which sums up\n   * all the ordinal values in the questionnaire\n   */\n  addSumOfScores(): object {\n    const fhir = this.fhir;\n    const linkIdContext = this.linkIdContext;\n\n    const variableNames = [];\n    const scoreQuestionLinkIds = [];\n\n    // Get an array of linkIds for score questions\n    fhir.item.forEach((item) => {\n      if (item.linkId !== linkIdContext && this.itemHasScore(item)) {\n        scoreQuestionLinkIds.push(item.linkId);\n      }\n    });\n\n    // Get as many short suggested variable names as we have score questions\n    scoreQuestionLinkIds.forEach(() => {\n      variableNames.push(this.getNewLabelName(variableNames));\n    });\n\n    const scoreQuestions = scoreQuestionLinkIds.map((e, i) => {\n      return {\n        url: this.VARIABLE_EXTENSION,\n        valueExpression: {\n          name: variableNames[i],\n          language: this.LANGUAGE_FHIRPATH,\n          expression: `%questionnaire.item.where(linkId = '${e}').answerOption` +\n            `.where(valueCoding.code=%resource.item.where(linkId = '${e}').answer.valueCoding.code).extension` +\n            `.where(url='http://hl7.org/fhir/StructureDefinition/ordinalValue').valueDecimal`,\n          extension: [{\n            url: this.SCORE_VARIABLE_EXTENSION\n          }]\n        }\n      };\n    });\n\n    const anyQuestionAnswered = {\n      url: this.VARIABLE_EXTENSION,\n      valueExpression: {\n        name: 'any_questions_answered',\n        language: this.LANGUAGE_FHIRPATH,\n        expression: variableNames.map((e) => `%${e}.exists()`).join(' or '),\n        extension: [{\n          url: this.SCORE_VARIABLE_EXTENSION\n        }]\n      }\n    };\n\n    const sumString = variableNames.map((e) => `iif(%${e}.exists(), %${e}, 0)`).join(' + ');\n\n    const totalCalculation = {\n      url: this.CALCULATED_EXPRESSION,\n      valueExpression: {\n        description: 'Total score calculation',\n        language: this.LANGUAGE_FHIRPATH,\n        expression: `iif(%any_questions_answered, ${sumString}, {})`,\n        extension: [{\n          url: this.SCORE_EXPRESSION_EXTENSION\n        }]\n      }\n    };\n\n    scoreQuestions.push(anyQuestionAnswered);\n    // @ts-ignore\n    scoreQuestions.push(totalCalculation);\n\n    this.insertExtensions(fhir.item, linkIdContext, scoreQuestions);\n\n    return fhir;\n  }\n\n  /**\n   * Removes any score calculation added by the rule editor\n   * @param questionnaire - FHIR Questionnaire\n   * @return Questionnaire without the score calculation variable and expression\n   */\n  removeSumOfScores(questionnaire): object {\n    // Deep copy\n    const questionnaireWithoutScores = copy(questionnaire);\n\n    const removeItemScoreVariables = (item) => {\n      item.extension = item.extension.filter((extension) => !this.isScoreExtension(extension));\n      if (item.item) {\n        item.item.forEach((subItem) => removeItemScoreVariables(subItem));\n      }\n    };\n\n    questionnaireWithoutScores.item.forEach(removeItemScoreVariables);\n\n    return questionnaireWithoutScores;\n  }\n\n  /**\n   * Returns true if the extension has an extension for calculating score false otherwise\n   * @param extension - FHIR Extension object\n   * @private\n   */\n  private isScoreExtension(extension): boolean {\n    if (extension.valueExpression && extension.valueExpression.extension &&\n      extension.valueExpression.extension.length) {\n      return !!extension.valueExpression.extension.find(e => e &&\n        (e.url === this.SCORE_VARIABLE_EXTENSION ||\n          e.url === this.SCORE_EXPRESSION_EXTENSION));\n    } else {\n      return false;\n    }\n  }\n\n  private insertExtensions(items, linkId, extensions): void {\n    for (const item of items) {\n      if (item.linkId === linkId) {\n        if (item.extension) {\n          item.extension = item.extension.concat(extensions);\n        } else {\n          item.extension = extensions;\n        }\n        break;\n      } else if (item.item) {\n        this.insertExtensions(item.item, linkId, extensions);\n      }\n    }\n  }\n\n  /**\n   * Get the expression for a question\n   * @param linkId - Question linkId\n   * @param itemHasScore - Answer has an ordinalValue extension\n   * @param convertible - Units can be converted\n   * @param unit - Base units\n   * @param toUnit - Destination units\n   */\n  valueOrScoreExpression(linkId: string, itemHasScore: boolean, convertible: boolean, unit: string, toUnit: string): string {\n    if (itemHasScore) {\n      return `%questionnaire.item.where(linkId = '${linkId}').answerOption` +\n        `.where(valueCoding.code=%resource.item.where(linkId = '${linkId}').answer.valueCoding.code).extension` +\n        `.where(url='http://hl7.org/fhir/StructureDefinition/ordinalValue').valueDecimal`;\n    } else if (convertible && unit && toUnit) {\n      const factor = UNIT_CONVERSION[unit].find((e) => e.unit === toUnit).factor;\n      return `%resource.item.where(linkId='${linkId}').answer.value*${factor}`;\n    } else {\n      return `%resource.item.where(linkId='${linkId}').answer.value`;\n    }\n  }\n}\n","import { DatePipe } from '@angular/common';\nimport { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\nimport { MatRadioChange } from '@angular/material/radio';\n\nimport { RuleEditorService, SimpleStyle } from './rule-editor.service';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'lhc-rule-editor',\n  templateUrl: 'rule-editor.component.html',\n  styleUrls: ['rule-editor.component.css']\n})\nexport class RuleEditorComponent implements OnChanges {\n  @Input() fhirQuestionnaire = null;\n  @Input() itemLinkId = null;\n  @Input() submitButtonName = 'Submit';\n  @Input() titleName = 'Rule Editor';\n  @Input() expressionLabel = 'Final Expression';\n  @Input() expressionUri = 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-calculatedExpression';\n  @Input() lhcStyle: SimpleStyle = {};\n  @Output() save = new EventEmitter<object>();\n\n  expressionSyntax: string;\n  simpleExpression: string;\n  finalExpression: string;\n  finalExpressionFhirPath: string;\n  linkIdContext: string;\n  datePipe = new DatePipe('en-US');\n  calculateSum: boolean;\n  suggestions = [];\n  variables: string[];\n\n  private calculateSumSubscription;\n  private finalExpressionSubscription;\n  private variablesSubscription;\n\n  constructor(private variableService: RuleEditorService) {}\n\n  /**\n   * Angular lifecycle hook called before the component is destroyed\n   */\n  ngDestroy(): void {\n    this.calculateSumSubscription.unsubscribe();\n    this.finalExpressionSubscription.unsubscribe();\n    this.variablesSubscription.unsubscribe();\n  }\n\n  /**\n   * Angular lifecycle hook called on input changes\n   */\n  ngOnChanges(args): void {\n    this.reload();\n  }\n\n  /**\n   * Re-import fhir and context and show the form\n   */\n  reload(): void {\n    if (this.fhirQuestionnaire !== null && this.itemLinkId !== null) {\n      this.variableService.import(this.expressionUri, this.fhirQuestionnaire, this.itemLinkId);\n    }\n\n    this.simpleExpression = this.variableService.simpleExpression;\n    this.linkIdContext = this.variableService.linkIdContext;\n    this.expressionSyntax = this.variableService.syntaxType;\n    this.calculateSum = this.variableService.mightBeScore;\n    this.calculateSumSubscription = this.variableService.mightBeScoreChange.subscribe((mightBeScore) => {\n      this.calculateSum = mightBeScore;\n    });\n    this.finalExpression = this.variableService.finalExpression;\n    this.finalExpressionSubscription = this.variableService.finalExpressionChange.subscribe((finalExpression) => {\n      this.finalExpression = finalExpression;\n    });\n    this.variables = this.variableService.variables.map(e => e.label);\n    this.variablesSubscription = this.variableService.variablesChange.subscribe((variables) => {\n      this.variables = variables.map(e => e.label);\n    });\n  }\n\n  /**\n   * Export FHIR Questionnaire and download as a file\n   */\n  export(): void {\n    this.save.emit(this.variableService.export(this.expressionUri, this.finalExpression));\n  }\n\n  /**\n   * Create a new instance of a FHIR questionnaire file by summing all ordinal\n   * values\n   */\n  addSumOfScores(): void {\n    this.save.emit(this.variableService.addSumOfScores());\n  }\n\n  /**\n   * Called when the syntax type is changed to clean up expressions if the data cannot be converted\n   * @param $event - event from from the caller\n   */\n  onSyntaxChange($event: MatRadioChange): void {\n    const newSyntax = $event.value;\n\n    // Clear the existing expression if switching away from fhirpath\n    if (newSyntax === 'simple') {\n      this.finalExpression = '';\n    }\n\n    this.variableService.syntaxType = newSyntax;\n  }\n\n  /**\n   * Update the final expression\n   */\n  updateFinalExpression(expression): void {\n    this.finalExpression = expression;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * @description\n * Defines an interface that acts as a bridge between the Angular forms API and a\n * native element in the DOM.\n *\n * Implement this interface to create a custom form control directive\n * that integrates with Angular forms.\n *\n * @see DefaultValueAccessor\n *\n * @publicApi\n */\nexport interface ControlValueAccessor {\n  /**\n   * @description\n   * Writes a new value to the element.\n   *\n   * This method is called by the forms API to write to the view when programmatic\n   * changes from model to view are requested.\n   *\n   * @usageNotes\n   * ### Write a value to the element\n   *\n   * The following example writes a value to the native DOM element.\n   *\n   * ```ts\n   * writeValue(value: any): void {\n   *   this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n   * }\n   * ```\n   *\n   * @param obj The new value for the element\n   */\n  writeValue(obj: any): void;\n\n  /**\n   * @description\n   * Registers a callback function that is called when the control's value\n   * changes in the UI.\n   *\n   * This method is called by the forms API on initialization to update the form\n   * model when values propagate from the view to the model.\n   *\n   * When implementing the `registerOnChange` method in your own value accessor,\n   * save the given function so your class calls it at the appropriate time.\n   *\n   * @usageNotes\n   * ### Store the change function\n   *\n   * The following example stores the provided function as an internal method.\n   *\n   * ```ts\n   * registerOnChange(fn: (_: any) => void): void {\n   *   this._onChange = fn;\n   * }\n   * ```\n   *\n   * When the value changes in the UI, call the registered\n   * function to allow the forms API to update itself:\n   *\n   * ```ts\n   * host: {\n   *    '(change)': '_onChange($event.target.value)'\n   * }\n   * ```\n   *\n   * @param fn The callback function to register\n   */\n  registerOnChange(fn: any): void;\n\n  /**\n   * @description\n   * Registers a callback function that is called by the forms API on initialization\n   * to update the form model on blur.\n   *\n   * When implementing `registerOnTouched` in your own value accessor, save the given\n   * function so your class calls it when the control should be considered\n   * blurred or \"touched\".\n   *\n   * @usageNotes\n   * ### Store the callback function\n   *\n   * The following example stores the provided function as an internal method.\n   *\n   * ```ts\n   * registerOnTouched(fn: any): void {\n   *   this._onTouched = fn;\n   * }\n   * ```\n   *\n   * On blur (or equivalent), your class should call the registered function to allow\n   * the forms API to update itself:\n   *\n   * ```ts\n   * host: {\n   *    '(blur)': '_onTouched()'\n   * }\n   * ```\n   *\n   * @param fn The callback function to register\n   */\n  registerOnTouched(fn: any): void;\n\n  /**\n   * @description\n   * Function that is called by the forms API when the control status changes to\n   * or from 'DISABLED'. Depending on the status, it enables or disables the\n   * appropriate DOM element.\n   *\n   * @usageNotes\n   * The following is an example of writing the disabled property to a native DOM element:\n   *\n   * ```ts\n   * setDisabledState(isDisabled: boolean): void {\n   *   this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n   * }\n   * ```\n   *\n   * @param isDisabled The disabled status to set on the element\n   */\n  setDisabledState?(isDisabled: boolean): void;\n}\n\n/**\n * Used to provide a `ControlValueAccessor` for form controls.\n *\n * See `DefaultValueAccessor` for how to implement one.\n *\n * @publicApi\n */\nexport const NG_VALUE_ACCESSOR =\n    new InjectionToken<ReadonlyArray<ControlValueAccessor>>('NgValueAccessor');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, forwardRef, Renderer2} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const CHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CheckboxControlValueAccessor),\n  multi: true,\n};\n\n/**\n * @description\n * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input\n * element.\n *\n * @usageNotes\n *\n * ### Using a checkbox with a reactive form.\n *\n * The following example shows how to use a checkbox with a reactive form.\n *\n * ```ts\n * const rememberLoginControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"checkbox\" [formControl]=\"rememberLoginControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n      'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n  host: {'(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()'},\n  providers: [CHECKBOX_VALUE_ACCESSOR]\n})\nexport class CheckboxControlValueAccessor implements ControlValueAccessor {\n  /**\n   * The registered callback function called when a change event occurs on the input element.\n   * @nodoc\n   */\n  onChange = (_: any) => {};\n\n  /**\n   * The registered callback function called when a blur event occurs on the input element.\n   * @nodoc\n   */\n  onTouched = () => {};\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  /**\n   * Sets the \"checked\" property on the input element.\n   * @nodoc\n   */\n  writeValue(value: any): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);\n  }\n\n  /**\n   * Registers a function called when the control value changes.\n   * @nodoc\n   */\n  registerOnChange(fn: (_: any) => {}): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Registers a function called when the control is touched.\n   * @nodoc\n   */\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the \"disabled\" property on the input element.\n   * @nodoc\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {Directive, ElementRef, forwardRef, Inject, InjectionToken, Optional, Renderer2} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const DEFAULT_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DefaultValueAccessor),\n  multi: true\n};\n\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\nfunction _isAndroid(): boolean {\n  const userAgent = getDOM() ? getDOM().getUserAgent() : '';\n  return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n\n/**\n * @description\n * Provide this token to control if form directives buffer IME input until\n * the \"compositionend\" event occurs.\n * @publicApi\n */\nexport const COMPOSITION_BUFFER_MODE = new InjectionToken<boolean>('CompositionEventMode');\n\n/**\n * @description\n *\n * {@searchKeywords ngDefaultControl}\n *\n * The default `ControlValueAccessor` for writing a value and listening to changes on input\n * elements. The accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using the default value accessor\n *\n * The following example shows how to use an input element that activates the default value accessor\n * (in this case, a text field).\n *\n * ```ts\n * const firstNameControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"text\" [formControl]=\"firstNameControl\">\n * ```\n *\n * This value accessor is used by default for `<input type=\"text\">` and `<textarea>` elements, but\n * you could also use it for custom components that have similar behavior and do not require special\n * processing. In order to attach the default value accessor to a custom element, add the\n * `ngDefaultControl` attribute as shown below.\n *\n * ```\n * <custom-input-component ngDefaultControl [(ngModel)]=\"value\"></custom-input-component>\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n      'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n  // TODO: vsavkin replace the above selector with the one below it once\n  // https://github.com/angular/angular/issues/3011 is implemented\n  // selector: '[ngModel],[formControl],[formControlName]',\n  host: {\n    '(input)': '$any(this)._handleInput($event.target.value)',\n    '(blur)': 'onTouched()',\n    '(compositionstart)': '$any(this)._compositionStart()',\n    '(compositionend)': '$any(this)._compositionEnd($event.target.value)'\n  },\n  providers: [DEFAULT_VALUE_ACCESSOR]\n})\nexport class DefaultValueAccessor implements ControlValueAccessor {\n  /**\n   * The registered callback function called when an input event occurs on the input element.\n   * @nodoc\n   */\n  onChange = (_: any) => {};\n\n  /**\n   * The registered callback function called when a blur event occurs on the input element.\n   * @nodoc\n   */\n  onTouched = () => {};\n\n  /** Whether the user is creating a composition string (IME events). */\n  private _composing = false;\n\n  constructor(\n      private _renderer: Renderer2, private _elementRef: ElementRef,\n      @Optional() @Inject(COMPOSITION_BUFFER_MODE) private _compositionMode: boolean) {\n    if (this._compositionMode == null) {\n      this._compositionMode = !_isAndroid();\n    }\n  }\n\n  /**\n   * Sets the \"value\" property on the input element.\n   * @nodoc\n   */\n  writeValue(value: any): void {\n    const normalizedValue = value == null ? '' : value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  }\n\n  /**\n   * Registers a function called when the control value changes.\n   * @nodoc\n   */\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Registers a function called when the control is touched.\n   * @nodoc\n   */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the \"disabled\" property on the input element.\n   * @nodoc\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  /** @internal */\n  _handleInput(value: any): void {\n    if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n      this.onChange(value);\n    }\n  }\n\n  /** @internal */\n  _compositionStart(): void {\n    this._composing = true;\n  }\n\n  /** @internal */\n  _compositionEnd(value: any): void {\n    this._composing = false;\n    this._compositionMode && this.onChange(value);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, ɵisObservable as isObservable, ɵisPromise as isPromise} from '@angular/core';\nimport {forkJoin, from, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {AsyncValidator, AsyncValidatorFn, ValidationErrors, Validator, ValidatorFn} from './directives/validators';\nimport {AbstractControl} from './model';\n\nfunction isEmptyInputValue(value: any): boolean {\n  // we don't check for string here so it also works with arrays\n  return value == null || value.length === 0;\n}\n\nfunction hasValidLength(value: any): boolean {\n  // non-strict comparison is intentional, to check for both `null` and `undefined` values\n  return value != null && typeof value.length === 'number';\n}\n\n/**\n * @description\n * An `InjectionToken` for registering additional synchronous validators used with\n * `AbstractControl`s.\n *\n * @see `NG_ASYNC_VALIDATORS`\n *\n * @usageNotes\n *\n * ### Providing a custom validator\n *\n * The following example registers a custom validator directive. Adding the validator to the\n * existing collection of validators requires the `multi: true` option.\n *\n * ```typescript\n * @Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors | null {\n *     return { 'custom': true };\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport const NG_VALIDATORS = new InjectionToken<Array<Validator|Function>>('NgValidators');\n\n/**\n * @description\n * An `InjectionToken` for registering additional asynchronous validators used with\n * `AbstractControl`s.\n *\n * @see `NG_VALIDATORS`\n *\n * @publicApi\n */\nexport const NG_ASYNC_VALIDATORS =\n    new InjectionToken<Array<Validator|Function>>('NgAsyncValidators');\n\n/**\n * A regular expression that matches valid e-mail addresses.\n *\n * At a high level, this regexp matches e-mail addresses of the format `local-part@tld`, where:\n * - `local-part` consists of one or more of the allowed characters (alphanumeric and some\n *   punctuation symbols).\n * - `local-part` cannot begin or end with a period (`.`).\n * - `local-part` cannot be longer than 64 characters.\n * - `tld` consists of one or more `labels` separated by periods (`.`). For example `localhost` or\n *   `foo.com`.\n * - A `label` consists of one or more of the allowed characters (alphanumeric, dashes (`-`) and\n *   periods (`.`)).\n * - A `label` cannot begin or end with a dash (`-`) or a period (`.`).\n * - A `label` cannot be longer than 63 characters.\n * - The whole address cannot be longer than 254 characters.\n *\n * ## Implementation background\n *\n * This regexp was ported over from AngularJS (see there for git history):\n * https://github.com/angular/angular.js/blob/c133ef836/src/ng/directive/input.js#L27\n * It is based on the\n * [WHATWG version](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\n * some enhancements to incorporate more RFC rules (such as rules related to domain names and the\n * lengths of different parts of the address). The main differences from the WHATWG version are:\n *   - Disallow `local-part` to begin or end with a period (`.`).\n *   - Disallow `local-part` length to exceed 64 characters.\n *   - Disallow total address length to exceed 254 characters.\n *\n * See [this commit](https://github.com/angular/angular.js/commit/f3f5cf72e) for more details.\n */\nconst EMAIL_REGEXP =\n    /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\n/**\n * @description\n * Provides a set of built-in validators that can be used by form controls.\n *\n * A validator is a function that processes a `FormControl` or collection of\n * controls and returns an error map or null. A null map means that validation has passed.\n *\n * @see [Form Validation](/guide/form-validation)\n *\n * @publicApi\n */\nexport class Validators {\n  /**\n   * @description\n   * Validator that requires the control's value to be greater than or equal to the provided number.\n   * The validator exists only as a function and not as a directive.\n   *\n   * @usageNotes\n   *\n   * ### Validate against a minimum of 3\n   *\n   * ```typescript\n   * const control = new FormControl(2, Validators.min(3));\n   *\n   * console.log(control.errors); // {min: {min: 3, actual: 2}}\n   * ```\n   *\n   * @returns A validator function that returns an error map with the\n   * `min` property if the validation check fails, otherwise `null`.\n   *\n   * @see `updateValueAndValidity()`\n   *\n   */\n  static min(min: number): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors|null => {\n      if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n        return null;  // don't validate empty values to allow optional controls\n      }\n      const value = parseFloat(control.value);\n      // Controls with NaN values after parsing should be treated as not having a\n      // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n      return !isNaN(value) && value < min ? {'min': {'min': min, 'actual': control.value}} : null;\n    };\n  }\n\n  /**\n   * @description\n   * Validator that requires the control's value to be less than or equal to the provided number.\n   * The validator exists only as a function and not as a directive.\n   *\n   * @usageNotes\n   *\n   * ### Validate against a maximum of 15\n   *\n   * ```typescript\n   * const control = new FormControl(16, Validators.max(15));\n   *\n   * console.log(control.errors); // {max: {max: 15, actual: 16}}\n   * ```\n   *\n   * @returns A validator function that returns an error map with the\n   * `max` property if the validation check fails, otherwise `null`.\n   *\n   * @see `updateValueAndValidity()`\n   *\n   */\n  static max(max: number): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors|null => {\n      if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n        return null;  // don't validate empty values to allow optional controls\n      }\n      const value = parseFloat(control.value);\n      // Controls with NaN values after parsing should be treated as not having a\n      // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n      return !isNaN(value) && value > max ? {'max': {'max': max, 'actual': control.value}} : null;\n    };\n  }\n\n  /**\n   * @description\n   * Validator that requires the control have a non-empty value.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field is non-empty\n   *\n   * ```typescript\n   * const control = new FormControl('', Validators.required);\n   *\n   * console.log(control.errors); // {required: true}\n   * ```\n   *\n   * @returns An error map with the `required` property\n   * if the validation check fails, otherwise `null`.\n   *\n   * @see `updateValueAndValidity()`\n   *\n   */\n  static required(control: AbstractControl): ValidationErrors|null {\n    return isEmptyInputValue(control.value) ? {'required': true} : null;\n  }\n\n  /**\n   * @description\n   * Validator that requires the control's value be true. This validator is commonly\n   * used for required checkboxes.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field value is true\n   *\n   * ```typescript\n   * const control = new FormControl('', Validators.requiredTrue);\n   *\n   * console.log(control.errors); // {required: true}\n   * ```\n   *\n   * @returns An error map that contains the `required` property\n   * set to `true` if the validation check fails, otherwise `null`.\n   *\n   * @see `updateValueAndValidity()`\n   *\n   */\n  static requiredTrue(control: AbstractControl): ValidationErrors|null {\n    return control.value === true ? null : {'required': true};\n  }\n\n  /**\n   * @description\n   * Validator that requires the control's value pass an email validation test.\n   *\n   * Tests the value using a [regular\n   * expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n   * pattern suitable for common usecases. The pattern is based on the definition of a valid email\n   * address in the [WHATWG HTML\n   * specification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\n   * some enhancements to incorporate more RFC rules (such as rules related to domain names and the\n   * lengths of different parts of the address).\n   *\n   * The differences from the WHATWG version include:\n   * - Disallow `local-part` (the part before the `@` symbol) to begin or end with a period (`.`).\n   * - Disallow `local-part` to be longer than 64 characters.\n   * - Disallow the whole address to be longer than 254 characters.\n   *\n   * If this pattern does not satisfy your business needs, you can use `Validators.pattern()` to\n   * validate the value against a different pattern.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field matches a valid email pattern\n   *\n   * ```typescript\n   * const control = new FormControl('bad@', Validators.email);\n   *\n   * console.log(control.errors); // {email: true}\n   * ```\n   *\n   * @returns An error map with the `email` property\n   * if the validation check fails, otherwise `null`.\n   *\n   * @see `updateValueAndValidity()`\n   *\n   */\n  static email(control: AbstractControl): ValidationErrors|null {\n    if (isEmptyInputValue(control.value)) {\n      return null;  // don't validate empty values to allow optional controls\n    }\n    return EMAIL_REGEXP.test(control.value) ? null : {'email': true};\n  }\n\n  /**\n   * @description\n   * Validator that requires the length of the control's value to be greater than or equal\n   * to the provided minimum length. This validator is also provided by default if you use the\n   * the HTML5 `minlength` attribute. Note that the `minLength` validator is intended to be used\n   * only for types that have a numeric `length` property, such as strings or arrays. The\n   * `minLength` validator logic is also not invoked for values when their `length` property is 0\n   * (for example in case of an empty string or an empty array), to support optional controls. You\n   * can use the standard `required` validator if empty values should not be considered valid.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field has a minimum of 3 characters\n   *\n   * ```typescript\n   * const control = new FormControl('ng', Validators.minLength(3));\n   *\n   * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\n   * ```\n   *\n   * ```html\n   * <input minlength=\"5\">\n   * ```\n   *\n   * @returns A validator function that returns an error map with the\n   * `minlength` property if the validation check fails, otherwise `null`.\n   *\n   * @see `updateValueAndValidity()`\n   *\n   */\n  static minLength(minLength: number): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors|null => {\n      if (isEmptyInputValue(control.value) || !hasValidLength(control.value)) {\n        // don't validate empty values to allow optional controls\n        // don't validate values without `length` property\n        return null;\n      }\n\n      return control.value.length < minLength ?\n          {'minlength': {'requiredLength': minLength, 'actualLength': control.value.length}} :\n          null;\n    };\n  }\n\n  /**\n   * @description\n   * Validator that requires the length of the control's value to be less than or equal\n   * to the provided maximum length. This validator is also provided by default if you use the\n   * the HTML5 `maxlength` attribute. Note that the `maxLength` validator is intended to be used\n   * only for types that have a numeric `length` property, such as strings or arrays.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field has maximum of 5 characters\n   *\n   * ```typescript\n   * const control = new FormControl('Angular', Validators.maxLength(5));\n   *\n   * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}\n   * ```\n   *\n   * ```html\n   * <input maxlength=\"5\">\n   * ```\n   *\n   * @returns A validator function that returns an error map with the\n   * `maxlength` property if the validation check fails, otherwise `null`.\n   *\n   * @see `updateValueAndValidity()`\n   *\n   */\n  static maxLength(maxLength: number): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors|null => {\n      return hasValidLength(control.value) && control.value.length > maxLength ?\n          {'maxlength': {'requiredLength': maxLength, 'actualLength': control.value.length}} :\n          null;\n    };\n  }\n\n  /**\n   * @description\n   * Validator that requires the control's value to match a regex pattern. This validator is also\n   * provided by default if you use the HTML5 `pattern` attribute.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field only contains letters or spaces\n   *\n   * ```typescript\n   * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));\n   *\n   * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}\n   * ```\n   *\n   * ```html\n   * <input pattern=\"[a-zA-Z ]*\">\n   * ```\n   *\n   * ### Pattern matching with the global or sticky flag\n   *\n   * `RegExp` objects created with the `g` or `y` flags that are passed into `Validators.pattern`\n   * can produce different results on the same input when validations are run consecutively. This is\n   * due to how the behavior of `RegExp.prototype.test` is\n   * specified in [ECMA-262](https://tc39.es/ecma262/#sec-regexpbuiltinexec)\n   * (`RegExp` preserves the index of the last match when the global or sticky flag is used).\n   * Due to this behavior, it is recommended that when using\n   * `Validators.pattern` you **do not** pass in a `RegExp` object with either the global or sticky\n   * flag enabled.\n   *\n   * ```typescript\n   * // Not recommended (since the `g` flag is used)\n   * const controlOne = new FormControl('1', Validators.pattern(/foo/g));\n   *\n   * // Good\n   * const controlTwo = new FormControl('1', Validators.pattern(/foo/));\n   * ```\n   *\n   * @param pattern A regular expression to be used as is to test the values, or a string.\n   * If a string is passed, the `^` character is prepended and the `$` character is\n   * appended to the provided string (if not already present), and the resulting regular\n   * expression is used to test the values.\n   *\n   * @returns A validator function that returns an error map with the\n   * `pattern` property if the validation check fails, otherwise `null`.\n   *\n   * @see `updateValueAndValidity()`\n   *\n   */\n  static pattern(pattern: string|RegExp): ValidatorFn {\n    if (!pattern) return Validators.nullValidator;\n    let regex: RegExp;\n    let regexStr: string;\n    if (typeof pattern === 'string') {\n      regexStr = '';\n\n      if (pattern.charAt(0) !== '^') regexStr += '^';\n\n      regexStr += pattern;\n\n      if (pattern.charAt(pattern.length - 1) !== '$') regexStr += '$';\n\n      regex = new RegExp(regexStr);\n    } else {\n      regexStr = pattern.toString();\n      regex = pattern;\n    }\n    return (control: AbstractControl): ValidationErrors|null => {\n      if (isEmptyInputValue(control.value)) {\n        return null;  // don't validate empty values to allow optional controls\n      }\n      const value: string = control.value;\n      return regex.test(value) ? null :\n                                 {'pattern': {'requiredPattern': regexStr, 'actualValue': value}};\n    };\n  }\n\n  /**\n   * @description\n   * Validator that performs no operation.\n   *\n   * @see `updateValueAndValidity()`\n   *\n   */\n  static nullValidator(control: AbstractControl): ValidationErrors|null {\n    return null;\n  }\n\n  /**\n   * @description\n   * Compose multiple validators into a single function that returns the union\n   * of the individual error maps for the provided control.\n   *\n   * @returns A validator function that returns an error map with the\n   * merged error maps of the validators if the validation check fails, otherwise `null`.\n   *\n   * @see `updateValueAndValidity()`\n   *\n   */\n  static compose(validators: null): null;\n  static compose(validators: (ValidatorFn|null|undefined)[]): ValidatorFn|null;\n  static compose(validators: (ValidatorFn|null|undefined)[]|null): ValidatorFn|null {\n    if (!validators) return null;\n    const presentValidators: ValidatorFn[] = validators.filter(isPresent) as any;\n    if (presentValidators.length == 0) return null;\n\n    return function(control: AbstractControl) {\n      return mergeErrors(executeValidators<ValidatorFn>(control, presentValidators));\n    };\n  }\n\n  /**\n   * @description\n   * Compose multiple async validators into a single function that returns the union\n   * of the individual error objects for the provided control.\n   *\n   * @returns A validator function that returns an error map with the\n   * merged error objects of the async validators if the validation check fails, otherwise `null`.\n   *\n   * @see `updateValueAndValidity()`\n   *\n   */\n  static composeAsync(validators: (AsyncValidatorFn|null)[]): AsyncValidatorFn|null {\n    if (!validators) return null;\n    const presentValidators: AsyncValidatorFn[] = validators.filter(isPresent) as any;\n    if (presentValidators.length == 0) return null;\n\n    return function(control: AbstractControl) {\n      const observables =\n          executeValidators<AsyncValidatorFn>(control, presentValidators).map(toObservable);\n      return forkJoin(observables).pipe(map(mergeErrors));\n    };\n  }\n}\n\nfunction isPresent(o: any): boolean {\n  return o != null;\n}\n\nexport function toObservable(r: any): Observable<any> {\n  const obs = isPromise(r) ? from(r) : r;\n  if (!(isObservable(obs)) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n    throw new Error(`Expected validator to return Promise or Observable.`);\n  }\n  return obs;\n}\n\nfunction mergeErrors(arrayOfErrors: (ValidationErrors|null)[]): ValidationErrors|null {\n  let res: {[key: string]: any} = {};\n\n  // Not using Array.reduce here due to a Chrome 80 bug\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982\n  arrayOfErrors.forEach((errors: ValidationErrors|null) => {\n    res = errors != null ? {...res!, ...errors} : res!;\n  });\n\n  return Object.keys(res).length === 0 ? null : res;\n}\n\ntype GenericValidatorFn = (control: AbstractControl) => any;\n\nfunction executeValidators<V extends GenericValidatorFn>(\n    control: AbstractControl, validators: V[]): ReturnType<V>[] {\n  return validators.map(validator => validator(control));\n}\n\nfunction isValidatorFn<V>(validator: V|Validator|AsyncValidator): validator is V {\n  return !(validator as Validator).validate;\n}\n\n/**\n * Given the list of validators that may contain both functions as well as classes, return the list\n * of validator functions (convert validator classes into validator functions). This is needed to\n * have consistent structure in validators list before composing them.\n *\n * @param validators The set of validators that may contain validators both in plain function form\n *     as well as represented as a validator class.\n */\nexport function normalizeValidators<V>(validators: (V|Validator|AsyncValidator)[]): V[] {\n  return validators.map(validator => {\n    return isValidatorFn<V>(validator) ?\n        validator :\n        ((c: AbstractControl) => validator.validate(c)) as unknown as V;\n  });\n}\n\n/**\n * Merges synchronous validators into a single validator function (combined using\n * `Validators.compose`).\n */\nexport function composeValidators(validators: Array<Validator|ValidatorFn>): ValidatorFn|null {\n  return validators != null ? Validators.compose(normalizeValidators<ValidatorFn>(validators)) :\n                              null;\n}\n\n/**\n * Merges asynchronous validators into a single validator function (combined using\n * `Validators.composeAsync`).\n */\nexport function composeAsyncValidators(validators: Array<AsyncValidator|AsyncValidatorFn>):\n    AsyncValidatorFn|null {\n  return validators != null ?\n      Validators.composeAsync(normalizeValidators<AsyncValidatorFn>(validators)) :\n      null;\n}\n\n/**\n * Merges raw control validators with a given directive validator and returns the combined list of\n * validators as an array.\n */\nexport function mergeValidators<V>(controlValidators: V|V[]|null, dirValidator: V): V[] {\n  if (controlValidators === null) return [dirValidator];\n  return Array.isArray(controlValidators) ? [...controlValidators, dirValidator] :\n                                            [controlValidators, dirValidator];\n}\n\n/**\n * Retrieves the list of raw synchronous validators attached to a given control.\n */\nexport function getControlValidators(control: AbstractControl): ValidatorFn|ValidatorFn[]|null {\n  return (control as any)._rawValidators as ValidatorFn | ValidatorFn[] | null;\n}\n\n/**\n * Retrieves the list of raw asynchronous validators attached to a given control.\n */\nexport function getControlAsyncValidators(control: AbstractControl): AsyncValidatorFn|\n    AsyncValidatorFn[]|null {\n  return (control as any)._rawAsyncValidators as AsyncValidatorFn | AsyncValidatorFn[] | null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\n\nimport {AbstractControl} from '../model';\nimport {composeAsyncValidators, composeValidators} from '../validators';\n\nimport {AsyncValidator, AsyncValidatorFn, ValidationErrors, Validator, ValidatorFn} from './validators';\n\n\n/**\n * @description\n * Base class for control directives.\n *\n * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.\n *\n * @publicApi\n */\nexport abstract class AbstractControlDirective {\n  /**\n   * @description\n   * A reference to the underlying control.\n   *\n   * @returns the control that backs this directive. Most properties fall through to that instance.\n   */\n  abstract get control(): AbstractControl|null;\n\n  /**\n   * @description\n   * Reports the value of the control if it is present, otherwise null.\n   */\n  get value(): any {\n    return this.control ? this.control.value : null;\n  }\n\n  /**\n   * @description\n   * Reports whether the control is valid. A control is considered valid if no\n   * validation errors exist with the current value.\n   * If the control is not present, null is returned.\n   */\n  get valid(): boolean|null {\n    return this.control ? this.control.valid : null;\n  }\n\n  /**\n   * @description\n   * Reports whether the control is invalid, meaning that an error exists in the input value.\n   * If the control is not present, null is returned.\n   */\n  get invalid(): boolean|null {\n    return this.control ? this.control.invalid : null;\n  }\n\n  /**\n   * @description\n   * Reports whether a control is pending, meaning that that async validation is occurring and\n   * errors are not yet available for the input value. If the control is not present, null is\n   * returned.\n   */\n  get pending(): boolean|null {\n    return this.control ? this.control.pending : null;\n  }\n\n  /**\n   * @description\n   * Reports whether the control is disabled, meaning that the control is disabled\n   * in the UI and is exempt from validation checks and excluded from aggregate\n   * values of ancestor controls. If the control is not present, null is returned.\n   */\n  get disabled(): boolean|null {\n    return this.control ? this.control.disabled : null;\n  }\n\n  /**\n   * @description\n   * Reports whether the control is enabled, meaning that the control is included in ancestor\n   * calculations of validity or value. If the control is not present, null is returned.\n   */\n  get enabled(): boolean|null {\n    return this.control ? this.control.enabled : null;\n  }\n\n  /**\n   * @description\n   * Reports the control's validation errors. If the control is not present, null is returned.\n   */\n  get errors(): ValidationErrors|null {\n    return this.control ? this.control.errors : null;\n  }\n\n  /**\n   * @description\n   * Reports whether the control is pristine, meaning that the user has not yet changed\n   * the value in the UI. If the control is not present, null is returned.\n   */\n  get pristine(): boolean|null {\n    return this.control ? this.control.pristine : null;\n  }\n\n  /**\n   * @description\n   * Reports whether the control is dirty, meaning that the user has changed\n   * the value in the UI. If the control is not present, null is returned.\n   */\n  get dirty(): boolean|null {\n    return this.control ? this.control.dirty : null;\n  }\n\n  /**\n   * @description\n   * Reports whether the control is touched, meaning that the user has triggered\n   * a `blur` event on it. If the control is not present, null is returned.\n   */\n  get touched(): boolean|null {\n    return this.control ? this.control.touched : null;\n  }\n\n  /**\n   * @description\n   * Reports the validation status of the control. Possible values include:\n   * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.\n   * If the control is not present, null is returned.\n   */\n  get status(): string|null {\n    return this.control ? this.control.status : null;\n  }\n\n  /**\n   * @description\n   * Reports whether the control is untouched, meaning that the user has not yet triggered\n   * a `blur` event on it. If the control is not present, null is returned.\n   */\n  get untouched(): boolean|null {\n    return this.control ? this.control.untouched : null;\n  }\n\n  /**\n   * @description\n   * Returns a multicasting observable that emits a validation status whenever it is\n   * calculated for the control. If the control is not present, null is returned.\n   */\n  get statusChanges(): Observable<any>|null {\n    return this.control ? this.control.statusChanges : null;\n  }\n\n  /**\n   * @description\n   * Returns a multicasting observable of value changes for the control that emits every time the\n   * value of the control changes in the UI or programmatically.\n   * If the control is not present, null is returned.\n   */\n  get valueChanges(): Observable<any>|null {\n    return this.control ? this.control.valueChanges : null;\n  }\n\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n  get path(): string[]|null {\n    return null;\n  }\n\n  /**\n   * Contains the result of merging synchronous validators into a single validator function\n   * (combined using `Validators.compose`).\n   */\n  private _composedValidatorFn: ValidatorFn|null|undefined;\n\n  /**\n   * Contains the result of merging asynchronous validators into a single validator function\n   * (combined using `Validators.composeAsync`).\n   */\n  private _composedAsyncValidatorFn: AsyncValidatorFn|null|undefined;\n\n  /**\n   * Set of synchronous validators as they were provided while calling `setValidators` function.\n   * @internal\n   */\n  _rawValidators: Array<Validator|ValidatorFn> = [];\n\n  /**\n   * Set of asynchronous validators as they were provided while calling `setAsyncValidators`\n   * function.\n   * @internal\n   */\n  _rawAsyncValidators: Array<AsyncValidator|AsyncValidatorFn> = [];\n\n  /**\n   * Sets synchronous validators for this directive.\n   * @internal\n   */\n  _setValidators(validators: Array<Validator|ValidatorFn>|undefined): void {\n    this._rawValidators = validators || [];\n    this._composedValidatorFn = composeValidators(this._rawValidators);\n  }\n\n  /**\n   * Sets asynchronous validators for this directive.\n   * @internal\n   */\n  _setAsyncValidators(validators: Array<AsyncValidator|AsyncValidatorFn>|undefined): void {\n    this._rawAsyncValidators = validators || [];\n    this._composedAsyncValidatorFn = composeAsyncValidators(this._rawAsyncValidators);\n  }\n\n  /**\n   * @description\n   * Synchronous validator function composed of all the synchronous validators registered with this\n   * directive.\n   */\n  get validator(): ValidatorFn|null {\n    return this._composedValidatorFn || null;\n  }\n\n  /**\n   * @description\n   * Asynchronous validator function composed of all the asynchronous validators registered with\n   * this directive.\n   */\n  get asyncValidator(): AsyncValidatorFn|null {\n    return this._composedAsyncValidatorFn || null;\n  }\n\n  /*\n   * The set of callbacks to be invoked when directive instance is being destroyed.\n   */\n  private _onDestroyCallbacks: (() => void)[] = [];\n\n  /**\n   * Internal function to register callbacks that should be invoked\n   * when directive instance is being destroyed.\n   * @internal\n   */\n  _registerOnDestroy(fn: () => void): void {\n    this._onDestroyCallbacks.push(fn);\n  }\n\n  /**\n   * Internal function to invoke all registered \"on destroy\" callbacks.\n   * Note: calling this function also clears the list of callbacks.\n   * @internal\n   */\n  _invokeOnDestroyCallbacks(): void {\n    this._onDestroyCallbacks.forEach(fn => fn());\n    this._onDestroyCallbacks = [];\n  }\n\n  /**\n   * @description\n   * Resets the control with the provided value if the control is present.\n   */\n  reset(value: any = undefined): void {\n    if (this.control) this.control.reset(value);\n  }\n\n  /**\n   * @description\n   * Reports whether the control with the given path has the error specified.\n   *\n   * @param errorCode The code of the error to check\n   * @param path A list of control names that designates how to move from the current control\n   * to the control that should be queried for errors.\n   *\n   * @usageNotes\n   * For example, for the following `FormGroup`:\n   *\n   * ```\n   * form = new FormGroup({\n   *   address: new FormGroup({ street: new FormControl() })\n   * });\n   * ```\n   *\n   * The path to the 'street' control from the root form would be 'address' -> 'street'.\n   *\n   * It can be provided to this method in one of two formats:\n   *\n   * 1. An array of string control names, e.g. `['address', 'street']`\n   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n   *\n   * If no path is given, this method checks for the error on the current control.\n   *\n   * @returns whether the given error is present in the control at the given path.\n   *\n   * If the control is not present, false is returned.\n   */\n  hasError(errorCode: string, path?: Array<string|number>|string): boolean {\n    return this.control ? this.control.hasError(errorCode, path) : false;\n  }\n\n  /**\n   * @description\n   * Reports error data for the control with the given path.\n   *\n   * @param errorCode The code of the error to check\n   * @param path A list of control names that designates how to move from the current control\n   * to the control that should be queried for errors.\n   *\n   * @usageNotes\n   * For example, for the following `FormGroup`:\n   *\n   * ```\n   * form = new FormGroup({\n   *   address: new FormGroup({ street: new FormControl() })\n   * });\n   * ```\n   *\n   * The path to the 'street' control from the root form would be 'address' -> 'street'.\n   *\n   * It can be provided to this method in one of two formats:\n   *\n   * 1. An array of string control names, e.g. `['address', 'street']`\n   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n   *\n   * @returns error data for that particular error. If the control or error is not present,\n   * null is returned.\n   */\n  getError(errorCode: string, path?: Array<string|number>|string): any {\n    return this.control ? this.control.getError(errorCode, path) : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {Form} from './form_interface';\n\n\n/**\n * @description\n * A base class for directives that contain multiple registered instances of `NgControl`.\n * Only used by the forms module.\n *\n * @publicApi\n */\nexport abstract class ControlContainer extends AbstractControlDirective {\n  /**\n   * @description\n   * The name for the control\n   */\n  // TODO(issue/24571): remove '!'.\n  name!: string|number|null;\n\n  /**\n   * @description\n   * The top-level form directive for the control.\n   */\n  get formDirective(): Form|null {\n    return null;\n  }\n\n  /**\n   * @description\n   * The path to this group.\n   */\n  get path(): string[]|null {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor} from './control_value_accessor';\n\n\n/**\n * @description\n * A base class that all `FormControl`-based directives extend. It binds a `FormControl`\n * object to a DOM element.\n *\n * @publicApi\n */\nexport abstract class NgControl extends AbstractControlDirective {\n  /**\n   * @description\n   * The parent form for the control.\n   *\n   * @internal\n   */\n  _parent: ControlContainer|null = null;\n\n  /**\n   * @description\n   * The name for the control\n   */\n  name: string|number|null = null;\n\n  /**\n   * @description\n   * The value accessor for the control\n   */\n  valueAccessor: ControlValueAccessor|null = null;\n\n  /**\n   * @description\n   * The callback method to update the model from the view when requested\n   *\n   * @param newValue The new value for the view\n   */\n  abstract viewToModelUpdate(newValue: any): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Optional, Self} from '@angular/core';\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {ControlContainer} from './control_container';\nimport {NgControl} from './ng_control';\n\nexport class AbstractControlStatus {\n  private _cd: AbstractControlDirective|null;\n\n  constructor(cd: AbstractControlDirective|null) {\n    this._cd = cd;\n  }\n\n  get ngClassUntouched(): boolean {\n    return this._cd?.control?.untouched ?? false;\n  }\n  get ngClassTouched(): boolean {\n    return this._cd?.control?.touched ?? false;\n  }\n  get ngClassPristine(): boolean {\n    return this._cd?.control?.pristine ?? false;\n  }\n  get ngClassDirty(): boolean {\n    return this._cd?.control?.dirty ?? false;\n  }\n  get ngClassValid(): boolean {\n    return this._cd?.control?.valid ?? false;\n  }\n  get ngClassInvalid(): boolean {\n    return this._cd?.control?.invalid ?? false;\n  }\n  get ngClassPending(): boolean {\n    return this._cd?.control?.pending ?? false;\n  }\n}\n\nexport const ngControlStatusHost = {\n  '[class.ng-untouched]': 'ngClassUntouched',\n  '[class.ng-touched]': 'ngClassTouched',\n  '[class.ng-pristine]': 'ngClassPristine',\n  '[class.ng-dirty]': 'ngClassDirty',\n  '[class.ng-valid]': 'ngClassValid',\n  '[class.ng-invalid]': 'ngClassInvalid',\n  '[class.ng-pending]': 'ngClassPending',\n};\n\n/**\n * @description\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status.\n *\n * @usageNotes\n *\n * ### CSS classes applied\n *\n * The following classes are applied as the properties become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost})\nexport class NgControlStatus extends AbstractControlStatus {\n  constructor(@Self() cd: NgControl) {\n    super(cd);\n  }\n}\n\n/**\n * @description\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * @see `NgControlStatus`\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n      '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n  host: ngControlStatusHost\n})\nexport class NgControlStatusGroup extends AbstractControlStatus {\n  constructor(@Optional() @Self() cd: ControlContainer) {\n    super(cd);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, forwardRef, Renderer2} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const NUMBER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NumberValueAccessor),\n  multi: true\n};\n\n/**\n * @description\n * The `ControlValueAccessor` for writing a number value and listening to number input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and `NgModel`\n * directives.\n *\n * @usageNotes\n *\n * ### Using a number input with a reactive form.\n *\n * The following example shows how to use a number input with a reactive form.\n *\n * ```ts\n * const totalCountControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"number\" [formControl]=\"totalCountControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n      'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n  host: {'(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()'},\n  providers: [NUMBER_VALUE_ACCESSOR]\n})\nexport class NumberValueAccessor implements ControlValueAccessor {\n  /**\n   * The registered callback function called when a change or input event occurs on the input\n   * element.\n   * @nodoc\n   */\n  onChange = (_: any) => {};\n\n  /**\n   * The registered callback function called when a blur event occurs on the input element.\n   * @nodoc\n   */\n  onTouched = () => {};\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  /**\n   * Sets the \"value\" property on the input element.\n   * @nodoc\n   */\n  writeValue(value: number): void {\n    // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n    const normalizedValue = value == null ? '' : value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  }\n\n  /**\n   * Registers a function called when the control value changes.\n   * @nodoc\n   */\n  registerOnChange(fn: (_: number|null) => void): void {\n    this.onChange = (value) => {\n      fn(value == '' ? null : parseFloat(value));\n    };\n  }\n\n  /**\n   * Registers a function called when the control is touched.\n   * @nodoc\n   */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the \"disabled\" property on the input element.\n   * @nodoc\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, forwardRef, Injectable, Injector, Input, OnDestroy, OnInit, Renderer2} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\n\nexport const RADIO_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RadioControlValueAccessor),\n  multi: true\n};\n\nfunction throwNameError() {\n  throw new Error(`\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n}\n\n/**\n * @description\n * Class used by Angular to track radio buttons. For internal use only.\n */\n@Injectable()\nexport class RadioControlRegistry {\n  private _accessors: any[] = [];\n\n  /**\n   * @description\n   * Adds a control to the internal registry. For internal use only.\n   */\n  add(control: NgControl, accessor: RadioControlValueAccessor) {\n    this._accessors.push([control, accessor]);\n  }\n\n  /**\n   * @description\n   * Removes a control from the internal registry. For internal use only.\n   */\n  remove(accessor: RadioControlValueAccessor) {\n    for (let i = this._accessors.length - 1; i >= 0; --i) {\n      if (this._accessors[i][1] === accessor) {\n        this._accessors.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @description\n   * Selects a radio button. For internal use only.\n   */\n  select(accessor: RadioControlValueAccessor) {\n    this._accessors.forEach((c) => {\n      if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n        c[1].fireUncheck(accessor.value);\n      }\n    });\n  }\n\n  private _isSameGroup(\n      controlPair: [NgControl, RadioControlValueAccessor],\n      accessor: RadioControlValueAccessor): boolean {\n    if (!controlPair[0].control) return false;\n    return controlPair[0]._parent === accessor._control._parent &&\n        controlPair[1].name === accessor.name;\n  }\n}\n\n/**\n * @description\n * The `ControlValueAccessor` for writing radio control values and listening to radio control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using radio buttons with reactive form directives\n *\n * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in\n * a reactive form, radio buttons in the same group should have the same `formControlName`.\n * Providing a `name` attribute is optional.\n *\n * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n      'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n  host: {'(change)': 'onChange()', '(blur)': 'onTouched()'},\n  providers: [RADIO_VALUE_ACCESSOR]\n})\nexport class RadioControlValueAccessor implements ControlValueAccessor, OnDestroy, OnInit {\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _state!: boolean;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _control!: NgControl;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _fn!: Function;\n\n  /**\n   * The registered callback function called when a change event occurs on the input element.\n   * @nodoc\n   */\n  onChange = () => {};\n\n  /**\n   * The registered callback function called when a blur event occurs on the input element.\n   * @nodoc\n   */\n  onTouched = () => {};\n\n  /**\n   * @description\n   * Tracks the name of the radio input element.\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input() name!: string;\n\n  /**\n   * @description\n   * Tracks the name of the `FormControl` bound to the directive. The name corresponds\n   * to a key in the parent `FormGroup` or `FormArray`.\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input() formControlName!: string;\n\n  /**\n   * @description\n   * Tracks the value of the radio input element\n   */\n  @Input() value: any;\n\n  constructor(\n      private _renderer: Renderer2, private _elementRef: ElementRef,\n      private _registry: RadioControlRegistry, private _injector: Injector) {}\n\n  /** @nodoc */\n  ngOnInit(): void {\n    this._control = this._injector.get(NgControl);\n    this._checkName();\n    this._registry.add(this._control, this);\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    this._registry.remove(this);\n  }\n\n  /**\n   * Sets the \"checked\" property value on the radio input element.\n   * @nodoc\n   */\n  writeValue(value: any): void {\n    this._state = value === this.value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\n  }\n\n  /**\n   * Registers a function called when the control value changes.\n   * @nodoc\n   */\n  registerOnChange(fn: (_: any) => {}): void {\n    this._fn = fn;\n    this.onChange = () => {\n      fn(this.value);\n      this._registry.select(this);\n    };\n  }\n\n  /**\n   * Sets the \"value\" on the radio input element and unchecks it.\n   *\n   * @param value\n   */\n  fireUncheck(value: any): void {\n    this.writeValue(value);\n  }\n\n  /**\n   * Registers a function called when the control is touched.\n   * @nodoc\n   */\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the \"disabled\" property on the input element.\n   * @nodoc\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  private _checkName(): void {\n    if (this.name && this.formControlName && this.name !== this.formControlName &&\n        (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwNameError();\n    }\n    if (!this.name && this.formControlName) this.name = this.formControlName;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, forwardRef, Renderer2, StaticProvider} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const RANGE_VALUE_ACCESSOR: StaticProvider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RangeValueAccessor),\n  multi: true\n};\n\n/**\n * @description\n * The `ControlValueAccessor` for writing a range value and listening to range input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`\n * directives.\n *\n * @usageNotes\n *\n * ### Using a range input with a reactive form\n *\n * The following example shows how to use a range input with a reactive form.\n *\n * ```ts\n * const ageControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"range\" [formControl]=\"ageControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n      'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n  host: {\n    '(change)': 'onChange($event.target.value)',\n    '(input)': 'onChange($event.target.value)',\n    '(blur)': 'onTouched()'\n  },\n  providers: [RANGE_VALUE_ACCESSOR]\n})\nexport class RangeValueAccessor implements ControlValueAccessor {\n  /**\n   * The registered callback function called when a change or input event occurs on the input\n   * element.\n   * @nodoc\n   */\n  onChange = (_: any) => {};\n\n  /**\n   * The registered callback function called when a blur event occurs on the input element.\n   * @nodoc\n   */\n  onTouched = () => {};\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  /**\n   * Sets the \"value\" property on the input element.\n   * @nodoc\n   */\n  writeValue(value: any): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n  }\n\n  /**\n   * Registers a function called when the control value changes.\n   * @nodoc\n   */\n  registerOnChange(fn: (_: number|null) => void): void {\n    this.onChange = (value) => {\n      fn(value == '' ? null : parseFloat(value));\n    };\n  }\n\n  /**\n   * Registers a function called when the control is touched.\n   * @nodoc\n   */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the \"disabled\" property on the range input element.\n   * @nodoc\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const FormErrorExamples = {\n  formControlName: `\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });`,\n\n  formGroupName: `\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });`,\n\n  formArrayName: `\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });`,\n\n  ngModelGroup: `\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>`,\n\n  ngModelWithFormGroup: `\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  `\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FormErrorExamples as Examples} from './error_examples';\n\nexport class ReactiveErrors {\n  static controlParentException(): void {\n    throw new Error(\n        `formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${Examples.formControlName}`);\n  }\n\n  static ngModelGroupException(): void {\n    throw new Error(\n        `formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        ${Examples.formGroupName}\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        ${Examples.ngModelGroup}`);\n  }\n\n  static missingFormException(): void {\n    throw new Error(`formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       ${Examples.formControlName}`);\n  }\n\n  static groupParentException(): void {\n    throw new Error(\n        `formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${Examples.formGroupName}`);\n  }\n\n  static arrayParentException(): void {\n    throw new Error(\n        `formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        ${Examples.formArrayName}`);\n  }\n\n  static disabledAttrWarning(): void {\n    console.warn(`\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n\n      Example:\n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    `);\n  }\n\n  static ngModelWarning(directiveName: string): void {\n    console.warn(`\n    It looks like you're using ngModel on the same form field as ${directiveName}.\n    Support for using the ngModel input property and ngModelChange event with\n    reactive form directives has been deprecated in Angular v6 and will be removed\n    in a future version of Angular.\n\n    For more information on this, see our API docs here:\n    https://angular.io/api/forms/${\n        directiveName === 'formControl' ? 'FormControlDirective' :\n                                          'FormControlName'}#use-with-ngmodel\n    `);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, forwardRef, Host, Input, OnDestroy, Optional, Renderer2, StaticProvider} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const SELECT_VALUE_ACCESSOR: StaticProvider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectControlValueAccessor),\n  multi: true\n};\n\nfunction _buildValueString(id: string|null, value: any): string {\n  if (id == null) return `${value}`;\n  if (value && typeof value === 'object') value = 'Object';\n  return `${id}: ${value}`.slice(0, 50);\n}\n\nfunction _extractId(valueString: string): string {\n  return valueString.split(':')[0];\n}\n\n/**\n * @description\n * The `ControlValueAccessor` for writing select control values and listening to select control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using select controls in a reactive form\n *\n * The following examples show how to use a select control in a reactive form.\n *\n * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Using select controls in a template-driven form\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * {@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * ### Customizing option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * ```ts\n * const selectedCountriesControl = new FormControl();\n * ```\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [formControl]=\"selectedCountriesControl\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * **Note:** We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n      'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n  host: {'(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()'},\n  providers: [SELECT_VALUE_ACCESSOR]\n})\nexport class SelectControlValueAccessor implements ControlValueAccessor {\n  /** @nodoc */\n  value: any;\n\n  /** @internal */\n  _optionMap: Map<string, any> = new Map<string, any>();\n\n  /** @internal */\n  _idCounter: number = 0;\n\n  /**\n   * The registered callback function called when a change event occurs on the input element.\n   * @nodoc\n   */\n  onChange = (_: any) => {};\n\n  /**\n   * The registered callback function called when a blur event occurs on the input element.\n   * @nodoc\n   */\n  onTouched = () => {};\n\n  /**\n   * @description\n   * Tracks the option comparison algorithm for tracking identities when\n   * checking for changes.\n   */\n  @Input()\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n    }\n    this._compareWith = fn;\n  }\n\n  private _compareWith: (o1: any, o2: any) => boolean = Object.is;\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  /**\n   * Sets the \"value\" property on the input element. The \"selectedIndex\"\n   * property is also set if an ID is provided on the option element.\n   * @nodoc\n   */\n  writeValue(value: any): void {\n    this.value = value;\n    const id: string|null = this._getOptionId(value);\n    if (id == null) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n    }\n    const valueString = _buildValueString(id, value);\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);\n  }\n\n  /**\n   * Registers a function called when the control value changes.\n   * @nodoc\n   */\n  registerOnChange(fn: (value: any) => any): void {\n    this.onChange = (valueString: string) => {\n      this.value = this._getOptionValue(valueString);\n      fn(this.value);\n    };\n  }\n\n  /**\n   * Registers a function called when the control is touched.\n   * @nodoc\n   */\n  registerOnTouched(fn: () => any): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the \"disabled\" property on the select input element.\n   * @nodoc\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  /** @internal */\n  _registerOption(): string {\n    return (this._idCounter++).toString();\n  }\n\n  /** @internal */\n  _getOptionId(value: any): string|null {\n    for (const id of Array.from(this._optionMap.keys())) {\n      if (this._compareWith(this._optionMap.get(id), value)) return id;\n    }\n    return null;\n  }\n\n  /** @internal */\n  _getOptionValue(valueString: string): any {\n    const id: string = _extractId(valueString);\n    return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n  }\n}\n\n/**\n * @description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see `SelectControlValueAccessor`\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({selector: 'option'})\nexport class NgSelectOption implements OnDestroy {\n  /**\n   * @description\n   * ID of the option element\n   */\n  // TODO(issue/24571): remove '!'.\n  id!: string;\n\n  constructor(\n      private _element: ElementRef, private _renderer: Renderer2,\n      @Optional() @Host() private _select: SelectControlValueAccessor) {\n    if (this._select) this.id = this._select._registerOption();\n  }\n\n  /**\n   * @description\n   * Tracks the value bound to the option element. Unlike the value binding,\n   * ngValue supports binding to objects.\n   */\n  @Input('ngValue')\n  set ngValue(value: any) {\n    if (this._select == null) return;\n    this._select._optionMap.set(this.id, value);\n    this._setElementValue(_buildValueString(this.id, value));\n    this._select.writeValue(this._select.value);\n  }\n\n  /**\n   * @description\n   * Tracks simple string values bound to the option element.\n   * For objects, use the `ngValue` input binding.\n   */\n  @Input('value')\n  set value(value: any) {\n    this._setElementValue(value);\n    if (this._select) this._select.writeValue(this._select.value);\n  }\n\n  /** @internal */\n  _setElementValue(value: string): void {\n    this._renderer.setProperty(this._element.nativeElement, 'value', value);\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    if (this._select) {\n      this._select._optionMap.delete(this.id);\n      this._select.writeValue(this._select.value);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, forwardRef, Host, Input, OnDestroy, Optional, Renderer2, StaticProvider} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const SELECT_MULTIPLE_VALUE_ACCESSOR: StaticProvider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectMultipleControlValueAccessor),\n  multi: true\n};\n\nfunction _buildValueString(id: string, value: any): string {\n  if (id == null) return `${value}`;\n  if (typeof value === 'string') value = `'${value}'`;\n  if (value && typeof value === 'object') value = 'Object';\n  return `${id}: ${value}`.slice(0, 50);\n}\n\nfunction _extractId(valueString: string): string {\n  return valueString.split(':')[0];\n}\n\n/** Mock interface for HTML Options */\ninterface HTMLOption {\n  value: string;\n  selected: boolean;\n}\n\n/** Mock interface for HTMLCollection */\nabstract class HTMLCollection {\n  // TODO(issue/24571): remove '!'.\n  length!: number;\n  abstract item(_: number): HTMLOption;\n}\n\n/**\n * @description\n * The `ControlValueAccessor` for writing multi-select control values and listening to multi-select\n * control changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @see `SelectControlValueAccessor`\n *\n * @usageNotes\n *\n * ### Using a multi-select control\n *\n * The follow example shows you how to use a multi-select control with a reactive form.\n *\n * ```ts\n * const countryControl = new FormControl();\n * ```\n *\n * ```\n * <select multiple name=\"countries\" [formControl]=\"countryControl\">\n *   <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *     {{ country.name }}\n *   </option>\n * </select>\n * ```\n *\n * ### Customizing option selection\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * See the `SelectControlValueAccessor` for usage.\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n      'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n  host: {'(change)': 'onChange($event.target)', '(blur)': 'onTouched()'},\n  providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n})\nexport class SelectMultipleControlValueAccessor implements ControlValueAccessor {\n  /**\n   * The current value.\n   * @nodoc\n   */\n  value: any;\n\n  /** @internal */\n  _optionMap: Map<string, ɵNgSelectMultipleOption> = new Map<string, ɵNgSelectMultipleOption>();\n\n  /** @internal */\n  _idCounter: number = 0;\n\n  /**\n   * The registered callback function called when a change event occurs on the input element.\n   * @nodoc\n   */\n  onChange = (_: any) => {};\n\n  /**\n   * The registered callback function called when a blur event occurs on the input element.\n   * @nodoc\n   */\n  onTouched = () => {};\n\n  /**\n   * @description\n   * Tracks the option comparison algorithm for tracking identities when\n   * checking for changes.\n   */\n  @Input()\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n    }\n    this._compareWith = fn;\n  }\n\n  private _compareWith: (o1: any, o2: any) => boolean = Object.is;\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  /**\n   * Sets the \"value\" property on one or of more of the select's options.\n   * @nodoc\n   */\n  writeValue(value: any): void {\n    this.value = value;\n    let optionSelectedStateSetter: (opt: ɵNgSelectMultipleOption, o: any) => void;\n    if (Array.isArray(value)) {\n      // convert values to ids\n      const ids = value.map((v) => this._getOptionId(v));\n      optionSelectedStateSetter = (opt, o) => {\n        opt._setSelected(ids.indexOf(o.toString()) > -1);\n      };\n    } else {\n      optionSelectedStateSetter = (opt, o) => {\n        opt._setSelected(false);\n      };\n    }\n    this._optionMap.forEach(optionSelectedStateSetter);\n  }\n\n  /**\n   * Registers a function called when the control value changes\n   * and writes an array of the selected options.\n   * @nodoc\n   */\n  registerOnChange(fn: (value: any) => any): void {\n    this.onChange = (_: any) => {\n      const selected: Array<any> = [];\n      if (_.selectedOptions !== undefined) {\n        const options: HTMLCollection = _.selectedOptions;\n        for (let i = 0; i < options.length; i++) {\n          const opt: any = options.item(i);\n          const val: any = this._getOptionValue(opt.value);\n          selected.push(val);\n        }\n      }\n      // Degrade on IE\n      else {\n        const options: HTMLCollection = <HTMLCollection>_.options;\n        for (let i = 0; i < options.length; i++) {\n          const opt: HTMLOption = options.item(i);\n          if (opt.selected) {\n            const val: any = this._getOptionValue(opt.value);\n            selected.push(val);\n          }\n        }\n      }\n      this.value = selected;\n      fn(selected);\n    };\n  }\n\n  /**\n   * Registers a function called when the control is touched.\n   * @nodoc\n   */\n  registerOnTouched(fn: () => any): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the \"disabled\" property on the select input element.\n   * @nodoc\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  /** @internal */\n  _registerOption(value: ɵNgSelectMultipleOption): string {\n    const id: string = (this._idCounter++).toString();\n    this._optionMap.set(id, value);\n    return id;\n  }\n\n  /** @internal */\n  _getOptionId(value: any): string|null {\n    for (const id of Array.from(this._optionMap.keys())) {\n      if (this._compareWith(this._optionMap.get(id)!._value, value)) return id;\n    }\n    return null;\n  }\n\n  /** @internal */\n  _getOptionValue(valueString: string): any {\n    const id: string = _extractId(valueString);\n    return this._optionMap.has(id) ? this._optionMap.get(id)!._value : valueString;\n  }\n}\n\n/**\n * @description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see `SelectMultipleControlValueAccessor`\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({selector: 'option'})\nexport class ɵNgSelectMultipleOption implements OnDestroy {\n  // TODO(issue/24571): remove '!'.\n  id!: string;\n  /** @internal */\n  _value: any;\n\n  constructor(\n      private _element: ElementRef, private _renderer: Renderer2,\n      @Optional() @Host() private _select: SelectMultipleControlValueAccessor) {\n    if (this._select) {\n      this.id = this._select._registerOption(this);\n    }\n  }\n\n  /**\n   * @description\n   * Tracks the value bound to the option element. Unlike the value binding,\n   * ngValue supports binding to objects.\n   */\n  @Input('ngValue')\n  set ngValue(value: any) {\n    if (this._select == null) return;\n    this._value = value;\n    this._setElementValue(_buildValueString(this.id, value));\n    this._select.writeValue(this._select.value);\n  }\n\n  /**\n   * @description\n   * Tracks simple string values bound to the option element.\n   * For objects, use the `ngValue` input binding.\n   */\n  @Input('value')\n  set value(value: any) {\n    if (this._select) {\n      this._value = value;\n      this._setElementValue(_buildValueString(this.id, value));\n      this._select.writeValue(this._select.value);\n    } else {\n      this._setElementValue(value);\n    }\n  }\n\n  /** @internal */\n  _setElementValue(value: string): void {\n    this._renderer.setProperty(this._element.nativeElement, 'value', value);\n  }\n\n  /** @internal */\n  _setSelected(selected: boolean) {\n    this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    if (this._select) {\n      this._select._optionMap.delete(this.id);\n      this._select.writeValue(this._select.value);\n    }\n  }\n}\n\nexport {ɵNgSelectMultipleOption as NgSelectMultipleOption};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractControl, FormArray, FormControl, FormGroup} from '../model';\nimport {getControlAsyncValidators, getControlValidators, mergeValidators} from '../validators';\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {CheckboxControlValueAccessor} from './checkbox_value_accessor';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor} from './control_value_accessor';\nimport {DefaultValueAccessor} from './default_value_accessor';\nimport {NgControl} from './ng_control';\nimport {NumberValueAccessor} from './number_value_accessor';\nimport {RadioControlValueAccessor} from './radio_control_value_accessor';\nimport {RangeValueAccessor} from './range_value_accessor';\nimport {FormArrayName} from './reactive_directives/form_group_name';\nimport {ReactiveErrors} from './reactive_errors';\nimport {SelectControlValueAccessor} from './select_control_value_accessor';\nimport {SelectMultipleControlValueAccessor} from './select_multiple_control_value_accessor';\nimport {AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\n\nexport function controlPath(name: string|null, parent: ControlContainer): string[] {\n  return [...parent.path!, name!];\n}\n\nexport function setUpControl(control: FormControl, dir: NgControl): void {\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    if (!control) _throwError(dir, 'Cannot find control with');\n    if (!dir.valueAccessor) _throwError(dir, 'No value accessor for form control with');\n  }\n\n  setUpValidators(control, dir, /* handleOnValidatorChange */ true);\n\n  dir.valueAccessor!.writeValue(control.value);\n\n  setUpViewChangePipeline(control, dir);\n  setUpModelChangePipeline(control, dir);\n\n  setUpBlurPipeline(control, dir);\n\n  setUpDisabledChangeHandler(control, dir);\n}\n\nexport function cleanUpControl(control: FormControl|null, dir: NgControl) {\n  const noop = () => {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      _noControlError(dir);\n    }\n  };\n\n  dir.valueAccessor!.registerOnChange(noop);\n  dir.valueAccessor!.registerOnTouched(noop);\n\n  cleanUpValidators(control, dir, /* handleOnValidatorChange */ true);\n\n  if (control) {\n    dir._invokeOnDestroyCallbacks();\n    control._registerOnCollectionChange(() => {});\n  }\n}\n\nfunction registerOnValidatorChange<V>(validators: (V|Validator)[], onChange: () => void): void {\n  validators.forEach((validator: (V|Validator)) => {\n    if ((<Validator>validator).registerOnValidatorChange)\n      (<Validator>validator).registerOnValidatorChange!(onChange);\n  });\n}\n\n/**\n * Sets up disabled change handler function on a given form control if ControlValueAccessor\n * associated with a given directive instance supports the `setDisabledState` call.\n *\n * @param control Form control where disabled change handler should be setup.\n * @param dir Corresponding directive instance associated with this control.\n */\nexport function setUpDisabledChangeHandler(control: FormControl, dir: NgControl): void {\n  if (dir.valueAccessor!.setDisabledState) {\n    const onDisabledChange = (isDisabled: boolean) => {\n      dir.valueAccessor!.setDisabledState!(isDisabled);\n    };\n    control.registerOnDisabledChange(onDisabledChange);\n\n    // Register a callback function to cleanup disabled change handler\n    // from a control instance when a directive is destroyed.\n    dir._registerOnDestroy(() => {\n      control._unregisterOnDisabledChange(onDisabledChange);\n    });\n  }\n}\n\n/**\n * Sets up sync and async directive validators on provided form control.\n * This function merges validators from the directive into the validators of the control.\n *\n * @param control Form control where directive validators should be setup.\n * @param dir Directive instance that contains validators to be setup.\n * @param handleOnValidatorChange Flag that determines whether directive validators should be setup\n *     to handle validator input change.\n */\nexport function setUpValidators(\n    control: AbstractControl, dir: AbstractControlDirective,\n    handleOnValidatorChange: boolean): void {\n  const validators = getControlValidators(control);\n  if (dir.validator !== null) {\n    control.setValidators(mergeValidators<ValidatorFn>(validators, dir.validator));\n  } else if (typeof validators === 'function') {\n    // If sync validators are represented by a single validator function, we force the\n    // `Validators.compose` call to happen by executing the `setValidators` function with\n    // an array that contains that function. We need this to avoid possible discrepancies in\n    // validators behavior, so sync validators are always processed by the `Validators.compose`.\n    // Note: we should consider moving this logic inside the `setValidators` function itself, so we\n    // have consistent behavior on AbstractControl API level. The same applies to the async\n    // validators logic below.\n    control.setValidators([validators]);\n  }\n\n  const asyncValidators = getControlAsyncValidators(control);\n  if (dir.asyncValidator !== null) {\n    control.setAsyncValidators(\n        mergeValidators<AsyncValidatorFn>(asyncValidators, dir.asyncValidator));\n  } else if (typeof asyncValidators === 'function') {\n    control.setAsyncValidators([asyncValidators]);\n  }\n\n  // Re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n  if (handleOnValidatorChange) {\n    const onValidatorChange = () => control.updateValueAndValidity();\n    registerOnValidatorChange<ValidatorFn>(dir._rawValidators, onValidatorChange);\n    registerOnValidatorChange<AsyncValidatorFn>(dir._rawAsyncValidators, onValidatorChange);\n  }\n}\n\n/**\n * Cleans up sync and async directive validators on provided form control.\n * This function reverts the setup performed by the `setUpValidators` function, i.e.\n * removes directive-specific validators from a given control instance.\n *\n * @param control Form control from where directive validators should be removed.\n * @param dir Directive instance that contains validators to be removed.\n * @param handleOnValidatorChange Flag that determines whether directive validators should also be\n *     cleaned up to stop handling validator input change (if previously configured to do so).\n */\nexport function cleanUpValidators(\n    control: AbstractControl|null, dir: AbstractControlDirective,\n    handleOnValidatorChange: boolean): void {\n  if (control !== null) {\n    if (dir.validator !== null) {\n      const validators = getControlValidators(control);\n      if (Array.isArray(validators) && validators.length > 0) {\n        // Filter out directive validator function.\n        control.setValidators(validators.filter(validator => validator !== dir.validator));\n      }\n    }\n\n    if (dir.asyncValidator !== null) {\n      const asyncValidators = getControlAsyncValidators(control);\n      if (Array.isArray(asyncValidators) && asyncValidators.length > 0) {\n        // Filter out directive async validator function.\n        control.setAsyncValidators(\n            asyncValidators.filter(asyncValidator => asyncValidator !== dir.asyncValidator));\n      }\n    }\n  }\n\n  if (handleOnValidatorChange) {\n    // Clear onValidatorChange callbacks by providing a noop function.\n    const noop = () => {};\n    registerOnValidatorChange<ValidatorFn>(dir._rawValidators, noop);\n    registerOnValidatorChange<AsyncValidatorFn>(dir._rawAsyncValidators, noop);\n  }\n}\n\nfunction setUpViewChangePipeline(control: FormControl, dir: NgControl): void {\n  dir.valueAccessor!.registerOnChange((newValue: any) => {\n    control._pendingValue = newValue;\n    control._pendingChange = true;\n    control._pendingDirty = true;\n\n    if (control.updateOn === 'change') updateControl(control, dir);\n  });\n}\n\nfunction setUpBlurPipeline(control: FormControl, dir: NgControl): void {\n  dir.valueAccessor!.registerOnTouched(() => {\n    control._pendingTouched = true;\n\n    if (control.updateOn === 'blur' && control._pendingChange) updateControl(control, dir);\n    if (control.updateOn !== 'submit') control.markAsTouched();\n  });\n}\n\nfunction updateControl(control: FormControl, dir: NgControl): void {\n  if (control._pendingDirty) control.markAsDirty();\n  control.setValue(control._pendingValue, {emitModelToViewChange: false});\n  dir.viewToModelUpdate(control._pendingValue);\n  control._pendingChange = false;\n}\n\nfunction setUpModelChangePipeline(control: FormControl, dir: NgControl): void {\n  const onChange = (newValue: any, emitModelEvent: boolean) => {\n    // control -> view\n    dir.valueAccessor!.writeValue(newValue);\n\n    // control -> ngModel\n    if (emitModelEvent) dir.viewToModelUpdate(newValue);\n  };\n  control.registerOnChange(onChange);\n\n  // Register a callback function to cleanup onChange handler\n  // from a control instance when a directive is destroyed.\n  dir._registerOnDestroy(() => {\n    control._unregisterOnChange(onChange);\n  });\n}\n\nexport function setUpFormContainer(\n    control: FormGroup|FormArray, dir: AbstractFormGroupDirective|FormArrayName) {\n  if (control == null && (typeof ngDevMode === 'undefined' || ngDevMode))\n    _throwError(dir, 'Cannot find control with');\n  setUpValidators(control, dir, /* handleOnValidatorChange */ false);\n}\n\nfunction _noControlError(dir: NgControl) {\n  return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\n\nfunction _throwError(dir: AbstractControlDirective, message: string): void {\n  let messageEnd: string;\n  if (dir.path!.length > 1) {\n    messageEnd = `path: '${dir.path!.join(' -> ')}'`;\n  } else if (dir.path![0]) {\n    messageEnd = `name: '${dir.path}'`;\n  } else {\n    messageEnd = 'unspecified name attribute';\n  }\n  throw new Error(`${message} ${messageEnd}`);\n}\n\nexport function isPropertyUpdated(changes: {[key: string]: any}, viewModel: any): boolean {\n  if (!changes.hasOwnProperty('model')) return false;\n  const change = changes['model'];\n\n  if (change.isFirstChange()) return true;\n  return !Object.is(viewModel, change.currentValue);\n}\n\nconst BUILTIN_ACCESSORS = [\n  CheckboxControlValueAccessor,\n  RangeValueAccessor,\n  NumberValueAccessor,\n  SelectControlValueAccessor,\n  SelectMultipleControlValueAccessor,\n  RadioControlValueAccessor,\n];\n\nexport function isBuiltInAccessor(valueAccessor: ControlValueAccessor): boolean {\n  return BUILTIN_ACCESSORS.some(a => valueAccessor.constructor === a);\n}\n\nexport function syncPendingControls(form: FormGroup, directives: NgControl[]): void {\n  form._syncPendingControls();\n  directives.forEach(dir => {\n    const control = dir.control as FormControl;\n    if (control.updateOn === 'submit' && control._pendingChange) {\n      dir.viewToModelUpdate(control._pendingValue);\n      control._pendingChange = false;\n    }\n  });\n}\n\n// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\nexport function selectValueAccessor(\n    dir: NgControl, valueAccessors: ControlValueAccessor[]): ControlValueAccessor|null {\n  if (!valueAccessors) return null;\n\n  if (!Array.isArray(valueAccessors) && (typeof ngDevMode === 'undefined' || ngDevMode))\n    _throwError(dir, 'Value accessor was not provided as an array for form control with');\n\n  let defaultAccessor: ControlValueAccessor|undefined = undefined;\n  let builtinAccessor: ControlValueAccessor|undefined = undefined;\n  let customAccessor: ControlValueAccessor|undefined = undefined;\n\n  valueAccessors.forEach((v: ControlValueAccessor) => {\n    if (v.constructor === DefaultValueAccessor) {\n      defaultAccessor = v;\n\n    } else if (isBuiltInAccessor(v)) {\n      if (builtinAccessor && (typeof ngDevMode === 'undefined' || ngDevMode))\n        _throwError(dir, 'More than one built-in value accessor matches form control with');\n      builtinAccessor = v;\n\n    } else {\n      if (customAccessor && (typeof ngDevMode === 'undefined' || ngDevMode))\n        _throwError(dir, 'More than one custom value accessor matches form control with');\n      customAccessor = v;\n    }\n  });\n\n  if (customAccessor) return customAccessor;\n  if (builtinAccessor) return builtinAccessor;\n  if (defaultAccessor) return defaultAccessor;\n\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    _throwError(dir, 'No valid value accessor for form control with');\n  }\n  return null;\n}\n\nexport function removeListItem<T>(list: T[], el: T): void {\n  const index = list.indexOf(el);\n  if (index > -1) list.splice(index, 1);\n}\n\n// TODO(kara): remove after deprecation period\nexport function _ngModelWarning(\n    name: string, type: {_ngModelWarningSentOnce: boolean},\n    instance: {_ngModelWarningSent: boolean}, warningConfig: string|null) {\n  if (warningConfig === 'never') return;\n\n  if (((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce) ||\n      (warningConfig === 'always' && !instance._ngModelWarningSent)) {\n    ReactiveErrors.ngModelWarning(name);\n    type._ngModelWarningSentOnce = true;\n    instance._ngModelWarningSent = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {removeListItem} from './directives/shared';\nimport {AsyncValidatorFn, ValidationErrors, ValidatorFn} from './directives/validators';\nimport {composeAsyncValidators, composeValidators, toObservable} from './validators';\n\n/**\n * Reports that a FormControl is valid, meaning that no errors exist in the input value.\n *\n * @see `status`\n */\nexport const VALID = 'VALID';\n\n/**\n * Reports that a FormControl is invalid, meaning that an error exists in the input value.\n *\n * @see `status`\n */\nexport const INVALID = 'INVALID';\n\n/**\n * Reports that a FormControl is pending, meaning that that async validation is occurring and\n * errors are not yet available for the input value.\n *\n * @see `markAsPending`\n * @see `status`\n */\nexport const PENDING = 'PENDING';\n\n/**\n * Reports that a FormControl is disabled, meaning that the control is exempt from ancestor\n * calculations of validity or value.\n *\n * @see `markAsDisabled`\n * @see `status`\n */\nexport const DISABLED = 'DISABLED';\n\nfunction _find(control: AbstractControl, path: Array<string|number>|string, delimiter: string) {\n  if (path == null) return null;\n\n  if (!Array.isArray(path)) {\n    path = path.split(delimiter);\n  }\n  if (Array.isArray(path) && path.length === 0) return null;\n\n  // Not using Array.reduce here due to a Chrome 80 bug\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982\n  let controlToFind: AbstractControl|null = control;\n  path.forEach((name: string|number) => {\n    if (controlToFind instanceof FormGroup) {\n      controlToFind = controlToFind.controls.hasOwnProperty(name as string) ?\n          controlToFind.controls[name] :\n          null;\n    } else if (controlToFind instanceof FormArray) {\n      controlToFind = controlToFind.at(<number>name) || null;\n    } else {\n      controlToFind = null;\n    }\n  });\n  return controlToFind;\n}\n\n/**\n * Gets validators from either an options object or given validators.\n */\nfunction pickValidators(validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|\n                        null): ValidatorFn|ValidatorFn[]|null {\n  return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.validators : validatorOrOpts) || null;\n}\n\n/**\n * Creates validator function by combining provided validators.\n */\nfunction coerceToValidator(validator: ValidatorFn|ValidatorFn[]|null): ValidatorFn|null {\n  return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n\n/**\n * Gets async validators from either an options object or given validators.\n */\nfunction pickAsyncValidators(\n    asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null,\n    validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null): AsyncValidatorFn|\n    AsyncValidatorFn[]|null {\n  return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.asyncValidators : asyncValidator) || null;\n}\n\n/**\n * Creates async validator function by combining provided async validators.\n */\nfunction coerceToAsyncValidator(asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|\n                                null): AsyncValidatorFn|null {\n  return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) :\n                                         asyncValidator || null;\n}\n\nexport type FormHooks = 'change'|'blur'|'submit';\n\n/**\n * Interface for options provided to an `AbstractControl`.\n *\n * @publicApi\n */\nexport interface AbstractControlOptions {\n  /**\n   * @description\n   * The list of validators applied to a control.\n   */\n  validators?: ValidatorFn|ValidatorFn[]|null;\n  /**\n   * @description\n   * The list of async validators applied to control.\n   */\n  asyncValidators?: AsyncValidatorFn|AsyncValidatorFn[]|null;\n  /**\n   * @description\n   * The event name for control to update upon.\n   */\n  updateOn?: 'change'|'blur'|'submit';\n}\n\n\nfunction isOptionsObj(validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|\n                      null): validatorOrOpts is AbstractControlOptions {\n  return validatorOrOpts != null && !Array.isArray(validatorOrOpts) &&\n      typeof validatorOrOpts === 'object';\n}\n\n\n/**\n * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * @see [Forms Guide](/guide/forms)\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n * @see [Dynamic Forms Guide](/guide/dynamic-form)\n *\n * @publicApi\n */\nexport abstract class AbstractControl {\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _pendingDirty!: boolean;\n\n  /**\n   * Indicates that a control has its own pending asynchronous validation in progress.\n   *\n   * @internal\n   */\n  _hasOwnPendingAsyncValidator = false;\n\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _pendingTouched!: boolean;\n\n  /** @internal */\n  _onCollectionChange = () => {};\n\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _updateOn!: FormHooks;\n\n  private _parent: FormGroup|FormArray|null = null;\n  private _asyncValidationSubscription: any;\n\n  /**\n   * Contains the result of merging synchronous validators into a single validator function\n   * (combined using `Validators.compose`).\n   *\n   * @internal\n   */\n  private _composedValidatorFn: ValidatorFn|null;\n\n  /**\n   * Contains the result of merging asynchronous validators into a single validator function\n   * (combined using `Validators.composeAsync`).\n   *\n   * @internal\n   */\n  private _composedAsyncValidatorFn: AsyncValidatorFn|null;\n\n  /**\n   * Synchronous validators as they were provided:\n   *  - in `AbstractControl` constructor\n   *  - as an argument while calling `setValidators` function\n   *  - while calling the setter on the `validator` field (e.g. `control.validator = validatorFn`)\n   *\n   * @internal\n   */\n  private _rawValidators: ValidatorFn|ValidatorFn[]|null;\n\n  /**\n   * Asynchronous validators as they were provided:\n   *  - in `AbstractControl` constructor\n   *  - as an argument while calling `setAsyncValidators` function\n   *  - while calling the setter on the `asyncValidator` field (e.g. `control.asyncValidator =\n   * asyncValidatorFn`)\n   *\n   * @internal\n   */\n  private _rawAsyncValidators: AsyncValidatorFn|AsyncValidatorFn[]|null;\n\n  /**\n   * The current value of the control.\n   *\n   * * For a `FormControl`, the current value.\n   * * For an enabled `FormGroup`, the values of enabled controls as an object\n   * with a key-value pair for each member of the group.\n   * * For a disabled `FormGroup`, the values of all controls as an object\n   * with a key-value pair for each member of the group.\n   * * For a `FormArray`, the values of enabled controls as an array.\n   *\n   */\n  public readonly value: any;\n\n  /**\n   * Initialize the AbstractControl instance.\n   *\n   * @param validators The function or array of functions that is used to determine the validity of\n   *     this control synchronously.\n   * @param asyncValidators The function or array of functions that is used to determine validity of\n   *     this control asynchronously.\n   */\n  constructor(\n      validators: ValidatorFn|ValidatorFn[]|null,\n      asyncValidators: AsyncValidatorFn|AsyncValidatorFn[]|null) {\n    this._rawValidators = validators;\n    this._rawAsyncValidators = asyncValidators;\n    this._composedValidatorFn = coerceToValidator(this._rawValidators);\n    this._composedAsyncValidatorFn = coerceToAsyncValidator(this._rawAsyncValidators);\n  }\n\n  /**\n   * The function that is used to determine the validity of this control synchronously.\n   */\n  get validator(): ValidatorFn|null {\n    return this._composedValidatorFn;\n  }\n  set validator(validatorFn: ValidatorFn|null) {\n    this._rawValidators = this._composedValidatorFn = validatorFn;\n  }\n\n  /**\n   * The function that is used to determine the validity of this control asynchronously.\n   */\n  get asyncValidator(): AsyncValidatorFn|null {\n    return this._composedAsyncValidatorFn;\n  }\n  set asyncValidator(asyncValidatorFn: AsyncValidatorFn|null) {\n    this._rawAsyncValidators = this._composedAsyncValidatorFn = asyncValidatorFn;\n  }\n\n  /**\n   * The parent control.\n   */\n  get parent(): FormGroup|FormArray|null {\n    return this._parent;\n  }\n\n  /**\n   * The validation status of the control. There are four possible\n   * validation status values:\n   *\n   * * **VALID**: This control has passed all validation checks.\n   * * **INVALID**: This control has failed at least one validation check.\n   * * **PENDING**: This control is in the midst of conducting a validation check.\n   * * **DISABLED**: This control is exempt from validation checks.\n   *\n   * These status values are mutually exclusive, so a control cannot be\n   * both valid AND invalid or invalid AND disabled.\n   */\n  // TODO(issue/24571): remove '!'.\n  public readonly status!: string;\n\n  /**\n   * A control is `valid` when its `status` is `VALID`.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   * @returns True if the control has passed all of its validation tests,\n   * false otherwise.\n   */\n  get valid(): boolean {\n    return this.status === VALID;\n  }\n\n  /**\n   * A control is `invalid` when its `status` is `INVALID`.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   * @returns True if this control has failed one or more of its validation checks,\n   * false otherwise.\n   */\n  get invalid(): boolean {\n    return this.status === INVALID;\n  }\n\n  /**\n   * A control is `pending` when its `status` is `PENDING`.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   * @returns True if this control is in the process of conducting a validation check,\n   * false otherwise.\n   */\n  get pending(): boolean {\n    return this.status == PENDING;\n  }\n\n  /**\n   * A control is `disabled` when its `status` is `DISABLED`.\n   *\n   * Disabled controls are exempt from validation checks and\n   * are not included in the aggregate value of their ancestor\n   * controls.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   * @returns True if the control is disabled, false otherwise.\n   */\n  get disabled(): boolean {\n    return this.status === DISABLED;\n  }\n\n  /**\n   * A control is `enabled` as long as its `status` is not `DISABLED`.\n   *\n   * @returns True if the control has any status other than 'DISABLED',\n   * false if the status is 'DISABLED'.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   */\n  get enabled(): boolean {\n    return this.status !== DISABLED;\n  }\n\n  /**\n   * An object containing any errors generated by failing validation,\n   * or null if there are no errors.\n   */\n  // TODO(issue/24571): remove '!'.\n  public readonly errors!: ValidationErrors|null;\n\n  /**\n   * A control is `pristine` if the user has not yet changed\n   * the value in the UI.\n   *\n   * @returns True if the user has not yet changed the value in the UI; compare `dirty`.\n   * Programmatic changes to a control's value do not mark it dirty.\n   */\n  public readonly pristine: boolean = true;\n\n  /**\n   * A control is `dirty` if the user has changed the value\n   * in the UI.\n   *\n   * @returns True if the user has changed the value of this control in the UI; compare `pristine`.\n   * Programmatic changes to a control's value do not mark it dirty.\n   */\n  get dirty(): boolean {\n    return !this.pristine;\n  }\n\n  /**\n   * True if the control is marked as `touched`.\n   *\n   * A control is marked `touched` once the user has triggered\n   * a `blur` event on it.\n   */\n  public readonly touched: boolean = false;\n\n  /**\n   * True if the control has not been marked as touched\n   *\n   * A control is `untouched` if the user has not yet triggered\n   * a `blur` event on it.\n   */\n  get untouched(): boolean {\n    return !this.touched;\n  }\n\n  /**\n   * A multicasting observable that emits an event every time the value of the control changes, in\n   * the UI or programmatically. It also emits an event each time you call enable() or disable()\n   * without passing along {emitEvent: false} as a function argument.\n   */\n  // TODO(issue/24571): remove '!'.\n  public readonly valueChanges!: Observable<any>;\n\n  /**\n   * A multicasting observable that emits an event every time the validation `status` of the control\n   * recalculates.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   */\n  // TODO(issue/24571): remove '!'.\n  public readonly statusChanges!: Observable<any>;\n\n  /**\n   * Reports the update strategy of the `AbstractControl` (meaning\n   * the event on which the control updates itself).\n   * Possible values: `'change'` | `'blur'` | `'submit'`\n   * Default value: `'change'`\n   */\n  get updateOn(): FormHooks {\n    return this._updateOn ? this._updateOn : (this.parent ? this.parent.updateOn : 'change');\n  }\n\n  /**\n   * Sets the synchronous validators that are active on this control.  Calling\n   * this overwrites any existing sync validators.\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   */\n  setValidators(newValidator: ValidatorFn|ValidatorFn[]|null): void {\n    this._rawValidators = newValidator;\n    this._composedValidatorFn = coerceToValidator(newValidator);\n  }\n\n  /**\n   * Sets the async validators that are active on this control. Calling this\n   * overwrites any existing async validators.\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   */\n  setAsyncValidators(newValidator: AsyncValidatorFn|AsyncValidatorFn[]|null): void {\n    this._rawAsyncValidators = newValidator;\n    this._composedAsyncValidatorFn = coerceToAsyncValidator(newValidator);\n  }\n\n  /**\n   * Empties out the sync validator list.\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   */\n  clearValidators(): void {\n    this.validator = null;\n  }\n\n  /**\n   * Empties out the async validator list.\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   */\n  clearAsyncValidators(): void {\n    this.asyncValidator = null;\n  }\n\n  /**\n   * Marks the control as `touched`. A control is touched by focus and\n   * blur events that do not change the value.\n   *\n   * @see `markAsUntouched()`\n   * @see `markAsDirty()`\n   * @see `markAsPristine()`\n   *\n   * @param opts Configuration options that determine how the control propagates changes\n   * and emits events after marking is applied.\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false.\n   */\n  markAsTouched(opts: {onlySelf?: boolean} = {}): void {\n    (this as {touched: boolean}).touched = true;\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsTouched(opts);\n    }\n  }\n\n  /**\n   * Marks the control and all its descendant controls as `touched`.\n   * @see `markAsTouched()`\n   */\n  markAllAsTouched(): void {\n    this.markAsTouched({onlySelf: true});\n\n    this._forEachChild((control: AbstractControl) => control.markAllAsTouched());\n  }\n\n  /**\n   * Marks the control as `untouched`.\n   *\n   * If the control has any children, also marks all children as `untouched`\n   * and recalculates the `touched` status of all parent controls.\n   *\n   * @see `markAsTouched()`\n   * @see `markAsDirty()`\n   * @see `markAsPristine()`\n   *\n   * @param opts Configuration options that determine how the control propagates changes\n   * and emits events after the marking is applied.\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false.\n   */\n  markAsUntouched(opts: {onlySelf?: boolean} = {}): void {\n    (this as {touched: boolean}).touched = false;\n    this._pendingTouched = false;\n\n    this._forEachChild((control: AbstractControl) => {\n      control.markAsUntouched({onlySelf: true});\n    });\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updateTouched(opts);\n    }\n  }\n\n  /**\n   * Marks the control as `dirty`. A control becomes dirty when\n   * the control's value is changed through the UI; compare `markAsTouched`.\n   *\n   * @see `markAsTouched()`\n   * @see `markAsUntouched()`\n   * @see `markAsPristine()`\n   *\n   * @param opts Configuration options that determine how the control propagates changes\n   * and emits events after marking is applied.\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false.\n   */\n  markAsDirty(opts: {onlySelf?: boolean} = {}): void {\n    (this as {pristine: boolean}).pristine = false;\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsDirty(opts);\n    }\n  }\n\n  /**\n   * Marks the control as `pristine`.\n   *\n   * If the control has any children, marks all children as `pristine`,\n   * and recalculates the `pristine` status of all parent\n   * controls.\n   *\n   * @see `markAsTouched()`\n   * @see `markAsUntouched()`\n   * @see `markAsDirty()`\n   *\n   * @param opts Configuration options that determine how the control emits events after\n   * marking is applied.\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false.\n   */\n  markAsPristine(opts: {onlySelf?: boolean} = {}): void {\n    (this as {pristine: boolean}).pristine = true;\n    this._pendingDirty = false;\n\n    this._forEachChild((control: AbstractControl) => {\n      control.markAsPristine({onlySelf: true});\n    });\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updatePristine(opts);\n    }\n  }\n\n  /**\n   * Marks the control as `pending`.\n   *\n   * A control is pending while the control performs async validation.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   * @param opts Configuration options that determine how the control propagates changes and\n   * emits events after marking is applied.\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false.\n   * * `emitEvent`: When true or not supplied (the default), the `statusChanges`\n   * observable emits an event with the latest status the control is marked pending.\n   * When false, no events are emitted.\n   *\n   */\n  markAsPending(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    (this as {status: string}).status = PENDING;\n\n    if (opts.emitEvent !== false) {\n      (this.statusChanges as EventEmitter<any>).emit(this.status);\n    }\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsPending(opts);\n    }\n  }\n\n  /**\n   * Disables the control. This means the control is exempt from validation checks and\n   * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n   *\n   * If the control has children, all children are also disabled.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   * @param opts Configuration options that determine how the control propagates\n   * changes and emits events after the control is disabled.\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control is disabled.\n   * When false, no events are emitted.\n   */\n  disable(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    // If parent has been marked artificially dirty we don't want to re-calculate the\n    // parent's dirtiness based on the children.\n    const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n\n    (this as {status: string}).status = DISABLED;\n    (this as {errors: ValidationErrors | null}).errors = null;\n    this._forEachChild((control: AbstractControl) => {\n      control.disable({...opts, onlySelf: true});\n    });\n    this._updateValue();\n\n    if (opts.emitEvent !== false) {\n      (this.valueChanges as EventEmitter<any>).emit(this.value);\n      (this.statusChanges as EventEmitter<string>).emit(this.status);\n    }\n\n    this._updateAncestors({...opts, skipPristineCheck});\n    this._onDisabledChange.forEach((changeFn) => changeFn(true));\n  }\n\n  /**\n   * Enables the control. This means the control is included in validation checks and\n   * the aggregate value of its parent. Its status recalculates based on its value and\n   * its validators.\n   *\n   * By default, if the control has children, all children are enabled.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   * @param opts Configure options that control how the control propagates changes and\n   * emits events when marked as untouched\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control is enabled.\n   * When false, no events are emitted.\n   */\n  enable(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    // If parent has been marked artificially dirty we don't want to re-calculate the\n    // parent's dirtiness based on the children.\n    const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n\n    (this as {status: string}).status = VALID;\n    this._forEachChild((control: AbstractControl) => {\n      control.enable({...opts, onlySelf: true});\n    });\n    this.updateValueAndValidity({onlySelf: true, emitEvent: opts.emitEvent});\n\n    this._updateAncestors({...opts, skipPristineCheck});\n    this._onDisabledChange.forEach((changeFn) => changeFn(false));\n  }\n\n  private _updateAncestors(\n      opts: {onlySelf?: boolean, emitEvent?: boolean, skipPristineCheck?: boolean}) {\n    if (this._parent && !opts.onlySelf) {\n      this._parent.updateValueAndValidity(opts);\n      if (!opts.skipPristineCheck) {\n        this._parent._updatePristine();\n      }\n      this._parent._updateTouched();\n    }\n  }\n\n  /**\n   * @param parent Sets the parent of the control\n   */\n  setParent(parent: FormGroup|FormArray): void {\n    this._parent = parent;\n  }\n\n  /**\n   * Sets the value of the control. Abstract method (implemented in sub-classes).\n   */\n  abstract setValue(value: any, options?: Object): void;\n\n  /**\n   * Patches the value of the control. Abstract method (implemented in sub-classes).\n   */\n  abstract patchValue(value: any, options?: Object): void;\n\n  /**\n   * Resets the control. Abstract method (implemented in sub-classes).\n   */\n  abstract reset(value?: any, options?: Object): void;\n\n  /**\n   * Recalculates the value and validation status of the control.\n   *\n   * By default, it also updates the value and validity of its ancestors.\n   *\n   * @param opts Configuration options determine how the control propagates changes and emits events\n   * after updates and validity checks are applied.\n   * * `onlySelf`: When true, only update this control. When false or not supplied,\n   * update all direct ancestors. Default is false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control is updated.\n   * When false, no events are emitted.\n   */\n  updateValueAndValidity(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._setInitialStatus();\n    this._updateValue();\n\n    if (this.enabled) {\n      this._cancelExistingSubscription();\n      (this as {errors: ValidationErrors | null}).errors = this._runValidator();\n      (this as {status: string}).status = this._calculateStatus();\n\n      if (this.status === VALID || this.status === PENDING) {\n        this._runAsyncValidator(opts.emitEvent);\n      }\n    }\n\n    if (opts.emitEvent !== false) {\n      (this.valueChanges as EventEmitter<any>).emit(this.value);\n      (this.statusChanges as EventEmitter<string>).emit(this.status);\n    }\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.updateValueAndValidity(opts);\n    }\n  }\n\n  /** @internal */\n  _updateTreeValidity(opts: {emitEvent?: boolean} = {emitEvent: true}) {\n    this._forEachChild((ctrl: AbstractControl) => ctrl._updateTreeValidity(opts));\n    this.updateValueAndValidity({onlySelf: true, emitEvent: opts.emitEvent});\n  }\n\n  private _setInitialStatus() {\n    (this as {status: string}).status = this._allControlsDisabled() ? DISABLED : VALID;\n  }\n\n  private _runValidator(): ValidationErrors|null {\n    return this.validator ? this.validator(this) : null;\n  }\n\n  private _runAsyncValidator(emitEvent?: boolean): void {\n    if (this.asyncValidator) {\n      (this as {status: string}).status = PENDING;\n      this._hasOwnPendingAsyncValidator = true;\n      const obs = toObservable(this.asyncValidator(this));\n      this._asyncValidationSubscription = obs.subscribe((errors: ValidationErrors|null) => {\n        this._hasOwnPendingAsyncValidator = false;\n        // This will trigger the recalculation of the validation status, which depends on\n        // the state of the asynchronous validation (whether it is in progress or not). So, it is\n        // necessary that we have updated the `_hasOwnPendingAsyncValidator` boolean flag first.\n        this.setErrors(errors, {emitEvent});\n      });\n    }\n  }\n\n  private _cancelExistingSubscription(): void {\n    if (this._asyncValidationSubscription) {\n      this._asyncValidationSubscription.unsubscribe();\n      this._hasOwnPendingAsyncValidator = false;\n    }\n  }\n\n  /**\n   * Sets errors on a form control when running validations manually, rather than automatically.\n   *\n   * Calling `setErrors` also updates the validity of the parent control.\n   *\n   * @usageNotes\n   *\n   * ### Manually set the errors for a control\n   *\n   * ```\n   * const login = new FormControl('someLogin');\n   * login.setErrors({\n   *   notUnique: true\n   * });\n   *\n   * expect(login.valid).toEqual(false);\n   * expect(login.errors).toEqual({ notUnique: true });\n   *\n   * login.setValue('someOtherLogin');\n   *\n   * expect(login.valid).toEqual(true);\n   * ```\n   */\n  setErrors(errors: ValidationErrors|null, opts: {emitEvent?: boolean} = {}): void {\n    (this as {errors: ValidationErrors | null}).errors = errors;\n    this._updateControlsErrors(opts.emitEvent !== false);\n  }\n\n  /**\n   * Retrieves a child control given the control's name or path.\n   *\n   * @param path A dot-delimited string or array of string/number values that define the path to the\n   * control.\n   *\n   * @usageNotes\n   * ### Retrieve a nested control\n   *\n   * For example, to get a `name` control nested within a `person` sub-group:\n   *\n   * * `this.form.get('person.name');`\n   *\n   * -OR-\n   *\n   * * `this.form.get(['person', 'name']);`\n   */\n  get(path: Array<string|number>|string): AbstractControl|null {\n    return _find(this, path, '.');\n  }\n\n  /**\n   * @description\n   * Reports error data for the control with the given path.\n   *\n   * @param errorCode The code of the error to check\n   * @param path A list of control names that designates how to move from the current control\n   * to the control that should be queried for errors.\n   *\n   * @usageNotes\n   * For example, for the following `FormGroup`:\n   *\n   * ```\n   * form = new FormGroup({\n   *   address: new FormGroup({ street: new FormControl() })\n   * });\n   * ```\n   *\n   * The path to the 'street' control from the root form would be 'address' -> 'street'.\n   *\n   * It can be provided to this method in one of two formats:\n   *\n   * 1. An array of string control names, e.g. `['address', 'street']`\n   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n   *\n   * @returns error data for that particular error. If the control or error is not present,\n   * null is returned.\n   */\n  getError(errorCode: string, path?: Array<string|number>|string): any {\n    const control = path ? this.get(path) : this;\n    return control && control.errors ? control.errors[errorCode] : null;\n  }\n\n  /**\n   * @description\n   * Reports whether the control with the given path has the error specified.\n   *\n   * @param errorCode The code of the error to check\n   * @param path A list of control names that designates how to move from the current control\n   * to the control that should be queried for errors.\n   *\n   * @usageNotes\n   * For example, for the following `FormGroup`:\n   *\n   * ```\n   * form = new FormGroup({\n   *   address: new FormGroup({ street: new FormControl() })\n   * });\n   * ```\n   *\n   * The path to the 'street' control from the root form would be 'address' -> 'street'.\n   *\n   * It can be provided to this method in one of two formats:\n   *\n   * 1. An array of string control names, e.g. `['address', 'street']`\n   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n   *\n   * If no path is given, this method checks for the error on the current control.\n   *\n   * @returns whether the given error is present in the control at the given path.\n   *\n   * If the control is not present, false is returned.\n   */\n  hasError(errorCode: string, path?: Array<string|number>|string): boolean {\n    return !!this.getError(errorCode, path);\n  }\n\n  /**\n   * Retrieves the top-level ancestor of this control.\n   */\n  get root(): AbstractControl {\n    let x: AbstractControl = this;\n\n    while (x._parent) {\n      x = x._parent;\n    }\n\n    return x;\n  }\n\n  /** @internal */\n  _updateControlsErrors(emitEvent: boolean): void {\n    (this as {status: string}).status = this._calculateStatus();\n\n    if (emitEvent) {\n      (this.statusChanges as EventEmitter<string>).emit(this.status);\n    }\n\n    if (this._parent) {\n      this._parent._updateControlsErrors(emitEvent);\n    }\n  }\n\n  /** @internal */\n  _initObservables() {\n    (this as {valueChanges: Observable<any>}).valueChanges = new EventEmitter();\n    (this as {statusChanges: Observable<any>}).statusChanges = new EventEmitter();\n  }\n\n\n  private _calculateStatus(): string {\n    if (this._allControlsDisabled()) return DISABLED;\n    if (this.errors) return INVALID;\n    if (this._hasOwnPendingAsyncValidator || this._anyControlsHaveStatus(PENDING)) return PENDING;\n    if (this._anyControlsHaveStatus(INVALID)) return INVALID;\n    return VALID;\n  }\n\n  /** @internal */\n  abstract _updateValue(): void;\n\n  /** @internal */\n  abstract _forEachChild(cb: Function): void;\n\n  /** @internal */\n  abstract _anyControls(condition: Function): boolean;\n\n  /** @internal */\n  abstract _allControlsDisabled(): boolean;\n\n  /** @internal */\n  abstract _syncPendingControls(): boolean;\n\n  /** @internal */\n  _anyControlsHaveStatus(status: string): boolean {\n    return this._anyControls((control: AbstractControl) => control.status === status);\n  }\n\n  /** @internal */\n  _anyControlsDirty(): boolean {\n    return this._anyControls((control: AbstractControl) => control.dirty);\n  }\n\n  /** @internal */\n  _anyControlsTouched(): boolean {\n    return this._anyControls((control: AbstractControl) => control.touched);\n  }\n\n  /** @internal */\n  _updatePristine(opts: {onlySelf?: boolean} = {}): void {\n    (this as {pristine: boolean}).pristine = !this._anyControlsDirty();\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updatePristine(opts);\n    }\n  }\n\n  /** @internal */\n  _updateTouched(opts: {onlySelf?: boolean} = {}): void {\n    (this as {touched: boolean}).touched = this._anyControlsTouched();\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updateTouched(opts);\n    }\n  }\n\n  /** @internal */\n  _onDisabledChange: Function[] = [];\n\n  /** @internal */\n  _isBoxedValue(formState: any): boolean {\n    return typeof formState === 'object' && formState !== null &&\n        Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n  }\n\n  /** @internal */\n  _registerOnCollectionChange(fn: () => void): void {\n    this._onCollectionChange = fn;\n  }\n\n  /** @internal */\n  _setUpdateStrategy(opts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null): void {\n    if (isOptionsObj(opts) && opts.updateOn != null) {\n      this._updateOn = opts.updateOn!;\n    }\n  }\n\n  /**\n   * Check to see if parent has been marked artificially dirty.\n   *\n   * @internal\n   */\n  private _parentMarkedDirty(onlySelf?: boolean): boolean {\n    const parentDirty = this._parent && this._parent.dirty;\n    return !onlySelf && !!parentDirty && !this._parent!._anyControlsDirty();\n  }\n}\n\n/**\n * Tracks the value and validation status of an individual form control.\n *\n * This is one of the three fundamental building blocks of Angular forms, along with\n * `FormGroup` and `FormArray`. It extends the `AbstractControl` class that\n * implements most of the base functionality for accessing the value, validation status,\n * user interactions and events. See [usage examples below](#usage-notes).\n *\n * @see `AbstractControl`\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see [Usage Notes](#usage-notes)\n *\n * @usageNotes\n *\n * ### Initializing Form Controls\n *\n * Instantiate a `FormControl`, with an initial value.\n *\n * ```ts\n * const control = new FormControl('some value');\n * console.log(control.value);     // 'some value'\n *```\n *\n * The following example initializes the control with a form state object. The `value`\n * and `disabled` keys are required in this case.\n *\n * ```ts\n * const control = new FormControl({ value: 'n/a', disabled: true });\n * console.log(control.value);     // 'n/a'\n * console.log(control.status);    // 'DISABLED'\n * ```\n *\n * The following example initializes the control with a sync validator.\n *\n * ```ts\n * const control = new FormControl('', Validators.required);\n * console.log(control.value);      // ''\n * console.log(control.status);     // 'INVALID'\n * ```\n *\n * The following example initializes the control using an options object.\n *\n * ```ts\n * const control = new FormControl('', {\n *    validators: Validators.required,\n *    asyncValidators: myAsyncValidator\n * });\n * ```\n *\n * ### Configure the control to update on a blur event\n *\n * Set the `updateOn` option to `'blur'` to update on the blur `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'blur' });\n * ```\n *\n * ### Configure the control to update on a submit event\n *\n * Set the `updateOn` option to `'submit'` to update on a submit `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'submit' });\n * ```\n *\n * ### Reset the control back to an initial value\n *\n * You reset to a specific form state by passing through a standalone\n * value or a form state object that contains both a value and a disabled state\n * (these are the only two properties that cannot be calculated).\n *\n * ```ts\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n *\n * control.reset('Drew');\n *\n * console.log(control.value); // 'Drew'\n * ```\n *\n * ### Reset the control back to an initial value and disabled\n *\n * ```\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n * console.log(control.status); // 'VALID'\n *\n * control.reset({ value: 'Drew', disabled: true });\n *\n * console.log(control.value); // 'Drew'\n * console.log(control.status); // 'DISABLED'\n * ```\n *\n * @publicApi\n */\nexport class FormControl extends AbstractControl {\n  /** @internal */\n  _onChange: Function[] = [];\n\n  /** @internal */\n  _pendingValue: any;\n\n  /** @internal */\n  _pendingChange: any;\n\n  /**\n   * Creates a new `FormControl` instance.\n   *\n   * @param formState Initializes the control with an initial value,\n   * or an object that defines the initial value and disabled state.\n   *\n   * @param validatorOrOpts A synchronous validator function, or an array of\n   * such functions, or an `AbstractControlOptions` object that contains validation functions\n   * and a validation trigger.\n   *\n   * @param asyncValidator A single async validator or array of async validator functions\n   *\n   */\n  constructor(\n      formState: any = null,\n      validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null) {\n    super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n    this._applyFormState(formState);\n    this._setUpdateStrategy(validatorOrOpts);\n    this._initObservables();\n    this.updateValueAndValidity({\n      onlySelf: true,\n      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n      // `VALID` or `INVALID`.\n      // The status should be broadcasted via the `statusChanges` observable, so we set `emitEvent`\n      // to `true` to allow that during the control creation process.\n      emitEvent: !!asyncValidator\n    });\n  }\n\n  /**\n   * Sets a new value for the form control.\n   *\n   * @param value The new value for the control.\n   * @param options Configuration options that determine how the control propagates changes\n   * and emits events when the value changes.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n   * false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control value is updated.\n   * When false, no events are emitted.\n   * * `emitModelToViewChange`: When true or not supplied  (the default), each change triggers an\n   * `onChange` event to\n   * update the view.\n   * * `emitViewToModelChange`: When true or not supplied (the default), each change triggers an\n   * `ngModelChange`\n   * event to update the model.\n   *\n   */\n  setValue(value: any, options: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  } = {}): void {\n    (this as {value: any}).value = this._pendingValue = value;\n    if (this._onChange.length && options.emitModelToViewChange !== false) {\n      this._onChange.forEach(\n          (changeFn) => changeFn(this.value, options.emitViewToModelChange !== false));\n    }\n    this.updateValueAndValidity(options);\n  }\n\n  /**\n   * Patches the value of a control.\n   *\n   * This function is functionally the same as {@link FormControl#setValue setValue} at this level.\n   * It exists for symmetry with {@link FormGroup#patchValue patchValue} on `FormGroups` and\n   * `FormArrays`, where it does behave differently.\n   *\n   * @see `setValue` for options\n   */\n  patchValue(value: any, options: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  } = {}): void {\n    this.setValue(value, options);\n  }\n\n  /**\n   * Resets the form control, marking it `pristine` and `untouched`, and setting\n   * the value to null.\n   *\n   * @param formState Resets the control with an initial value,\n   * or an object that defines the initial value and disabled state.\n   *\n   * @param options Configuration options that determine how the control propagates changes\n   * and emits events after the value changes.\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n   * false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control is reset.\n   * When false, no events are emitted.\n   *\n   */\n  reset(formState: any = null, options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._applyFormState(formState);\n    this.markAsPristine(options);\n    this.markAsUntouched(options);\n    this.setValue(this.value, options);\n    this._pendingChange = false;\n  }\n\n  /**\n   * @internal\n   */\n  _updateValue() {}\n\n  /**\n   * @internal\n   */\n  _anyControls(condition: Function): boolean {\n    return false;\n  }\n\n  /**\n   * @internal\n   */\n  _allControlsDisabled(): boolean {\n    return this.disabled;\n  }\n\n  /**\n   * Register a listener for change events.\n   *\n   * @param fn The method that is called when the value changes\n   */\n  registerOnChange(fn: Function): void {\n    this._onChange.push(fn);\n  }\n\n  /**\n   * Internal function to unregister a change events listener.\n   * @internal\n   */\n  _unregisterOnChange(fn: Function): void {\n    removeListItem(this._onChange, fn);\n  }\n\n  /**\n   * Register a listener for disabled events.\n   *\n   * @param fn The method that is called when the disabled status changes.\n   */\n  registerOnDisabledChange(fn: (isDisabled: boolean) => void): void {\n    this._onDisabledChange.push(fn);\n  }\n\n  /**\n   * Internal function to unregister a disabled event listener.\n   * @internal\n   */\n  _unregisterOnDisabledChange(fn: (isDisabled: boolean) => void): void {\n    removeListItem(this._onDisabledChange, fn);\n  }\n\n  /**\n   * @internal\n   */\n  _forEachChild(cb: Function): void {}\n\n  /** @internal */\n  _syncPendingControls(): boolean {\n    if (this.updateOn === 'submit') {\n      if (this._pendingDirty) this.markAsDirty();\n      if (this._pendingTouched) this.markAsTouched();\n      if (this._pendingChange) {\n        this.setValue(this._pendingValue, {onlySelf: true, emitModelToViewChange: false});\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private _applyFormState(formState: any) {\n    if (this._isBoxedValue(formState)) {\n      (this as {value: any}).value = this._pendingValue = formState.value;\n      formState.disabled ? this.disable({onlySelf: true, emitEvent: false}) :\n                           this.enable({onlySelf: true, emitEvent: false});\n    } else {\n      (this as {value: any}).value = this._pendingValue = formState;\n    }\n  }\n}\n\n/**\n * Tracks the value and validity state of a group of `FormControl` instances.\n *\n * A `FormGroup` aggregates the values of each child `FormControl` into one object,\n * with each control name as the key.  It calculates its status by reducing the status values\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormArray`.\n *\n * When instantiating a `FormGroup`, pass in a collection of child controls as the first\n * argument. The key for each child registers the name for the control.\n *\n * @usageNotes\n *\n * ### Create a form group with 2 controls\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * ### Create a form group with a group-level validator\n *\n * You include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * Like `FormControl` instances, you choose to pass in\n * validators and async validators as part of an options object.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });\n * ```\n *\n * ### Set the updateOn property for all controls in a form group\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormGroup({\n *   one: new FormControl()\n * }, { updateOn: 'blur' });\n * ```\n *\n * @publicApi\n */\nexport class FormGroup extends AbstractControl {\n  /**\n   * Creates a new `FormGroup` instance.\n   *\n   * @param controls A collection of child controls. The key for each child is the name\n   * under which it is registered.\n   *\n   * @param validatorOrOpts A synchronous validator function, or an array of\n   * such functions, or an `AbstractControlOptions` object that contains validation functions\n   * and a validation trigger.\n   *\n   * @param asyncValidator A single async validator or array of async validator functions\n   *\n   */\n  constructor(\n      public controls: {[key: string]: AbstractControl},\n      validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null) {\n    super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n    this._initObservables();\n    this._setUpdateStrategy(validatorOrOpts);\n    this._setUpControls();\n    this.updateValueAndValidity({\n      onlySelf: true,\n      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n      // `VALID` or `INVALID`. The status should be broadcasted via the `statusChanges` observable,\n      // so we set `emitEvent` to `true` to allow that during the control creation process.\n      emitEvent: !!asyncValidator\n    });\n  }\n\n  /**\n   * Registers a control with the group's list of controls.\n   *\n   * This method does not update the value or validity of the control.\n   * Use {@link FormGroup#addControl addControl} instead.\n   *\n   * @param name The control name to register in the collection\n   * @param control Provides the control for the given name\n   */\n  registerControl(name: string, control: AbstractControl): AbstractControl {\n    if (this.controls[name]) return this.controls[name];\n    this.controls[name] = control;\n    control.setParent(this);\n    control._registerOnCollectionChange(this._onCollectionChange);\n    return control;\n  }\n\n  /**\n   * Add a control to this group.\n   *\n   * This method also updates the value and validity of the control.\n   *\n   * @param name The control name to add to the collection\n   * @param control Provides the control for the given name\n   */\n  addControl(name: string, control: AbstractControl): void {\n    this.registerControl(name, control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n\n  /**\n   * Remove a control from this group.\n   *\n   * @param name The control name to remove from the collection\n   */\n  removeControl(name: string): void {\n    if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {});\n    delete (this.controls[name]);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n\n  /**\n   * Replace an existing control.\n   *\n   * @param name The control name to replace in the collection\n   * @param control Provides the control for the given name\n   */\n  setControl(name: string, control: AbstractControl): void {\n    if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {});\n    delete (this.controls[name]);\n    if (control) this.registerControl(name, control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n\n  /**\n   * Check whether there is an enabled control with the given name in the group.\n   *\n   * Reports false for disabled controls. If you'd like to check for existence in the group\n   * only, use {@link AbstractControl#get get} instead.\n   *\n   * @param controlName The control name to check for existence in the collection\n   *\n   * @returns false for disabled controls, true otherwise.\n   */\n  contains(controlName: string): boolean {\n    return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n  }\n\n  /**\n   * Sets the value of the `FormGroup`. It accepts an object that matches\n   * the structure of the group, with control names as keys.\n   *\n   * @usageNotes\n   * ### Set the complete value for the form group\n   *\n   * ```\n   * const form = new FormGroup({\n   *   first: new FormControl(),\n   *   last: new FormControl()\n   * });\n   *\n   * console.log(form.value);   // {first: null, last: null}\n   *\n   * form.setValue({first: 'Nancy', last: 'Drew'});\n   * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n   * ```\n   *\n   * @throws When strict checks fail, such as setting the value of a control\n   * that doesn't exist or if you exclude a value of a control that does exist.\n   *\n   * @param value The new value for the control that matches the structure of the group.\n   * @param options Configuration options that determine how the control propagates changes\n   * and emits events after the value changes.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n   * false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control value is updated.\n   * When false, no events are emitted.\n   */\n  setValue(value: {[key: string]: any}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}):\n      void {\n    this._checkAllValuesPresent(value);\n    Object.keys(value).forEach(name => {\n      this._throwIfControlMissing(name);\n      this.controls[name].setValue(value[name], {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this.updateValueAndValidity(options);\n  }\n\n  /**\n   * Patches the value of the `FormGroup`. It accepts an object with control\n   * names as keys, and does its best to match the values to the correct controls\n   * in the group.\n   *\n   * It accepts both super-sets and sub-sets of the group without throwing an error.\n   *\n   * @usageNotes\n   * ### Patch the value for a form group\n   *\n   * ```\n   * const form = new FormGroup({\n   *    first: new FormControl(),\n   *    last: new FormControl()\n   * });\n   * console.log(form.value);   // {first: null, last: null}\n   *\n   * form.patchValue({first: 'Nancy'});\n   * console.log(form.value);   // {first: 'Nancy', last: null}\n   * ```\n   *\n   * @param value The object that matches the structure of the group.\n   * @param options Configuration options that determine how the control propagates changes and\n   * emits events after the value is patched.\n   * * `onlySelf`: When true, each change only affects this control and not its parent. Default is\n   * true.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control value is updated.\n   * When false, no events are emitted.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   */\n  patchValue(value: {[key: string]: any}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}):\n      void {\n    Object.keys(value).forEach(name => {\n      if (this.controls[name]) {\n        this.controls[name].patchValue(value[name], {onlySelf: true, emitEvent: options.emitEvent});\n      }\n    });\n    this.updateValueAndValidity(options);\n  }\n\n  /**\n   * Resets the `FormGroup`, marks all descendants `pristine` and `untouched` and sets\n   * the value of all descendants to null.\n   *\n   * You reset to a specific form state by passing in a map of states\n   * that matches the structure of your form, with control names as keys. The state\n   * is a standalone value or a form state object with both a value and a disabled\n   * status.\n   *\n   * @param value Resets the control with an initial value,\n   * or an object that defines the initial value and disabled state.\n   *\n   * @param options Configuration options that determine how the control propagates changes\n   * and emits events when the group is reset.\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n   * false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control is reset.\n   * When false, no events are emitted.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   *\n   * @usageNotes\n   *\n   * ### Reset the form group values\n   *\n   * ```ts\n   * const form = new FormGroup({\n   *   first: new FormControl('first name'),\n   *   last: new FormControl('last name')\n   * });\n   *\n   * console.log(form.value);  // {first: 'first name', last: 'last name'}\n   *\n   * form.reset({ first: 'name', last: 'last name' });\n   *\n   * console.log(form.value);  // {first: 'name', last: 'last name'}\n   * ```\n   *\n   * ### Reset the form group values and disabled status\n   *\n   * ```\n   * const form = new FormGroup({\n   *   first: new FormControl('first name'),\n   *   last: new FormControl('last name')\n   * });\n   *\n   * form.reset({\n   *   first: {value: 'name', disabled: true},\n   *   last: 'last'\n   * });\n   *\n   * console.log(form.value);  // {last: 'last'}\n   * console.log(form.get('first').status);  // 'DISABLED'\n   * ```\n   */\n  reset(value: any = {}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._forEachChild((control: AbstractControl, name: string) => {\n      control.reset(value[name], {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this._updatePristine(options);\n    this._updateTouched(options);\n    this.updateValueAndValidity(options);\n  }\n\n  /**\n   * The aggregate value of the `FormGroup`, including any disabled controls.\n   *\n   * Retrieves all values regardless of disabled status.\n   * The `value` property is the best way to get the value of the group, because\n   * it excludes disabled controls in the `FormGroup`.\n   */\n  getRawValue(): any {\n    return this._reduceChildren(\n        {}, (acc: {[k: string]: AbstractControl}, control: AbstractControl, name: string) => {\n          acc[name] = control instanceof FormControl ? control.value : (<any>control).getRawValue();\n          return acc;\n        });\n  }\n\n  /** @internal */\n  _syncPendingControls(): boolean {\n    let subtreeUpdated = this._reduceChildren(false, (updated: boolean, child: AbstractControl) => {\n      return child._syncPendingControls() ? true : updated;\n    });\n    if (subtreeUpdated) this.updateValueAndValidity({onlySelf: true});\n    return subtreeUpdated;\n  }\n\n  /** @internal */\n  _throwIfControlMissing(name: string): void {\n    if (!Object.keys(this.controls).length) {\n      throw new Error(`\n        There are no form controls registered with this group yet. If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n    }\n    if (!this.controls[name]) {\n      throw new Error(`Cannot find form control with name: ${name}.`);\n    }\n  }\n\n  /** @internal */\n  _forEachChild(cb: (v: any, k: string) => void): void {\n    Object.keys(this.controls).forEach(k => cb(this.controls[k], k));\n  }\n\n  /** @internal */\n  _setUpControls(): void {\n    this._forEachChild((control: AbstractControl) => {\n      control.setParent(this);\n      control._registerOnCollectionChange(this._onCollectionChange);\n    });\n  }\n\n  /** @internal */\n  _updateValue(): void {\n    (this as {value: any}).value = this._reduceValue();\n  }\n\n  /** @internal */\n  _anyControls(condition: Function): boolean {\n    for (const controlName of Object.keys(this.controls)) {\n      const control = this.controls[controlName];\n      if (this.contains(controlName) && condition(control)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal */\n  _reduceValue() {\n    return this._reduceChildren(\n        {}, (acc: {[k: string]: AbstractControl}, control: AbstractControl, name: string) => {\n          if (control.enabled || this.disabled) {\n            acc[name] = control.value;\n          }\n          return acc;\n        });\n  }\n\n  /** @internal */\n  _reduceChildren(initValue: any, fn: Function) {\n    let res = initValue;\n    this._forEachChild((control: AbstractControl, name: string) => {\n      res = fn(res, control, name);\n    });\n    return res;\n  }\n\n  /** @internal */\n  _allControlsDisabled(): boolean {\n    for (const controlName of Object.keys(this.controls)) {\n      if (this.controls[controlName].enabled) {\n        return false;\n      }\n    }\n    return Object.keys(this.controls).length > 0 || this.disabled;\n  }\n\n  /** @internal */\n  _checkAllValuesPresent(value: any): void {\n    this._forEachChild((control: AbstractControl, name: string) => {\n      if (value[name] === undefined) {\n        throw new Error(`Must supply a value for form control with name: '${name}'.`);\n      }\n    });\n  }\n}\n\n/**\n * Tracks the value and validity state of an array of `FormControl`,\n * `FormGroup` or `FormArray` instances.\n *\n * A `FormArray` aggregates the values of each child `FormControl` into an array.\n * It calculates its status by reducing the status values of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormGroup`.\n *\n * @usageNotes\n *\n * ### Create an array of form controls\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * ### Create a form array with array-level validators\n *\n * You include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n *\n * The two types of validators are passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n *\n * ### Set the updateOn property for all controls in a form array\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const arr = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n *\n * ### Adding or removing controls from a form array\n *\n * To change the controls in the array, use the `push`, `insert`, `removeAt` or `clear` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that result in strange and unexpected behavior such\n * as broken change detection.\n *\n * @publicApi\n */\nexport class FormArray extends AbstractControl {\n  /**\n   * Creates a new `FormArray` instance.\n   *\n   * @param controls An array of child controls. Each child control is given an index\n   * where it is registered.\n   *\n   * @param validatorOrOpts A synchronous validator function, or an array of\n   * such functions, or an `AbstractControlOptions` object that contains validation functions\n   * and a validation trigger.\n   *\n   * @param asyncValidator A single async validator or array of async validator functions\n   *\n   */\n  constructor(\n      public controls: AbstractControl[],\n      validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null) {\n    super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n    this._initObservables();\n    this._setUpdateStrategy(validatorOrOpts);\n    this._setUpControls();\n    this.updateValueAndValidity({\n      onlySelf: true,\n      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n      // `VALID` or `INVALID`.\n      // The status should be broadcasted via the `statusChanges` observable, so we set `emitEvent`\n      // to `true` to allow that during the control creation process.\n      emitEvent: !!asyncValidator\n    });\n  }\n\n  /**\n   * Get the `AbstractControl` at the given `index` in the array.\n   *\n   * @param index Index in the array to retrieve the control\n   */\n  at(index: number): AbstractControl {\n    return this.controls[index];\n  }\n\n  /**\n   * Insert a new `AbstractControl` at the end of the array.\n   *\n   * @param control Form control to be inserted\n   */\n  push(control: AbstractControl): void {\n    this.controls.push(control);\n    this._registerControl(control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n\n  /**\n   * Insert a new `AbstractControl` at the given `index` in the array.\n   *\n   * @param index Index in the array to insert the control\n   * @param control Form control to be inserted\n   */\n  insert(index: number, control: AbstractControl): void {\n    this.controls.splice(index, 0, control);\n\n    this._registerControl(control);\n    this.updateValueAndValidity();\n  }\n\n  /**\n   * Remove the control at the given `index` in the array.\n   *\n   * @param index Index in the array to remove the control\n   */\n  removeAt(index: number): void {\n    if (this.controls[index]) this.controls[index]._registerOnCollectionChange(() => {});\n    this.controls.splice(index, 1);\n    this.updateValueAndValidity();\n  }\n\n  /**\n   * Replace an existing control.\n   *\n   * @param index Index in the array to replace the control\n   * @param control The `AbstractControl` control to replace the existing control\n   */\n  setControl(index: number, control: AbstractControl): void {\n    if (this.controls[index]) this.controls[index]._registerOnCollectionChange(() => {});\n    this.controls.splice(index, 1);\n\n    if (control) {\n      this.controls.splice(index, 0, control);\n      this._registerControl(control);\n    }\n\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n\n  /**\n   * Length of the control array.\n   */\n  get length(): number {\n    return this.controls.length;\n  }\n\n  /**\n   * Sets the value of the `FormArray`. It accepts an array that matches\n   * the structure of the control.\n   *\n   * This method performs strict checks, and throws an error if you try\n   * to set the value of a control that doesn't exist or if you exclude the\n   * value of a control.\n   *\n   * @usageNotes\n   * ### Set the values for the controls in the form array\n   *\n   * ```\n   * const arr = new FormArray([\n   *   new FormControl(),\n   *   new FormControl()\n   * ]);\n   * console.log(arr.value);   // [null, null]\n   *\n   * arr.setValue(['Nancy', 'Drew']);\n   * console.log(arr.value);   // ['Nancy', 'Drew']\n   * ```\n   *\n   * @param value Array of values for the controls\n   * @param options Configure options that determine how the control propagates changes and\n   * emits events after the value changes\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n   * is false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control value is updated.\n   * When false, no events are emitted.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   */\n  setValue(value: any[], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._checkAllValuesPresent(value);\n    value.forEach((newValue: any, index: number) => {\n      this._throwIfControlMissing(index);\n      this.at(index).setValue(newValue, {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this.updateValueAndValidity(options);\n  }\n\n  /**\n   * Patches the value of the `FormArray`. It accepts an array that matches the\n   * structure of the control, and does its best to match the values to the correct\n   * controls in the group.\n   *\n   * It accepts both super-sets and sub-sets of the array without throwing an error.\n   *\n   * @usageNotes\n   * ### Patch the values for controls in a form array\n   *\n   * ```\n   * const arr = new FormArray([\n   *    new FormControl(),\n   *    new FormControl()\n   * ]);\n   * console.log(arr.value);   // [null, null]\n   *\n   * arr.patchValue(['Nancy']);\n   * console.log(arr.value);   // ['Nancy', null]\n   * ```\n   *\n   * @param value Array of latest values for the controls\n   * @param options Configure options that determine how the control propagates changes and\n   * emits events after the value changes\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n   * is false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control value is updated.\n   * When false, no events are emitted.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   */\n  patchValue(value: any[], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    value.forEach((newValue: any, index: number) => {\n      if (this.at(index)) {\n        this.at(index).patchValue(newValue, {onlySelf: true, emitEvent: options.emitEvent});\n      }\n    });\n    this.updateValueAndValidity(options);\n  }\n\n  /**\n   * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the\n   * value of all descendants to null or null maps.\n   *\n   * You reset to a specific form state by passing in an array of states\n   * that matches the structure of the control. The state is a standalone value\n   * or a form state object with both a value and a disabled status.\n   *\n   * @usageNotes\n   * ### Reset the values in a form array\n   *\n   * ```ts\n   * const arr = new FormArray([\n   *    new FormControl(),\n   *    new FormControl()\n   * ]);\n   * arr.reset(['name', 'last name']);\n   *\n   * console.log(this.arr.value);  // ['name', 'last name']\n   * ```\n   *\n   * ### Reset the values in a form array and the disabled status for the first control\n   *\n   * ```\n   * this.arr.reset([\n   *   {value: 'name', disabled: true},\n   *   'last'\n   * ]);\n   *\n   * console.log(this.arr.value);  // ['name', 'last name']\n   * console.log(this.arr.get(0).status);  // 'DISABLED'\n   * ```\n   *\n   * @param value Array of values for the controls\n   * @param options Configure options that determine how the control propagates changes and\n   * emits events after the value changes\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n   * is false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control is reset.\n   * When false, no events are emitted.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   */\n  reset(value: any = [], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._forEachChild((control: AbstractControl, index: number) => {\n      control.reset(value[index], {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this._updatePristine(options);\n    this._updateTouched(options);\n    this.updateValueAndValidity(options);\n  }\n\n  /**\n   * The aggregate value of the array, including any disabled controls.\n   *\n   * Reports all values regardless of disabled status.\n   * For enabled controls only, the `value` property is the best way to get the value of the array.\n   */\n  getRawValue(): any[] {\n    return this.controls.map((control: AbstractControl) => {\n      return control instanceof FormControl ? control.value : (<any>control).getRawValue();\n    });\n  }\n\n  /**\n   * Remove all controls in the `FormArray`.\n   *\n   * @usageNotes\n   * ### Remove all elements from a FormArray\n   *\n   * ```ts\n   * const arr = new FormArray([\n   *    new FormControl(),\n   *    new FormControl()\n   * ]);\n   * console.log(arr.length);  // 2\n   *\n   * arr.clear();\n   * console.log(arr.length);  // 0\n   * ```\n   *\n   * It's a simpler and more efficient alternative to removing all elements one by one:\n   *\n   * ```ts\n   * const arr = new FormArray([\n   *    new FormControl(),\n   *    new FormControl()\n   * ]);\n   *\n   * while (arr.length) {\n   *    arr.removeAt(0);\n   * }\n   * ```\n   */\n  clear(): void {\n    if (this.controls.length < 1) return;\n    this._forEachChild((control: AbstractControl) => control._registerOnCollectionChange(() => {}));\n    this.controls.splice(0);\n    this.updateValueAndValidity();\n  }\n\n  /** @internal */\n  _syncPendingControls(): boolean {\n    let subtreeUpdated = this.controls.reduce((updated: boolean, child: AbstractControl) => {\n      return child._syncPendingControls() ? true : updated;\n    }, false);\n    if (subtreeUpdated) this.updateValueAndValidity({onlySelf: true});\n    return subtreeUpdated;\n  }\n\n  /** @internal */\n  _throwIfControlMissing(index: number): void {\n    if (!this.controls.length) {\n      throw new Error(`\n        There are no form controls registered with this array yet. If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n    }\n    if (!this.at(index)) {\n      throw new Error(`Cannot find form control at index ${index}`);\n    }\n  }\n\n  /** @internal */\n  _forEachChild(cb: Function): void {\n    this.controls.forEach((control: AbstractControl, index: number) => {\n      cb(control, index);\n    });\n  }\n\n  /** @internal */\n  _updateValue(): void {\n    (this as {value: any}).value =\n        this.controls.filter((control) => control.enabled || this.disabled)\n            .map((control) => control.value);\n  }\n\n  /** @internal */\n  _anyControls(condition: Function): boolean {\n    return this.controls.some((control: AbstractControl) => control.enabled && condition(control));\n  }\n\n  /** @internal */\n  _setUpControls(): void {\n    this._forEachChild((control: AbstractControl) => this._registerControl(control));\n  }\n\n  /** @internal */\n  _checkAllValuesPresent(value: any): void {\n    this._forEachChild((control: AbstractControl, i: number) => {\n      if (value[i] === undefined) {\n        throw new Error(`Must supply a value for form control at index: ${i}.`);\n      }\n    });\n  }\n\n  /** @internal */\n  _allControlsDisabled(): boolean {\n    for (const control of this.controls) {\n      if (control.enabled) return false;\n    }\n    return this.controls.length > 0 || this.disabled;\n  }\n\n  private _registerControl(control: AbstractControl) {\n    control.setParent(this);\n    control._registerOnCollectionChange(this._onCollectionChange);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AfterViewInit, Directive, EventEmitter, forwardRef, Inject, Input, Optional, Self} from '@angular/core';\n\nimport {AbstractControl, FormControl, FormGroup, FormHooks} from '../model';\nimport {composeAsyncValidators, composeValidators, NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {ControlContainer} from './control_container';\nimport {Form} from './form_interface';\nimport {NgControl} from './ng_control';\nimport {NgModel} from './ng_model';\nimport {NgModelGroup} from './ng_model_group';\nimport {removeListItem, setUpControl, setUpFormContainer, syncPendingControls} from './shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nexport const formDirectiveProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgForm)\n};\n\nconst resolvedPromise = (() => Promise.resolve(null))();\n\n/**\n * @description\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You optionally export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * gives you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, use `NgModel` with a `name`\n * attribute. You may use `NgModelGroup` to create sub-groups within the form.\n *\n * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event emits the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * To import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * @usageNotes\n *\n * ### Listening for form submission\n *\n * The following example shows how to capture the form values from the \"ngSubmit\" event.\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Setting the update options\n *\n * The following example shows you how to change the \"updateOn\" option from its default using\n * ngFormOptions.\n *\n * ```html\n * <form [ngFormOptions]=\"{updateOn: 'blur'}\">\n *    <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n * </form>\n * ```\n *\n * ### Native DOM validation UI\n *\n * In order to prevent the native DOM form validation UI from interfering with Angular's form\n * validation, Angular automatically adds the `novalidate` attribute on any `<form>` whenever\n * `FormModule` or `ReactiveFormModule` are imported into the application.\n * If you want to explicitly enable native DOM validation UI with Angular forms, you can add the\n * `ngNativeValidate` attribute to the `<form>` element:\n *\n * ```html\n * <form ngNativeValidate>\n *   ...\n * </form>\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector: 'form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  outputs: ['ngSubmit'],\n  exportAs: 'ngForm'\n})\nexport class NgForm extends ControlContainer implements Form, AfterViewInit {\n  /**\n   * @description\n   * Returns whether the form submission has been triggered.\n   */\n  public readonly submitted: boolean = false;\n\n  private _directives: NgModel[] = [];\n\n  /**\n   * @description\n   * The `FormGroup` instance created for this form.\n   */\n  form: FormGroup;\n\n  /**\n   * @description\n   * Event emitter for the \"ngSubmit\" event\n   */\n  ngSubmit = new EventEmitter();\n\n  /**\n   * @description\n   * Tracks options for the `NgForm` instance.\n   *\n   * **updateOn**: Sets the default `updateOn` value for all child `NgModels` below it\n   * unless explicitly set by a child `NgModel` using `ngModelOptions`). Defaults to 'change'.\n   * Possible values: `'change'` | `'blur'` | `'submit'`.\n   *\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('ngFormOptions') options!: {updateOn?: FormHooks};\n\n  constructor(\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator|ValidatorFn)[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators:\n          (AsyncValidator|AsyncValidatorFn)[]) {\n    super();\n    this.form =\n        new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n  }\n\n  /** @nodoc */\n  ngAfterViewInit() {\n    this._setUpdateStrategy();\n  }\n\n  /**\n   * @description\n   * The directive instance.\n   */\n  get formDirective(): Form {\n    return this;\n  }\n\n  /**\n   * @description\n   * The internal `FormGroup` instance.\n   */\n  get control(): FormGroup {\n    return this.form;\n  }\n\n  /**\n   * @description\n   * Returns an array representing the path to this group. Because this directive\n   * always lives at the top level of a form, it is always an empty array.\n   */\n  get path(): string[] {\n    return [];\n  }\n\n  /**\n   * @description\n   * Returns a map of the controls in this group.\n   */\n  get controls(): {[key: string]: AbstractControl} {\n    return this.form.controls;\n  }\n\n  /**\n   * @description\n   * Method that sets up the control directive in this group, re-calculates its value\n   * and validity, and adds the instance to the internal list of directives.\n   *\n   * @param dir The `NgModel` directive instance.\n   */\n  addControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      (dir as {control: FormControl}).control =\n          <FormControl>container.registerControl(dir.name, dir.control);\n      setUpControl(dir.control, dir);\n      dir.control.updateValueAndValidity({emitEvent: false});\n      this._directives.push(dir);\n    });\n  }\n\n  /**\n   * @description\n   * Retrieves the `FormControl` instance from the provided `NgModel` directive.\n   *\n   * @param dir The `NgModel` directive instance.\n   */\n  getControl(dir: NgModel): FormControl {\n    return <FormControl>this.form.get(dir.path);\n  }\n\n  /**\n   * @description\n   * Removes the `NgModel` instance from the internal list of directives\n   *\n   * @param dir The `NgModel` directive instance.\n   */\n  removeControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n      removeListItem(this._directives, dir);\n    });\n  }\n\n  /**\n   * @description\n   * Adds a new `NgModelGroup` directive instance to the form.\n   *\n   * @param dir The `NgModelGroup` directive instance.\n   */\n  addFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      const group = new FormGroup({});\n      setUpFormContainer(group, dir);\n      container.registerControl(dir.name, group);\n      group.updateValueAndValidity({emitEvent: false});\n    });\n  }\n\n  /**\n   * @description\n   * Removes the `NgModelGroup` directive instance from the form.\n   *\n   * @param dir The `NgModelGroup` directive instance.\n   */\n  removeFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n    });\n  }\n\n  /**\n   * @description\n   * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance\n   *\n   * @param dir The `NgModelGroup` directive instance.\n   */\n  getFormGroup(dir: NgModelGroup): FormGroup {\n    return <FormGroup>this.form.get(dir.path);\n  }\n\n  /**\n   * Sets the new value for the provided `NgControl` directive.\n   *\n   * @param dir The `NgControl` directive instance.\n   * @param value The new value for the directive's control.\n   */\n  updateModel(dir: NgControl, value: any): void {\n    resolvedPromise.then(() => {\n      const ctrl = <FormControl>this.form.get(dir.path!);\n      ctrl.setValue(value);\n    });\n  }\n\n  /**\n   * @description\n   * Sets the value for this `FormGroup`.\n   *\n   * @param value The new value\n   */\n  setValue(value: {[key: string]: any}): void {\n    this.control.setValue(value);\n  }\n\n  /**\n   * @description\n   * Method called when the \"submit\" event is triggered on the form.\n   * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n   *\n   * @param $event The \"submit\" event object\n   */\n  onSubmit($event: Event): boolean {\n    (this as {submitted: boolean}).submitted = true;\n    syncPendingControls(this.form, this._directives);\n    this.ngSubmit.emit($event);\n    return false;\n  }\n\n  /**\n   * @description\n   * Method called when the \"reset\" event is triggered on the form.\n   */\n  onReset(): void {\n    this.resetForm();\n  }\n\n  /**\n   * @description\n   * Resets the form to an initial value and resets its submitted status.\n   *\n   * @param value The new value for the form.\n   */\n  resetForm(value: any = undefined): void {\n    this.form.reset(value);\n    (this as {submitted: boolean}).submitted = false;\n  }\n\n  private _setUpdateStrategy() {\n    if (this.options && this.options.updateOn != null) {\n      this.form._updateOn = this.options.updateOn;\n    }\n  }\n\n  /** @internal */\n  _findContainer(path: string[]): FormGroup {\n    path.pop();\n    return path.length ? <FormGroup>this.form.get(path) : this.form;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, OnDestroy, OnInit} from '@angular/core';\n\nimport {FormGroup} from '../model';\n\nimport {ControlContainer} from './control_container';\nimport {Form} from './form_interface';\nimport {controlPath} from './shared';\n\n\n\n/**\n * @description\n * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.\n *\n * @publicApi\n */\n@Directive()\nexport class AbstractFormGroupDirective extends ControlContainer implements OnInit, OnDestroy {\n  /**\n   * @description\n   * The parent control for the group\n   *\n   * @internal\n   */\n  // TODO(issue/24571): remove '!'.\n  _parent!: ControlContainer;\n\n  /** @nodoc */\n  ngOnInit(): void {\n    this._checkParentType();\n    // Register the group with its parent group.\n    this.formDirective!.addFormGroup(this);\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    if (this.formDirective) {\n      // Remove the group from its parent group.\n      this.formDirective.removeFormGroup(this);\n    }\n  }\n\n  /**\n   * @description\n   * The `FormGroup` bound to this directive.\n   */\n  get control(): FormGroup {\n    return this.formDirective!.getFormGroup(this);\n  }\n\n  /**\n   * @description\n   * The path to this group from the top-level directive.\n   */\n  get path(): string[] {\n    return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n  }\n\n  /**\n   * @description\n   * The top-level directive for this group if present, otherwise null.\n   */\n  get formDirective(): Form|null {\n    return this._parent ? this._parent.formDirective : null;\n  }\n\n  /** @internal */\n  _checkParentType(): void {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormErrorExamples as Examples} from './error_examples';\n\nexport class TemplateDrivenErrors {\n  static modelParentException(): void {\n    throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      ${Examples.formControlName}\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      ${Examples.ngModelWithFormGroup}`);\n  }\n\n  static formGroupNameException(): void {\n    throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      ${Examples.formGroupName}\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      ${Examples.ngModelGroup}`);\n  }\n\n  static missingNameException() {\n    throw new Error(\n        `If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">`);\n  }\n\n  static modelGroupParentException() {\n    throw new Error(`\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      ${Examples.formGroupName}\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      ${Examples.ngModelGroup}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, forwardRef, Host, Inject, Input, OnDestroy, OnInit, Optional, Self, SkipSelf} from '@angular/core';\n\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {ControlContainer} from './control_container';\nimport {NgForm} from './ng_form';\nimport {TemplateDrivenErrors} from './template_driven_errors';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nexport const modelGroupProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgModelGroup)\n};\n\n/**\n * @description\n * Creates and binds a `FormGroup` instance to a DOM element.\n *\n * This directive can only be used as a child of `NgForm` (within `<form>` tags).\n *\n * Use this directive to validate a sub-group of your form separately from the\n * rest of your form, or if some values in your domain model make more sense\n * to consume together in a nested object.\n *\n * Provide a name for the sub-group and it will become the key\n * for the sub-group in the form's full value. If you need direct access, export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * @usageNotes\n *\n * ### Consuming controls in a grouping\n *\n * The following example shows you how to combine controls together in a sub-group\n * of the form.\n *\n * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup'})\nexport class NgModelGroup extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n  /**\n   * @description\n   * Tracks the name of the `NgModelGroup` bound to the directive. The name corresponds\n   * to a key in the parent `NgForm`.\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('ngModelGroup') name!: string;\n\n  constructor(\n      @Host() @SkipSelf() parent: ControlContainer,\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator|ValidatorFn)[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators:\n          (AsyncValidator|AsyncValidatorFn)[]) {\n    super();\n    this._parent = parent;\n    this._setValidators(validators);\n    this._setAsyncValidators(asyncValidators);\n  }\n\n  /** @internal */\n  _checkParentType(): void {\n    if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm) &&\n        (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      TemplateDrivenErrors.modelGroupParentException();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, forwardRef, Host, Inject, Input, OnChanges, OnDestroy, Optional, Output, Self, SimpleChanges} from '@angular/core';\n\nimport {FormControl, FormHooks} from '../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\nimport {NgForm} from './ng_form';\nimport {NgModelGroup} from './ng_model_group';\nimport {controlPath, isPropertyUpdated, selectValueAccessor, setUpControl} from './shared';\nimport {TemplateDrivenErrors} from './template_driven_errors';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nexport const formControlBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => NgModel)\n};\n\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have an old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel`s have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nconst resolvedPromise = (() => Promise.resolve(null))();\n\n/**\n * @description\n * Creates a `FormControl` instance from a domain model and binds it\n * to a form control element.\n *\n * The `FormControl` instance tracks the value, user interaction, and\n * validation status of the control and keeps the view synced with the model. If used\n * within a parent form, the directive also registers itself with the form as a child\n * control.\n *\n * This directive is used by itself or as part of a larger form. Use the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional `Input`. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the domain model's value in the component\n * class sets the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-in-a-box syntax'), the value in the UI always syncs back to\n * the domain model in your class.\n *\n * To inspect the properties of the associated `FormControl` (like the validity state),\n * export the directive into a local template variable using `ngModel` as the key (ex:\n * `#myVar=\"ngModel\"`). You can then access the control using the directive's `control` property.\n * However, the most commonly used properties (like `valid` and `dirty`) also exist on the control\n * for direct access. See a full list of properties directly available in\n * `AbstractControlDirective`.\n *\n * @see `RadioControlValueAccessor`\n * @see `SelectControlValueAccessor`\n *\n * @usageNotes\n *\n * ### Using ngModel on a standalone control\n *\n * The following examples show a simple standalone control using `ngModel`:\n *\n * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,\n * as the parent form syncs the value for you. You access its properties by exporting it into a\n * local template variable using `ngForm` such as (`#f=\"ngForm\"`). Use the variable where\n * needed on form submission.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * ### Using ngModel within a form\n *\n * The following example shows controls using `ngModel` within a form:\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Using a standalone ngModel within a group\n *\n * The following example shows you how to use a standalone ngModel control\n * within a form. This controls the display of the form, but doesn't contain form data.\n *\n * ```html\n * <form>\n *   <input name=\"login\" ngModel placeholder=\"Login\">\n *   <input type=\"checkbox\" ngModel [ngModelOptions]=\"{standalone: true}\"> Show more options?\n * </form>\n * <!-- form value: {login: ''} -->\n * ```\n *\n * ### Setting the ngModel `name` attribute through options\n *\n * The following example shows you an alternate way to set the name attribute. Here,\n * an attribute identified as name is used within a custom form control component. To still be able\n * to specify the NgModel's name, you must specify it using the `ngModelOptions` input instead.\n *\n * ```html\n * <form>\n *   <my-custom-form-control name=\"Nancy\" ngModel [ngModelOptions]=\"{name: 'user'}\">\n *   </my-custom-form-control>\n * </form>\n * <!-- form value: {user: ''} -->\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[ngModel]:not([formControlName]):not([formControl])',\n  providers: [formControlBinding],\n  exportAs: 'ngModel'\n})\nexport class NgModel extends NgControl implements OnChanges, OnDestroy {\n  public readonly control: FormControl = new FormControl();\n\n  // At runtime we coerce arbitrary values assigned to the \"disabled\" input to a \"boolean\".\n  // This is not reflected in the type of the property because outside of templates, consumers\n  // should only deal with booleans. In templates, a string is allowed for convenience and to\n  // match the native \"disabled attribute\" semantics which can be observed on input elements.\n  // This static member tells the compiler that values of type \"string\" can also be assigned\n  // to the input in a template.\n  /** @nodoc */\n  static ngAcceptInputType_isDisabled: boolean|string;\n\n  /** @internal */\n  _registered = false;\n\n  /**\n   * Internal reference to the view model value.\n   * @nodoc\n   */\n  viewModel: any;\n\n  /**\n   * @description\n   * Tracks the name bound to the directive. If a parent form exists, it\n   * uses this name as a key to retrieve this control's value.\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input() name!: string;\n\n  /**\n   * @description\n   * Tracks whether the control is disabled.\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('disabled') isDisabled!: boolean;\n\n  /**\n   * @description\n   * Tracks the value bound to this directive.\n   */\n  @Input('ngModel') model: any;\n\n  /**\n   * @description\n   * Tracks the configuration options for this `ngModel` instance.\n   *\n   * **name**: An alternative to setting the name attribute on the form control element. See\n   * the [example](api/forms/NgModel#using-ngmodel-on-a-standalone-control) for using `NgModel`\n   * as a standalone control.\n   *\n   * **standalone**: When set to true, the `ngModel` will not register itself with its parent form,\n   * and acts as if it's not in the form. Defaults to false. If no parent form exists, this option\n   * has no effect.\n   *\n   * **updateOn**: Defines the event upon which the form control value and validity update.\n   * Defaults to 'change'. Possible values: `'change'` | `'blur'` | `'submit'`.\n   *\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('ngModelOptions') options!: {name?: string, standalone?: boolean, updateOn?: FormHooks};\n\n  /**\n   * @description\n   * Event emitter for producing the `ngModelChange` event after\n   * the view model updates.\n   */\n  @Output('ngModelChange') update = new EventEmitter();\n\n  constructor(\n      @Optional() @Host() parent: ControlContainer,\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator|ValidatorFn)[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators:\n          (AsyncValidator|AsyncValidatorFn)[],\n      @Optional() @Self() @Inject(NG_VALUE_ACCESSOR) valueAccessors: ControlValueAccessor[]) {\n    super();\n    this._parent = parent;\n    this._setValidators(validators);\n    this._setAsyncValidators(asyncValidators);\n    this.valueAccessor = selectValueAccessor(this, valueAccessors);\n  }\n\n  /** @nodoc */\n  ngOnChanges(changes: SimpleChanges) {\n    this._checkForErrors();\n    if (!this._registered) this._setUpControl();\n    if ('isDisabled' in changes) {\n      this._updateDisabled(changes);\n    }\n\n    if (isPropertyUpdated(changes, this.viewModel)) {\n      this._updateValue(this.model);\n      this.viewModel = this.model;\n    }\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    this.formDirective && this.formDirective.removeControl(this);\n  }\n\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n  get path(): string[] {\n    return this._parent ? controlPath(this.name, this._parent) : [this.name];\n  }\n\n  /**\n   * @description\n   * The top-level directive for this control if present, otherwise null.\n   */\n  get formDirective(): any {\n    return this._parent ? this._parent.formDirective : null;\n  }\n\n  /**\n   * @description\n   * Sets the new value for the view model and emits an `ngModelChange` event.\n   *\n   * @param newValue The new value emitted by `ngModelChange`.\n   */\n  viewToModelUpdate(newValue: any): void {\n    this.viewModel = newValue;\n    this.update.emit(newValue);\n  }\n\n  private _setUpControl(): void {\n    this._setUpdateStrategy();\n    this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);\n    this._registered = true;\n  }\n\n  private _setUpdateStrategy(): void {\n    if (this.options && this.options.updateOn != null) {\n      this.control._updateOn = this.options.updateOn;\n    }\n  }\n\n  private _isStandalone(): boolean {\n    return !this._parent || !!(this.options && this.options.standalone);\n  }\n\n  private _setUpStandalone(): void {\n    setUpControl(this.control, this);\n    this.control.updateValueAndValidity({emitEvent: false});\n  }\n\n  private _checkForErrors(): void {\n    if (!this._isStandalone()) {\n      this._checkParentType();\n    }\n    this._checkName();\n  }\n\n  private _checkParentType(): void {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!(this._parent instanceof NgModelGroup) &&\n          this._parent instanceof AbstractFormGroupDirective) {\n        TemplateDrivenErrors.formGroupNameException();\n      } else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n        TemplateDrivenErrors.modelParentException();\n      }\n    }\n  }\n\n  private _checkName(): void {\n    if (this.options && this.options.name) this.name = this.options.name;\n\n    if (!this._isStandalone() && !this.name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      TemplateDrivenErrors.missingNameException();\n    }\n  }\n\n  private _updateValue(value: any): void {\n    resolvedPromise.then(() => {\n      this.control.setValue(value, {emitViewToModelChange: false});\n    });\n  }\n\n  private _updateDisabled(changes: SimpleChanges) {\n    const disabledValue = changes['isDisabled'].currentValue;\n\n    const isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n\n    resolvedPromise.then(() => {\n      if (isDisabled && !this.control.disabled) {\n        this.control.disable();\n      } else if (!isDisabled && this.control.disabled) {\n        this.control.enable();\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n/**\n * @description\n *\n * Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate></form>\n * ```\n *\n * @publicApi\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n */\n@Directive({\n  selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n  host: {'novalidate': ''},\n})\nexport class ɵNgNoValidate {\n}\n\nexport {ɵNgNoValidate as NgNoValidate};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, forwardRef, Inject, InjectionToken, Input, OnChanges, Optional, Output, Self, SimpleChanges} from '@angular/core';\n\nimport {FormControl} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {_ngModelWarning, isPropertyUpdated, selectValueAccessor, setUpControl} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\n\n/**\n * Token to provide to turn off the ngModel warning on formControl and formControlName.\n */\nexport const NG_MODEL_WITH_FORM_CONTROL_WARNING =\n    new InjectionToken('NgModelWithFormControlWarning');\n\nexport const formControlBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlDirective)\n};\n\n/**\n * @description\n * Synchronizes a standalone `FormControl` instance to a form control element.\n *\n * Note that support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives was deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * @usageNotes\n *\n * The following example shows how to register a standalone control and set its value.\n *\n * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({selector: '[formControl]', providers: [formControlBinding], exportAs: 'ngForm'})\nexport class FormControlDirective extends NgControl implements OnChanges {\n  /**\n   * Internal reference to the view model value.\n   * @nodoc\n   */\n  viewModel: any;\n\n  /**\n   * @description\n   * Tracks the `FormControl` instance bound to the directive.\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('formControl') form!: FormControl;\n\n  /**\n   * @description\n   * Triggers a warning in dev mode that this input should not be used with reactive forms.\n   */\n  @Input('disabled')\n  set isDisabled(isDisabled: boolean) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      ReactiveErrors.disabledAttrWarning();\n    }\n  }\n\n  // TODO(kara): remove next 4 properties once deprecation period is over\n\n  /** @deprecated as of v6 */\n  @Input('ngModel') model: any;\n\n  /** @deprecated as of v6 */\n  @Output('ngModelChange') update = new EventEmitter();\n\n  /**\n   * @description\n   * Static property used to track whether any ngModel warnings have been sent across\n   * all instances of FormControlDirective. Used to support warning config of \"once\".\n   *\n   * @internal\n   */\n  static _ngModelWarningSentOnce = false;\n\n  /**\n   * @description\n   * Instance property used to track whether an ngModel warning has been sent out for this\n   * particular `FormControlDirective` instance. Used to support warning config of \"always\".\n   *\n   * @internal\n   */\n  _ngModelWarningSent = false;\n\n  constructor(\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator|ValidatorFn)[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators:\n          (AsyncValidator|AsyncValidatorFn)[],\n      @Optional() @Self() @Inject(NG_VALUE_ACCESSOR) valueAccessors: ControlValueAccessor[],\n      @Optional() @Inject(NG_MODEL_WITH_FORM_CONTROL_WARNING) private _ngModelWarningConfig: string|\n      null) {\n    super();\n    this._setValidators(validators);\n    this._setAsyncValidators(asyncValidators);\n    this.valueAccessor = selectValueAccessor(this, valueAccessors);\n  }\n\n  /** @nodoc */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this._isControlChanged(changes)) {\n      setUpControl(this.form, this);\n      if (this.control.disabled && this.valueAccessor!.setDisabledState) {\n        this.valueAccessor!.setDisabledState!(true);\n      }\n      this.form.updateValueAndValidity({emitEvent: false});\n    }\n    if (isPropertyUpdated(changes, this.viewModel)) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);\n      }\n      this.form.setValue(this.model);\n      this.viewModel = this.model;\n    }\n  }\n\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n  get path(): string[] {\n    return [];\n  }\n\n  /**\n   * @description\n   * The `FormControl` bound to this directive.\n   */\n  get control(): FormControl {\n    return this.form;\n  }\n\n  /**\n   * @description\n   * Sets the new value for the view model and emits an `ngModelChange` event.\n   *\n   * @param newValue The new value for the view model.\n   */\n  viewToModelUpdate(newValue: any): void {\n    this.viewModel = newValue;\n    this.update.emit(newValue);\n  }\n\n  private _isControlChanged(changes: {[key: string]: any}): boolean {\n    return changes.hasOwnProperty('form');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, forwardRef, Inject, Input, OnChanges, Optional, Output, Self, SimpleChanges} from '@angular/core';\n\nimport {FormArray, FormControl, FormGroup} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {ControlContainer} from '../control_container';\nimport {Form} from '../form_interface';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {cleanUpControl, cleanUpValidators, removeListItem, setUpControl, setUpFormContainer, setUpValidators, syncPendingControls} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nimport {FormControlName} from './form_control_name';\nimport {FormArrayName, FormGroupName} from './form_group_name';\n\nexport const formDirectiveProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupDirective)\n};\n\n/**\n * @description\n *\n * Binds an existing `FormGroup` to a DOM element.\n *\n * This directive accepts an existing `FormGroup` instance. It will then use this\n * `FormGroup` instance to match any child `FormControl`, `FormGroup`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * ### Register Form Group\n *\n * The following example registers a `FormGroup` with first name and last name controls,\n * and listens for the *ngSubmit* event when the button is clicked.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[formGroup]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  exportAs: 'ngForm'\n})\nexport class FormGroupDirective extends ControlContainer implements Form, OnChanges {\n  /**\n   * @description\n   * Reports whether the form submission has been triggered.\n   */\n  public readonly submitted: boolean = false;\n\n  /**\n   * Reference to an old form group input value, which is needed to cleanup old instance in case it\n   * was replaced with a new one.\n   */\n  private _oldForm: FormGroup|undefined;\n\n  /**\n   * @description\n   * Tracks the list of added `FormControlName` instances\n   */\n  directives: FormControlName[] = [];\n\n  /**\n   * @description\n   * Tracks the `FormGroup` bound to this directive.\n   */\n  @Input('formGroup') form: FormGroup = null!;\n\n  /**\n   * @description\n   * Emits an event when the form submission has been triggered.\n   */\n  @Output() ngSubmit = new EventEmitter();\n\n  constructor(\n      @Optional() @Self() @Inject(NG_VALIDATORS) private validators: (Validator|ValidatorFn)[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) private asyncValidators:\n          (AsyncValidator|AsyncValidatorFn)[]) {\n    super();\n    this._setValidators(validators);\n    this._setAsyncValidators(asyncValidators);\n  }\n\n  /** @nodoc */\n  ngOnChanges(changes: SimpleChanges): void {\n    this._checkFormPresent();\n    if (changes.hasOwnProperty('form')) {\n      this._updateValidators();\n      this._updateDomValue();\n      this._updateRegistrations();\n      this._oldForm = this.form;\n    }\n  }\n\n  /**\n   * @description\n   * Returns this directive's instance.\n   */\n  get formDirective(): Form {\n    return this;\n  }\n\n  /**\n   * @description\n   * Returns the `FormGroup` bound to this directive.\n   */\n  get control(): FormGroup {\n    return this.form;\n  }\n\n  /**\n   * @description\n   * Returns an array representing the path to this group. Because this directive\n   * always lives at the top level of a form, it always an empty array.\n   */\n  get path(): string[] {\n    return [];\n  }\n\n  /**\n   * @description\n   * Method that sets up the control directive in this group, re-calculates its value\n   * and validity, and adds the instance to the internal list of directives.\n   *\n   * @param dir The `FormControlName` directive instance.\n   */\n  addControl(dir: FormControlName): FormControl {\n    const ctrl: any = this.form.get(dir.path);\n    setUpControl(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n    this.directives.push(dir);\n    return ctrl;\n  }\n\n  /**\n   * @description\n   * Retrieves the `FormControl` instance from the provided `FormControlName` directive\n   *\n   * @param dir The `FormControlName` directive instance.\n   */\n  getControl(dir: FormControlName): FormControl {\n    return <FormControl>this.form.get(dir.path);\n  }\n\n  /**\n   * @description\n   * Removes the `FormControlName` instance from the internal list of directives\n   *\n   * @param dir The `FormControlName` directive instance.\n   */\n  removeControl(dir: FormControlName): void {\n    removeListItem(this.directives, dir);\n  }\n\n  /**\n   * Adds a new `FormGroupName` directive instance to the form.\n   *\n   * @param dir The `FormGroupName` directive instance.\n   */\n  addFormGroup(dir: FormGroupName): void {\n    const ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n\n  /**\n   * No-op method to remove the form group.\n   *\n   * @param dir The `FormGroupName` directive instance.\n   */\n  removeFormGroup(dir: FormGroupName): void {}\n\n  /**\n   * @description\n   * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance\n   *\n   * @param dir The `FormGroupName` directive instance.\n   */\n  getFormGroup(dir: FormGroupName): FormGroup {\n    return <FormGroup>this.form.get(dir.path);\n  }\n\n  /**\n   * Adds a new `FormArrayName` directive instance to the form.\n   *\n   * @param dir The `FormArrayName` directive instance.\n   */\n  addFormArray(dir: FormArrayName): void {\n    const ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n\n  /**\n   * No-op method to remove the form array.\n   *\n   * @param dir The `FormArrayName` directive instance.\n   */\n  removeFormArray(dir: FormArrayName): void {}\n\n  /**\n   * @description\n   * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.\n   *\n   * @param dir The `FormArrayName` directive instance.\n   */\n  getFormArray(dir: FormArrayName): FormArray {\n    return <FormArray>this.form.get(dir.path);\n  }\n\n  /**\n   * Sets the new value for the provided `FormControlName` directive.\n   *\n   * @param dir The `FormControlName` directive instance.\n   * @param value The new value for the directive's control.\n   */\n  updateModel(dir: FormControlName, value: any): void {\n    const ctrl  = <FormControl>this.form.get(dir.path);\n    ctrl.setValue(value);\n  }\n\n  /**\n   * @description\n   * Method called with the \"submit\" event is triggered on the form.\n   * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n   *\n   * @param $event The \"submit\" event object\n   */\n  onSubmit($event: Event): boolean {\n    (this as {submitted: boolean}).submitted = true;\n    syncPendingControls(this.form, this.directives);\n    this.ngSubmit.emit($event);\n    return false;\n  }\n\n  /**\n   * @description\n   * Method called when the \"reset\" event is triggered on the form.\n   */\n  onReset(): void {\n    this.resetForm();\n  }\n\n  /**\n   * @description\n   * Resets the form to an initial value and resets its submitted status.\n   *\n   * @param value The new value for the form.\n   */\n  resetForm(value: any = undefined): void {\n    this.form.reset(value);\n    (this as {submitted: boolean}).submitted = false;\n  }\n\n\n  /** @internal */\n  _updateDomValue() {\n    this.directives.forEach(dir => {\n      const newCtrl: any = this.form.get(dir.path);\n      if (dir.control !== newCtrl) {\n        // Note: the value of the `dir.control` may not be defined, for example when it's a first\n        // `FormControl` that is added to a `FormGroup` instance (via `addControl` call).\n        cleanUpControl(dir.control || null, dir);\n        if (newCtrl) setUpControl(newCtrl, dir);\n        (dir as {control: FormControl}).control = newCtrl;\n      }\n    });\n\n    this.form._updateTreeValidity({emitEvent: false});\n  }\n\n  private _updateRegistrations() {\n    this.form._registerOnCollectionChange(() => this._updateDomValue());\n    if (this._oldForm) {\n      this._oldForm._registerOnCollectionChange(() => {});\n    }\n  }\n\n  private _updateValidators() {\n    setUpValidators(this.form, this, /* handleOnValidatorChange */ false);\n    if (this._oldForm) {\n      cleanUpValidators(this._oldForm, this, /* handleOnValidatorChange */ false);\n    }\n  }\n\n  private _checkFormPresent() {\n    if (!this.form && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      ReactiveErrors.missingFormException();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, forwardRef, Host, Inject, Input, OnDestroy, OnInit, Optional, Self, SkipSelf} from '@angular/core';\n\nimport {FormArray} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {controlPath} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nimport {FormGroupDirective} from './form_group_directive';\n\nexport const formGroupNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupName)\n};\n\n/**\n * @description\n *\n * Syncs a nested `FormGroup` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective`.\n *\n * It accepts the string name of the nested `FormGroup` to link, and\n * looks for a `FormGroup` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Use nested form groups to validate a sub-group of a\n * form separately from the rest or to group the values of certain\n * controls into their own nested object.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * @usageNotes\n *\n * ### Access the group by name\n *\n * The following example uses the {@link AbstractControl#get get} method to access the\n * associated `FormGroup`\n *\n * ```ts\n *   this.form.get('name');\n * ```\n *\n * ### Access individual controls in the group\n *\n * The following example uses the {@link AbstractControl#get get} method to access\n * individual controls within the group using dot syntax.\n *\n * ```ts\n *   this.form.get('name.first');\n * ```\n *\n * ### Register a nested `FormGroup`.\n *\n * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,\n * and provides methods to retrieve the nested `FormGroup` and individual controls.\n *\n * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({selector: '[formGroupName]', providers: [formGroupNameProvider]})\nexport class FormGroupName extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n  /**\n   * @description\n   * Tracks the name of the `FormGroup` bound to the directive. The name corresponds\n   * to a key in the parent `FormGroup` or `FormArray`.\n   * Accepts a name as a string or a number.\n   * The name in the form of a string is useful for individual forms,\n   * while the numerical form allows for form groups to be bound\n   * to indices when iterating over groups in a `FormArray`.\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('formGroupName') name!: string|number|null;\n\n  constructor(\n      @Optional() @Host() @SkipSelf() parent: ControlContainer,\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator|ValidatorFn)[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators:\n          (AsyncValidator|AsyncValidatorFn)[]) {\n    super();\n    this._parent = parent;\n    this._setValidators(validators);\n    this._setAsyncValidators(asyncValidators);\n  }\n\n  /** @internal */\n  _checkParentType(): void {\n    if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      ReactiveErrors.groupParentException();\n    }\n  }\n}\n\nexport const formArrayNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormArrayName)\n};\n\n/**\n * @description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({selector: '[formArrayName]', providers: [formArrayNameProvider]})\nexport class FormArrayName extends ControlContainer implements OnInit, OnDestroy {\n  /** @internal */\n  _parent: ControlContainer;\n\n  /**\n   * @description\n   * Tracks the name of the `FormArray` bound to the directive. The name corresponds\n   * to a key in the parent `FormGroup` or `FormArray`.\n   * Accepts a name as a string or a number.\n   * The name in the form of a string is useful for individual forms,\n   * while the numerical form allows for form arrays to be bound\n   * to indices when iterating over arrays in a `FormArray`.\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('formArrayName') name!: string|number|null;\n\n  constructor(\n      @Optional() @Host() @SkipSelf() parent: ControlContainer,\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator|ValidatorFn)[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators:\n          (AsyncValidator|AsyncValidatorFn)[]) {\n    super();\n    this._parent = parent;\n    this._setValidators(validators);\n    this._setAsyncValidators(asyncValidators);\n  }\n\n  /**\n   * A lifecycle method called when the directive's inputs are initialized. For internal use only.\n   * @throws If the directive does not have a valid parent.\n   * @nodoc\n   */\n  ngOnInit(): void {\n    this._checkParentType();\n    this.formDirective!.addFormArray(this);\n  }\n\n  /**\n   * A lifecycle method called before the directive's instance is destroyed. For internal use only.\n   * @nodoc\n   */\n  ngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeFormArray(this);\n    }\n  }\n\n  /**\n   * @description\n   * The `FormArray` bound to this directive.\n   */\n  get control(): FormArray {\n    return this.formDirective!.getFormArray(this);\n  }\n\n  /**\n   * @description\n   * The top-level directive for this group if present, otherwise null.\n   */\n  get formDirective(): FormGroupDirective|null {\n    return this._parent ? <FormGroupDirective>this._parent.formDirective : null;\n  }\n\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n  get path(): string[] {\n    return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n  }\n\n  private _checkParentType(): void {\n    if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      ReactiveErrors.arrayParentException();\n    }\n  }\n}\n\nfunction _hasInvalidParent(parent: ControlContainer): boolean {\n  return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n      !(parent instanceof FormArrayName);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, forwardRef, Host, Inject, Input, OnChanges, OnDestroy, Optional, Output, Self, SimpleChanges, SkipSelf} from '@angular/core';\n\nimport {FormControl} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {_ngModelWarning, controlPath, isPropertyUpdated, selectValueAccessor} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nimport {NG_MODEL_WITH_FORM_CONTROL_WARNING} from './form_control_directive';\nimport {FormGroupDirective} from './form_group_directive';\nimport {FormArrayName, FormGroupName} from './form_group_name';\n\nexport const controlNameBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlName)\n};\n\n/**\n * @description\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * @usageNotes\n *\n * ### Register `FormControl` within a group\n *\n * The following example shows how to register multiple form controls within a form group\n * and set their value.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel is deprecated\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n *\n * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({selector: '[formControlName]', providers: [controlNameBinding]})\nexport class FormControlName extends NgControl implements OnChanges, OnDestroy {\n  private _added = false;\n  /**\n   * Internal reference to the view model value.\n   * @internal\n   */\n  viewModel: any;\n\n  /**\n   * @description\n   * Tracks the `FormControl` instance bound to the directive.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly control!: FormControl;\n\n  /**\n   * @description\n   * Tracks the name of the `FormControl` bound to the directive. The name corresponds\n   * to a key in the parent `FormGroup` or `FormArray`.\n   * Accepts a name as a string or a number.\n   * The name in the form of a string is useful for individual forms,\n   * while the numerical form allows for form controls to be bound\n   * to indices when iterating over controls in a `FormArray`.\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('formControlName') name!: string|number|null;\n\n  /**\n   * @description\n   * Triggers a warning in dev mode that this input should not be used with reactive forms.\n   */\n  @Input('disabled')\n  set isDisabled(isDisabled: boolean) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      ReactiveErrors.disabledAttrWarning();\n    }\n  }\n\n  // TODO(kara): remove next 4 properties once deprecation period is over\n\n  /** @deprecated as of v6 */\n  @Input('ngModel') model: any;\n\n  /** @deprecated as of v6 */\n  @Output('ngModelChange') update = new EventEmitter();\n\n  /**\n   * @description\n   * Static property used to track whether any ngModel warnings have been sent across\n   * all instances of FormControlName. Used to support warning config of \"once\".\n   *\n   * @internal\n   */\n  static _ngModelWarningSentOnce = false;\n\n  /**\n   * @description\n   * Instance property used to track whether an ngModel warning has been sent out for this\n   * particular FormControlName instance. Used to support warning config of \"always\".\n   *\n   * @internal\n   */\n  _ngModelWarningSent = false;\n\n  constructor(\n      @Optional() @Host() @SkipSelf() parent: ControlContainer,\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator|ValidatorFn)[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators:\n          (AsyncValidator|AsyncValidatorFn)[],\n      @Optional() @Self() @Inject(NG_VALUE_ACCESSOR) valueAccessors: ControlValueAccessor[],\n      @Optional() @Inject(NG_MODEL_WITH_FORM_CONTROL_WARNING) private _ngModelWarningConfig: string|\n      null) {\n    super();\n    this._parent = parent;\n    this._setValidators(validators);\n    this._setAsyncValidators(asyncValidators);\n    this.valueAccessor = selectValueAccessor(this, valueAccessors);\n  }\n\n  /** @nodoc */\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this._added) this._setUpControl();\n    if (isPropertyUpdated(changes, this.viewModel)) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);\n      }\n      this.viewModel = this.model;\n      this.formDirective.updateModel(this, this.model);\n    }\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeControl(this);\n    }\n  }\n\n  /**\n   * @description\n   * Sets the new value for the view model and emits an `ngModelChange` event.\n   *\n   * @param newValue The new value for the view model.\n   */\n  viewToModelUpdate(newValue: any): void {\n    this.viewModel = newValue;\n    this.update.emit(newValue);\n  }\n\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n  get path(): string[] {\n    return controlPath(this.name == null ? this.name : this.name.toString(), this._parent!);\n  }\n\n  /**\n   * @description\n   * The top-level directive for this group if present, otherwise null.\n   */\n  get formDirective(): any {\n    return this._parent ? this._parent.formDirective : null;\n  }\n\n  private _checkParentType(): void {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!(this._parent instanceof FormGroupName) &&\n          this._parent instanceof AbstractFormGroupDirective) {\n        ReactiveErrors.ngModelGroupException();\n      } else if (\n          !(this._parent instanceof FormGroupName) &&\n          !(this._parent instanceof FormGroupDirective) &&\n          !(this._parent instanceof FormArrayName)) {\n        ReactiveErrors.controlParentException();\n      }\n    }\n  }\n\n  private _setUpControl() {\n    this._checkParentType();\n    (this as {control: FormControl}).control = this.formDirective.addControl(this);\n    if (this.control.disabled && this.valueAccessor!.setDisabledState) {\n      this.valueAccessor!.setDisabledState!(true);\n    }\n    this._added = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, forwardRef, Input, OnChanges, SimpleChanges, StaticProvider} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {AbstractControl} from '../model';\nimport {NG_VALIDATORS, Validators} from '../validators';\n\n\n/**\n * @description\n * Defines the map of errors returned from failed validation checks.\n *\n * @publicApi\n */\nexport type ValidationErrors = {\n  [key: string]: any\n};\n\n/**\n * @description\n * An interface implemented by classes that perform synchronous validation.\n *\n * @usageNotes\n *\n * ### Provide a custom validator\n *\n * The following example implements the `Validator` interface to create a\n * validator directive with a custom error key.\n *\n * ```typescript\n * @Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors|null {\n *     return {'custom': true};\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport interface Validator {\n  /**\n   * @description\n   * Method that performs synchronous validation against the provided control.\n   *\n   * @param control The control to validate against.\n   *\n   * @returns A map of validation errors if validation fails,\n   * otherwise null.\n   */\n  validate(control: AbstractControl): ValidationErrors|null;\n\n  /**\n   * @description\n   * Registers a callback function to call when the validator inputs change.\n   *\n   * @param fn The callback function\n   */\n  registerOnValidatorChange?(fn: () => void): void;\n}\n\n/**\n * @description\n * An interface implemented by classes that perform asynchronous validation.\n *\n * @usageNotes\n *\n * ### Provide a custom async validator directive\n *\n * The following example implements the `AsyncValidator` interface to create an\n * async validator directive with a custom error key.\n *\n * ```typescript\n * import { of } from 'rxjs';\n *\n * @Directive({\n *   selector: '[customAsyncValidator]',\n *   providers: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:\n * true}]\n * })\n * class CustomAsyncValidatorDirective implements AsyncValidator {\n *   validate(control: AbstractControl): Observable<ValidationErrors|null> {\n *     return of({'custom': true});\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport interface AsyncValidator extends Validator {\n  /**\n   * @description\n   * Method that performs async validation against the provided control.\n   *\n   * @param control The control to validate against.\n   *\n   * @returns A promise or observable that resolves a map of validation errors\n   * if validation fails, otherwise null.\n   */\n  validate(control: AbstractControl):\n      Promise<ValidationErrors|null>|Observable<ValidationErrors|null>;\n}\n\n/**\n * @description\n * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const REQUIRED_VALIDATOR: StaticProvider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RequiredValidator),\n  multi: true\n};\n\n/**\n * @description\n * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const CHECKBOX_REQUIRED_VALIDATOR: StaticProvider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => CheckboxRequiredValidator),\n  multi: true\n};\n\n\n/**\n * @description\n * A directive that adds the `required` validator to any controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a required validator using template-driven forms\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n      ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n  providers: [REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class RequiredValidator implements Validator {\n  private _required = false;\n  private _onChange?: () => void;\n\n  /**\n   * @description\n   * Tracks changes to the required attribute bound to this directive.\n   */\n  @Input()\n  get required(): boolean|string {\n    return this._required;\n  }\n\n  set required(value: boolean|string) {\n    this._required = value != null && value !== false && `${value}` !== 'false';\n    if (this._onChange) this._onChange();\n  }\n\n  /**\n   * Method that validates whether the control is empty.\n   * Returns the validation result if enabled, otherwise null.\n   * @nodoc\n   */\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this.required ? Validators.required(control) : null;\n  }\n\n  /**\n   * Registers a callback function to call when the validator inputs change.\n   * @nodoc\n   */\n  registerOnValidatorChange(fn: () => void): void {\n    this._onChange = fn;\n  }\n}\n\n\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a required checkbox validator using template-driven forms\n *\n * The following example shows how to add a checkbox required validator to an input attached to an\n * ngModel binding.\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n  providers: [CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class CheckboxRequiredValidator extends RequiredValidator {\n  /**\n   * Method that validates whether or not the checkbox has been checked.\n   * Returns the validation result if enabled, otherwise null.\n   * @nodoc\n   */\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this.required ? Validators.requiredTrue(control) : null;\n  }\n}\n\n/**\n * @description\n * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const EMAIL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => EmailValidator),\n  multi: true\n};\n\n/**\n * A directive that adds the `email` validator to controls marked with the\n * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding an email validator\n *\n * The following example shows how to add an email validator to an input attached to an ngModel\n * binding.\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n  providers: [EMAIL_VALIDATOR]\n})\nexport class EmailValidator implements Validator {\n  private _enabled = false;\n  private _onChange?: () => void;\n\n  /**\n   * @description\n   * Tracks changes to the email attribute bound to this directive.\n   */\n  @Input()\n  set email(value: boolean|string) {\n    this._enabled = value === '' || value === true || value === 'true';\n    if (this._onChange) this._onChange();\n  }\n\n  /**\n   * Method that validates whether an email address is valid.\n   * Returns the validation result if enabled, otherwise null.\n   * @nodoc\n   */\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this._enabled ? Validators.email(control) : null;\n  }\n\n  /**\n   * Registers a callback function to call when the validator inputs change.\n   * @nodoc\n   */\n  registerOnValidatorChange(fn: () => void): void {\n    this._onChange = fn;\n  }\n}\n\n/**\n * @description\n * A function that receives a control and synchronously returns a map of\n * validation errors if present, otherwise null.\n *\n * @publicApi\n */\nexport interface ValidatorFn {\n  (control: AbstractControl): ValidationErrors|null;\n}\n\n/**\n * @description\n * A function that receives a control and returns a Promise or observable\n * that emits validation errors if present, otherwise null.\n *\n * @publicApi\n */\nexport interface AsyncValidatorFn {\n  (control: AbstractControl): Promise<ValidationErrors|null>|Observable<ValidationErrors|null>;\n}\n\n/**\n * @description\n * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const MIN_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinLengthValidator),\n  multi: true\n};\n\n/**\n * A directive that adds minimum length validation to controls marked with the\n * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a minimum length validator\n *\n * The following example shows how to add a minimum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel minlength=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n  providers: [MIN_LENGTH_VALIDATOR],\n  host: {'[attr.minlength]': 'minlength ? minlength : null'}\n})\nexport class MinLengthValidator implements Validator, OnChanges {\n  private _validator: ValidatorFn = Validators.nullValidator;\n  private _onChange?: () => void;\n\n  /**\n   * @description\n   * Tracks changes to the the minimum length bound to this directive.\n   */\n  @Input()\n  minlength!: string|number;  // This input is always defined, since the name matches selector.\n\n  /** @nodoc */\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('minlength' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  /**\n   * Method that validates whether the value meets a minimum length requirement.\n   * Returns the validation result if enabled, otherwise null.\n   * @nodoc\n   */\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this.minlength == null ? null : this._validator(control);\n  }\n\n  /**\n   * Registers a callback function to call when the validator inputs change.\n   * @nodoc\n   */\n  registerOnValidatorChange(fn: () => void): void {\n    this._onChange = fn;\n  }\n\n  private _createValidator(): void {\n    this._validator = Validators.minLength(\n        typeof this.minlength === 'number' ? this.minlength : parseInt(this.minlength, 10));\n  }\n}\n\n/**\n * @description\n * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const MAX_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxLengthValidator),\n  multi: true\n};\n\n/**\n * A directive that adds max length validation to controls marked with the\n * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a maximum length validator\n *\n * The following example shows how to add a maximum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel maxlength=\"25\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n  providers: [MAX_LENGTH_VALIDATOR],\n  host: {'[attr.maxlength]': 'maxlength ? maxlength : null'}\n})\nexport class MaxLengthValidator implements Validator, OnChanges {\n  private _validator: ValidatorFn = Validators.nullValidator;\n  private _onChange?: () => void;\n\n  /**\n   * @description\n   * Tracks changes to the the maximum length bound to this directive.\n   */\n  @Input()\n  maxlength!: string|number;  // This input is always defined, since the name matches selector.\n\n  /** @nodoc */\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('maxlength' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  /**\n   * Method that validates whether the value exceeds the maximum length requirement.\n   * @nodoc\n   */\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this.maxlength != null ? this._validator(control) : null;\n  }\n\n  /**\n   * Registers a callback function to call when the validator inputs change.\n   * @nodoc\n   */\n  registerOnValidatorChange(fn: () => void): void {\n    this._onChange = fn;\n  }\n\n  private _createValidator(): void {\n    this._validator = Validators.maxLength(\n        typeof this.maxlength === 'number' ? this.maxlength : parseInt(this.maxlength, 10));\n  }\n}\n\n/**\n * @description\n * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const PATTERN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => PatternValidator),\n  multi: true\n};\n\n\n/**\n * @description\n * A directive that adds regex pattern validation to controls marked with the\n * `pattern` attribute. The regex must match the entire control value.\n * The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a pattern validator\n *\n * The following example shows how to add a pattern validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel pattern=\"[a-zA-Z ]*\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n  providers: [PATTERN_VALIDATOR],\n  host: {'[attr.pattern]': 'pattern ? pattern : null'}\n})\nexport class PatternValidator implements Validator, OnChanges {\n  private _validator: ValidatorFn = Validators.nullValidator;\n  private _onChange?: () => void;\n\n  /**\n   * @description\n   * Tracks changes to the pattern bound to this directive.\n   */\n  @Input()\n  pattern!: string|RegExp;  // This input is always defined, since the name matches selector.\n\n  /** @nodoc */\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('pattern' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  /**\n   * Method that validates whether the value matches the the pattern requirement.\n   * @nodoc\n   */\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this._validator(control);\n  }\n\n  /**\n   * Registers a callback function to call when the validator inputs change.\n   * @nodoc\n   */\n  registerOnValidatorChange(fn: () => void): void {\n    this._onChange = fn;\n  }\n\n  private _createValidator(): void {\n    this._validator = Validators.pattern(this.pattern);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, Type} from '@angular/core';\n\nimport {CheckboxControlValueAccessor} from './directives/checkbox_value_accessor';\nimport {DefaultValueAccessor} from './directives/default_value_accessor';\nimport {NgControlStatus, NgControlStatusGroup} from './directives/ng_control_status';\nimport {NgForm} from './directives/ng_form';\nimport {NgModel} from './directives/ng_model';\nimport {NgModelGroup} from './directives/ng_model_group';\nimport {NgNoValidate} from './directives/ng_no_validate_directive';\nimport {NumberValueAccessor} from './directives/number_value_accessor';\nimport {RadioControlValueAccessor} from './directives/radio_control_value_accessor';\nimport {RangeValueAccessor} from './directives/range_value_accessor';\nimport {FormControlDirective} from './directives/reactive_directives/form_control_directive';\nimport {FormControlName} from './directives/reactive_directives/form_control_name';\nimport {FormGroupDirective} from './directives/reactive_directives/form_group_directive';\nimport {FormArrayName, FormGroupName} from './directives/reactive_directives/form_group_name';\nimport {NgSelectOption, SelectControlValueAccessor} from './directives/select_control_value_accessor';\nimport {NgSelectMultipleOption, SelectMultipleControlValueAccessor} from './directives/select_multiple_control_value_accessor';\nimport {CheckboxRequiredValidator, EmailValidator, MaxLengthValidator, MinLengthValidator, PatternValidator, RequiredValidator} from './directives/validators';\n\nexport {CheckboxControlValueAccessor} from './directives/checkbox_value_accessor';\nexport {ControlValueAccessor} from './directives/control_value_accessor';\nexport {DefaultValueAccessor} from './directives/default_value_accessor';\nexport {NgControl} from './directives/ng_control';\nexport {NgControlStatus, NgControlStatusGroup} from './directives/ng_control_status';\nexport {NgForm} from './directives/ng_form';\nexport {NgModel} from './directives/ng_model';\nexport {NgModelGroup} from './directives/ng_model_group';\nexport {NumberValueAccessor} from './directives/number_value_accessor';\nexport {RadioControlValueAccessor} from './directives/radio_control_value_accessor';\nexport {RangeValueAccessor} from './directives/range_value_accessor';\nexport {FormControlDirective, NG_MODEL_WITH_FORM_CONTROL_WARNING} from './directives/reactive_directives/form_control_directive';\nexport {FormControlName} from './directives/reactive_directives/form_control_name';\nexport {FormGroupDirective} from './directives/reactive_directives/form_group_directive';\nexport {FormArrayName, FormGroupName} from './directives/reactive_directives/form_group_name';\nexport {NgSelectOption, SelectControlValueAccessor} from './directives/select_control_value_accessor';\nexport {NgSelectMultipleOption, SelectMultipleControlValueAccessor} from './directives/select_multiple_control_value_accessor';\n\nexport const SHARED_FORM_DIRECTIVES: Type<any>[] = [\n  NgNoValidate,\n  NgSelectOption,\n  NgSelectMultipleOption,\n  DefaultValueAccessor,\n  NumberValueAccessor,\n  RangeValueAccessor,\n  CheckboxControlValueAccessor,\n  SelectControlValueAccessor,\n  SelectMultipleControlValueAccessor,\n  RadioControlValueAccessor,\n  NgControlStatus,\n  NgControlStatusGroup,\n  RequiredValidator,\n  MinLengthValidator,\n  MaxLengthValidator,\n  PatternValidator,\n  CheckboxRequiredValidator,\n  EmailValidator,\n];\n\nexport const TEMPLATE_DRIVEN_DIRECTIVES: Type<any>[] = [NgModel, NgModelGroup, NgForm];\n\nexport const REACTIVE_DRIVEN_DIRECTIVES: Type<any>[] =\n    [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\n@NgModule({\n  declarations: SHARED_FORM_DIRECTIVES,\n  exports: SHARED_FORM_DIRECTIVES,\n})\nexport class ɵInternalFormsSharedModule {\n}\n\nexport {ɵInternalFormsSharedModule as InternalFormsSharedModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {AsyncValidatorFn, ValidatorFn} from './directives/validators';\nimport {AbstractControl, AbstractControlOptions, FormArray, FormControl, FormGroup, FormHooks} from './model';\n\nfunction isAbstractControlOptions(options: AbstractControlOptions|\n                                  {[key: string]: any}): options is AbstractControlOptions {\n  return (<AbstractControlOptions>options).asyncValidators !== undefined ||\n      (<AbstractControlOptions>options).validators !== undefined ||\n      (<AbstractControlOptions>options).updateOn !== undefined;\n}\n\n/**\n * @description\n * Creates an `AbstractControl` from a user-specified configuration.\n *\n * The `FormBuilder` provides syntactic sugar that shortens creating instances of a `FormControl`,\n * `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to build complex\n * forms.\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n * @publicApi\n */\n@Injectable()\nexport class FormBuilder {\n  /**\n   * @description\n   * Construct a new `FormGroup` instance.\n   *\n   * @param controlsConfig A collection of child controls. The key for each child is the name\n   * under which it is registered.\n   *\n   * @param options Configuration options object for the `FormGroup`. The object should have the\n   * the `AbstractControlOptions` type and might contain the following fields:\n   * * `validators`: A synchronous validator function, or an array of validator functions\n   * * `asyncValidators`: A single async validator or array of async validator functions\n   * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur' |\n   * submit')\n   */\n  group(\n      controlsConfig: {[key: string]: any},\n      options?: AbstractControlOptions|null,\n      ): FormGroup;\n  /**\n   * @description\n   * Construct a new `FormGroup` instance.\n   *\n   * @deprecated This API is not typesafe and can result in issues with Closure Compiler renaming.\n   * Use the `FormBuilder#group` overload with `AbstractControlOptions` instead.\n   * Note that `AbstractControlOptions` expects `validators` and `asyncValidators` to be valid\n   * validators. If you have custom validators, make sure their validation function parameter is\n   * `AbstractControl` and not a sub-class, such as `FormGroup`. These functions will be called with\n   * an object of type `AbstractControl` and that cannot be automatically downcast to a subclass, so\n   * TypeScript sees this as an error. For example, change the `(group: FormGroup) =>\n   * ValidationErrors|null` signature to be `(group: AbstractControl) => ValidationErrors|null`.\n   *\n   * @param controlsConfig A collection of child controls. The key for each child is the name\n   * under which it is registered.\n   *\n   * @param options Configuration options object for the `FormGroup`. The legacy configuration\n   * object consists of:\n   * * `validator`: A synchronous validator function, or an array of validator functions\n   * * `asyncValidator`: A single async validator or array of async validator functions\n   * Note: the legacy format is deprecated and might be removed in one of the next major versions\n   * of Angular.\n   */\n  group(\n      controlsConfig: {[key: string]: any},\n      options: {[key: string]: any},\n      ): FormGroup;\n  group(\n      controlsConfig: {[key: string]: any},\n      options: AbstractControlOptions|{[key: string]: any}|null = null): FormGroup {\n    const controls = this._reduceControls(controlsConfig);\n\n    let validators: ValidatorFn|ValidatorFn[]|null = null;\n    let asyncValidators: AsyncValidatorFn|AsyncValidatorFn[]|null = null;\n    let updateOn: FormHooks|undefined = undefined;\n\n    if (options != null) {\n      if (isAbstractControlOptions(options)) {\n        // `options` are `AbstractControlOptions`\n        validators = options.validators != null ? options.validators : null;\n        asyncValidators = options.asyncValidators != null ? options.asyncValidators : null;\n        updateOn = options.updateOn != null ? options.updateOn : undefined;\n      } else {\n        // `options` are legacy form group options\n        validators = options['validator'] != null ? options['validator'] : null;\n        asyncValidators = options['asyncValidator'] != null ? options['asyncValidator'] : null;\n      }\n    }\n\n    return new FormGroup(controls, {asyncValidators, updateOn, validators});\n  }\n\n  /**\n   * @description\n   * Construct a new `FormControl` with the given state, validators and options.\n   *\n   * @param formState Initializes the control with an initial state value, or\n   * with an object that contains both a value and a disabled status.\n   *\n   * @param validatorOrOpts A synchronous validator function, or an array of\n   * such functions, or an `AbstractControlOptions` object that contains\n   * validation functions and a validation trigger.\n   *\n   * @param asyncValidator A single async validator or array of async validator\n   * functions.\n   *\n   * @usageNotes\n   *\n   * ### Initialize a control as disabled\n   *\n   * The following example returns a control with an initial value in a disabled state.\n   *\n   * <code-example path=\"forms/ts/formBuilder/form_builder_example.ts\" region=\"disabled-control\">\n   * </code-example>\n   */\n  control(\n      formState: any, validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null): FormControl {\n    return new FormControl(formState, validatorOrOpts, asyncValidator);\n  }\n\n  /**\n   * Constructs a new `FormArray` from the given array of configurations,\n   * validators and options.\n   *\n   * @param controlsConfig An array of child controls or control configs. Each\n   * child control is given an index when it is registered.\n   *\n   * @param validatorOrOpts A synchronous validator function, or an array of\n   * such functions, or an `AbstractControlOptions` object that contains\n   * validation functions and a validation trigger.\n   *\n   * @param asyncValidator A single async validator or array of async validator\n   * functions.\n   */\n  array(\n      controlsConfig: any[],\n      validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null): FormArray {\n    const controls = controlsConfig.map(c => this._createControl(c));\n    return new FormArray(controls, validatorOrOpts, asyncValidator);\n  }\n\n  /** @internal */\n  _reduceControls(controlsConfig: {[k: string]: any}): {[key: string]: AbstractControl} {\n    const controls: {[key: string]: AbstractControl} = {};\n    Object.keys(controlsConfig).forEach(controlName => {\n      controls[controlName] = this._createControl(controlsConfig[controlName]);\n    });\n    return controls;\n  }\n\n  /** @internal */\n  _createControl(controlConfig: any): AbstractControl {\n    if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n        controlConfig instanceof FormArray) {\n      return controlConfig;\n\n    } else if (Array.isArray(controlConfig)) {\n      const value = controlConfig[0];\n      const validator: ValidatorFn = controlConfig.length > 1 ? controlConfig[1] : null;\n      const asyncValidator: AsyncValidatorFn = controlConfig.length > 2 ? controlConfig[2] : null;\n      return this.control(value, validator, asyncValidator);\n\n    } else {\n      return this.control(controlConfig);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\nimport {Version} from '@angular/core';\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('11.0.9');\n","export interface UneditableVariable {\n  name: string;\n  type?: string;\n  description?: string;\n}\n\nexport interface Variable {\n  _index?: number;  // Original index in extension list\n  label: string;\n  type: string;\n  expression: string;\n  simple?: string;\n  linkId?: string;\n  unit?: string;\n}\n\nexport interface Question {\n  linkId: string;\n  text: string;\n  itemHasScore?: boolean;\n  unit?: string;\n}\n\nexport enum VariableType {\n  question = 'Question',\n  expression = 'FHIRPath Expression',\n  simple = 'Simple Expression'\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {InternalFormsSharedModule, NG_MODEL_WITH_FORM_CONTROL_WARNING, REACTIVE_DRIVEN_DIRECTIVES, TEMPLATE_DRIVEN_DIRECTIVES} from './directives';\nimport {RadioControlRegistry} from './directives/radio_control_value_accessor';\nimport {FormBuilder} from './form_builder';\n\n/**\n * Exports the required providers and directives for template-driven forms,\n * making them available for import by NgModules that import this module.\n *\n * @see [Forms Overview](/guide/forms-overview)\n * @see [Template-driven Forms Guide](/guide/forms)\n *\n * @publicApi\n */\n@NgModule({\n  declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n  providers: [RadioControlRegistry],\n  exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n})\nexport class FormsModule {\n}\n\n/**\n * Exports the required infrastructure and directives for reactive forms,\n * making them available for import by NgModules that import this module.\n *\n * @see [Forms Overview](guide/forms-overview)\n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * @publicApi\n */\n@NgModule({\n  declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n  providers: [FormBuilder, RadioControlRegistry],\n  exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n})\nexport class ReactiveFormsModule {\n  /**\n   * @description\n   * Provides options for configuring the reactive forms module.\n   *\n   * @param opts An object of configuration options\n   * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`\n   * binding is used with reactive form directives.\n   */\n  static withConfig(opts: {\n    /** @deprecated as of v6 */ warnOnNgModelWithFormControl: 'never'|'once'|'always'\n  }): ModuleWithProviders<ReactiveFormsModule> {\n    return {\n      ngModule: ReactiveFormsModule,\n      providers: [\n        {provide: NG_MODEL_WITH_FORM_CONTROL_WARNING, useValue: opts.warnOnNgModelWithFormControl}\n      ]\n    };\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\n\nimport { Variable, VariableType } from '../variable';\nimport { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { RuleEditorService, SimpleStyle } from '../rule-editor.service';\n\n@Component({\n  selector: 'lhc-variables',\n  templateUrl: './variables.component.html',\n  styleUrls: ['./variables.component.css']\n})\nexport class VariablesComponent implements OnInit {\n  @Input() lhcStyle: SimpleStyle = {};\n\n  variableType = VariableType;\n  variableSubscription;\n  variables: Variable[];\n  levels = [{\n      level: 0,\n      name: 'Top Level Scope'\n    }\n  ];\n\n  constructor(private ruleEditorService: RuleEditorService) {}\n\n  /**\n   * Angular lifecycle hook called when the component is initialized\n   */\n  ngOnInit(): void {\n    this.variables = this.ruleEditorService.variables;\n    this.variableSubscription = this.ruleEditorService.variablesChange.subscribe((variables) => {\n      this.variables = variables;\n    });\n  }\n\n  /**\n   * Angular lifecycle hook called before the component is destroyed\n   */\n  ngDestroy(): void {\n    this.variableSubscription.unsubscribe();\n  }\n\n  /**\n   * Called when adding a new variable\n   */\n  onAdd(): void {\n    this.ruleEditorService.addVariable();\n  }\n\n  /**\n   * Remove a variable at an index\n   * @param i - index to remove\n   */\n  onRemove(i: number): void {\n    this.ruleEditorService.remove(i);\n  }\n\n  /**\n   * Drag and drop rearrange of variable order\n   * @param event - drag and drop event\n   */\n  drop(event: CdkDragDrop<Variable[]>): void {\n    moveItemInArray(this.variables, event.previousIndex, event.currentIndex);\n  }\n\n  /**\n   * Get the labels of available variables at the current index\n   * @param index - Index of variable we're editing\n   */\n  getAvailableVariables(index: number): Array<string> {\n    const uneditableVariables = this.ruleEditorService.uneditableVariables.map((e) => e.name);\n    // Only return variables up to but not including index\n    const editableVariables = this.variables.map((e) => e.label).slice(0, index);\n\n    return uneditableVariables.concat(editableVariables);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { RuleEditorService } from '../rule-editor.service';\nimport { UneditableVariable } from '../variable';\n\n@Component({\n  selector: 'lhc-uneditable-variables',\n  templateUrl: './uneditable-variables.component.html'\n})\nexport class UneditableVariablesComponent implements OnInit {\n  uneditableVariables: UneditableVariable[];\n  uneditableVariablesSubscription;\n\n  constructor(private variableService: RuleEditorService) {}\n\n  /**\n   * Angular lifecycle hook called when the component is initialized\n   */\n  ngOnInit(): void {\n    this.uneditableVariables = this.variableService.uneditableVariables;\n    this.uneditableVariablesSubscription =\n        this.variableService.uneditableVariablesChange.subscribe((variables) => {\n      this.uneditableVariables = variables;\n    });\n  }\n\n  /**\n   * Angular lifecycle hook called before the component is destroyed\n   */\n  ngDestroy(): void {\n    this.uneditableVariablesSubscription.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Question } from '../variable';\nimport { RuleEditorService, SimpleStyle } from '../rule-editor.service';\nimport { Unit, UNIT_CONVERSION } from '../units';\n\n@Component({\n  selector: 'lhc-question',\n  templateUrl: './question.component.html',\n  styleUrls: ['./question.component.css']\n})\nexport class QuestionComponent implements OnInit {\n  @Input() variable;\n  @Input() lhcStyle: SimpleStyle = {};\n  linkId = '';\n  questions: Question[];\n  itemHasScore = false;\n  isNonConvertibleUnit = false;\n  toUnit: string;\n  unit: string;\n  conversionOptions: Unit[];\n\n  constructor(private variableService: RuleEditorService) {}\n\n  /**\n   * Angular lifecycle hook called when the component is initialized\n   */\n  ngOnInit(): void {\n    this.linkId = this.variable.linkId ? this.variable.linkId : '';\n    this.toUnit = this.variable.unit ? this.variable.unit : '';\n    this.questions = this.variableService.questions;\n\n    this.onChange(false);\n\n    this.variableService.questionsChange.subscribe((questions) => {\n      this.questions = questions;\n    });\n  }\n\n  /**\n   * Get the question based on linkId\n   * @param linkId - FHIR linkId\n   */\n  getQuestion(linkId): Question {\n    return this.questions.find((q) => {\n      return q.linkId === linkId;\n    });\n  }\n\n  /**\n   * Get the list of units we can convert to based on the starting unit\n   * @param unit - Starting unit\n   */\n  getConversionOptions(unit: string): Unit[] {\n    return UNIT_CONVERSION[unit];\n  }\n\n  /**\n   * Called when the questionnaire question or unit is changed\n   * @param isQuestion - The change was for a question\n   */\n  onChange(isQuestion): void {\n    if (isQuestion) {\n      // Reset the conversion options when the question changes\n      this.toUnit = '';\n    }\n\n    // If we already have a question selected (as opposed to the select... prompt)\n    if (this.linkId) {\n      const question = this.getQuestion(this.linkId);\n      this.unit = question?.unit;\n      this.conversionOptions = this.getConversionOptions(this.unit);\n      this.isNonConvertibleUnit = this.unit && !this.conversionOptions;\n\n      // Check if this is a score\n      if (!this.conversionOptions && !this.isNonConvertibleUnit) {\n        this.itemHasScore = this.variableService.itemHasScore(this.linkId);\n      } else {\n        this.itemHasScore = false;\n      }\n\n      this.variable.expression = this.variableService.valueOrScoreExpression(\n        this.linkId, this.itemHasScore, !this.isNonConvertibleUnit, this.unit, this.toUnit);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵparseCookieValue as parseCookieValue, ɵsetRootDomAdapter as setRootDomAdapter} from '@angular/common';\nimport {ɵglobal as global} from '@angular/core';\n\nimport {GenericBrowserDomAdapter} from './generic_browser_adapter';\n\nconst nodeContains: (this: Node, other: Node) => boolean = (() => {\n  if (global['Node']) {\n    return global['Node'].prototype.contains || function(this: Node, node: any) {\n      return !!(this.compareDocumentPosition(node) & 16);\n    };\n  }\n\n  return undefined as any;\n})();\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nexport class BrowserDomAdapter extends GenericBrowserDomAdapter {\n  static makeCurrent() {\n    setRootDomAdapter(new BrowserDomAdapter());\n  }\n  getProperty(el: Node, name: string): any {\n    return (<any>el)[name];\n  }\n\n  log(error: string): void {\n    if (window.console) {\n      window.console.log && window.console.log(error);\n    }\n  }\n\n  logGroup(error: string): void {\n    if (window.console) {\n      window.console.group && window.console.group(error);\n    }\n  }\n\n  logGroupEnd(): void {\n    if (window.console) {\n      window.console.groupEnd && window.console.groupEnd();\n    }\n  }\n\n  onAndCancel(el: Node, evt: any, listener: any): Function {\n    el.addEventListener(evt, listener, false);\n    // Needed to follow Dart's subscription semantic, until fix of\n    // https://code.google.com/p/dart/issues/detail?id=17406\n    return () => {\n      el.removeEventListener(evt, listener, false);\n    };\n  }\n  dispatchEvent(el: Node, evt: any) {\n    el.dispatchEvent(evt);\n  }\n  remove(node: Node): Node {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n    return node;\n  }\n  getValue(el: any): string {\n    return el.value;\n  }\n  createElement(tagName: string, doc?: Document): HTMLElement {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n  createHtmlDocument(): HTMLDocument {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n  getDefaultDocument(): Document {\n    return document;\n  }\n\n  isElementNode(node: Node): boolean {\n    return node.nodeType === Node.ELEMENT_NODE;\n  }\n\n  isShadowRoot(node: any): boolean {\n    return node instanceof DocumentFragment;\n  }\n\n  getGlobalEventTarget(doc: Document, target: string): EventTarget|null {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return doc;\n    }\n    if (target === 'body') {\n      return doc.body;\n    }\n    return null;\n  }\n  getHistory(): History {\n    return window.history;\n  }\n  getLocation(): Location {\n    return window.location;\n  }\n  getBaseHref(doc: Document): string|null {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n  resetBaseElement(): void {\n    baseElement = null;\n  }\n  getUserAgent(): string {\n    return window.navigator.userAgent;\n  }\n  performanceNow(): number {\n    // performance.now() is not available in all browsers, see\n    // https://caniuse.com/high-resolution-time\n    return window.performance && window.performance.now ? window.performance.now() :\n                                                          new Date().getTime();\n  }\n\n  supportsCookies(): boolean {\n    return true;\n  }\n\n  getCookie(name: string): string|null {\n    return parseCookieValue(document.cookie, name);\n  }\n}\n\nlet baseElement: HTMLElement|null = null;\nfunction getBaseElementHref(): string|null {\n  if (!baseElement) {\n    baseElement = document.querySelector('base')!;\n    if (!baseElement) {\n      return null;\n    }\n  }\n  return baseElement.getAttribute('href');\n}\n\n// based on urlUtils.js in AngularJS 1\nlet urlParsingNode: any;\nfunction relativePath(url: any): string {\n  if (!urlParsingNode) {\n    urlParsingNode = document.createElement('a');\n  }\n  urlParsingNode.setAttribute('href', url);\n  return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\n                                                       '/' + urlParsingNode.pathname;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵDomAdapter as DomAdapter} from '@angular/common';\n\n\n\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class GenericBrowserDomAdapter extends DomAdapter {\n  constructor() {\n    super();\n  }\n\n  supportsDOMEvents(): boolean {\n    return true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {APP_INITIALIZER, ApplicationInitStatus, Inject, InjectionToken, Injector, StaticProvider} from '@angular/core';\n\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nexport const TRANSITION_ID = new InjectionToken('TRANSITION_ID');\n\nexport function appInitializerFactory(transitionId: string, document: any, injector: Injector) {\n  return () => {\n    // Wait for all application initializers to be completed before removing the styles set by\n    // the server.\n    injector.get(ApplicationInitStatus).donePromise.then(() => {\n      const dom = getDOM();\n      const styles: any[] =\n          Array.prototype.slice.apply(document.querySelectorAll(`style[ng-transition]`));\n      styles.filter(el => el.getAttribute('ng-transition') === transitionId)\n          .forEach(el => dom.remove(el));\n    });\n  };\n}\n\nexport const SERVER_TRANSITION_PROVIDERS: StaticProvider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: appInitializerFactory,\n    deps: [TRANSITION_ID, DOCUMENT, Injector],\n    multi: true\n  },\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {GetTestability, setTestabilityGetter, Testability, TestabilityRegistry, ɵglobal as global} from '@angular/core';\n\nexport class BrowserGetTestability implements GetTestability {\n  static init() {\n    setTestabilityGetter(new BrowserGetTestability());\n  }\n\n  addToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new Error('Could not find testability for element.');\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const whenAllStable = (callback: any /** TODO #9100 */) => {\n      const testabilities = global['getAllAngularTestabilities']();\n      let count = testabilities.length;\n      let didWork = false;\n      const decrement = function(didWork_: any /** TODO #9100 */) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach(function(testability: any /** TODO #9100 */) {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    if (elem == null) {\n      return null;\n    }\n    const t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, (<any>elem).host, true);\n    }\n    return this.findTestabilityInTree(registry, elem.parentElement, true);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵglobal as global} from '@angular/core';\n\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\nconst DASH_CASE_REGEXP = /-([a-z])/g;\n\n\nexport function camelCaseToDashCase(input: string): string {\n  return input.replace(CAMEL_CASE_REGEXP, (...m: string[]) => '-' + m[1].toLowerCase());\n}\n\nexport function dashCaseToCamelCase(input: string): string {\n  return input.replace(DASH_CASE_REGEXP, (...m: string[]) => m[1].toUpperCase());\n}\n\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nexport function exportNgVar(name: string, value: any): void {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for angularJS (via `goog.provide('ng....')`).\n    const ng = global['ng'] = (global['ng'] as {[key: string]: any} | undefined) || {};\n    ng[name] = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_INITIALIZER, ApplicationRef, DebugNode, NgProbeToken, NgZone, Optional, Provider, ɵgetDebugNodeR2} from '@angular/core';\n\nimport {exportNgVar} from '../util';\n\nconst CORE_TOKENS = (() => ({\n                       'ApplicationRef': ApplicationRef,\n                       'NgZone': NgZone,\n                     }))();\n\nconst INSPECT_GLOBAL_NAME = 'probe';\nconst CORE_TOKENS_GLOBAL_NAME = 'coreTokens';\n\n/**\n * Returns a {@link DebugElement} for the given native DOM element, or\n * null if the given native element does not have an Angular view associated\n * with it.\n */\nexport function inspectNativeElementR2(element: any): DebugNode|null {\n  return ɵgetDebugNodeR2(element);\n}\n\nexport function _createNgProbeR2(coreTokens: NgProbeToken[]): any {\n  exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElementR2);\n  exportNgVar(CORE_TOKENS_GLOBAL_NAME, {...CORE_TOKENS, ..._ngProbeTokensToMap(coreTokens || [])});\n  return () => inspectNativeElementR2;\n}\n\nfunction _ngProbeTokensToMap(tokens: NgProbeToken[]): {[name: string]: any} {\n  return tokens.reduce((prev: any, t: any) => (prev[t.name] = t.token, prev), {});\n}\n\n/**\n * In Ivy, we don't support NgProbe because we have our own set of testing utilities\n * with more robust functionality.\n *\n * We shouldn't bring in NgProbe because it prevents DebugNode and friends from\n * tree-shaking properly.\n */\nexport const ELEMENT_PROBE_PROVIDERS__POST_R3__ = [];\n\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n */\nexport const ELEMENT_PROBE_PROVIDERS__PRE_R3__: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: _createNgProbeR2,\n    deps: [\n      [NgProbeToken, new Optional()],\n    ],\n    multi: true,\n  },\n];\n\nexport const ELEMENT_PROBE_PROVIDERS = ELEMENT_PROBE_PROVIDERS__PRE_R3__;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, NgZone} from '@angular/core';\n\n/**\n * The injection token for the event-manager plug-in service.\n *\n * @publicApi\n */\nexport const EVENT_MANAGER_PLUGINS =\n    new InjectionToken<EventManagerPlugin[]>('EventManagerPlugins');\n\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\n@Injectable()\nexport class EventManager {\n  private _plugins: EventManagerPlugin[];\n  private _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n\n  /**\n   * Initializes an instance of the event-manager service.\n   */\n  constructor(@Inject(EVENT_MANAGER_PLUGINS) plugins: EventManagerPlugin[], private _zone: NgZone) {\n    plugins.forEach(p => p.manager = this);\n    this._plugins = plugins.slice().reverse();\n  }\n\n  /**\n   * Registers a handler for a specific element and event.\n   *\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns  A callback function that can be used to remove the handler.\n   */\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n\n  /**\n   * Registers a global handler for an event in a target view.\n   *\n   * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns A callback function that can be used to remove the handler.\n   */\n  addGlobalEventListener(target: string, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addGlobalEventListener(target, eventName, handler);\n  }\n\n  /**\n   * Retrieves the compilation zone in which event listeners are registered.\n   */\n  getZone(): NgZone {\n    return this._zone;\n  }\n\n  /** @internal */\n  _findPluginFor(eventName: string): EventManagerPlugin {\n    const plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const plugins = this._plugins;\n    for (let i = 0; i < plugins.length; i++) {\n      const plugin = plugins[i];\n      if (plugin.supports(eventName)) {\n        this._eventNameToPlugin.set(eventName, plugin);\n        return plugin;\n      }\n    }\n    throw new Error(`No event manager plugin found for event ${eventName}`);\n  }\n}\n\nexport abstract class EventManagerPlugin {\n  constructor(private _doc: any) {}\n\n  // TODO(issue/24571): remove '!'.\n  manager!: EventManager;\n\n  abstract supports(eventName: string): boolean;\n\n  abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n\n  addGlobalEventListener(element: string, eventName: string, handler: Function): Function {\n    const target: HTMLElement = getDOM().getGlobalEventTarget(this._doc, element);\n    if (!target) {\n      throw new Error(`Unsupported event target ${target} for event ${eventName}`);\n    }\n    return this.addEventListener(target, eventName, handler);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\n\n@Injectable()\nexport class SharedStylesHost {\n  /** @internal */\n  protected _stylesSet = new Set<string>();\n\n  addStyles(styles: string[]): void {\n    const additions = new Set<string>();\n    styles.forEach(style => {\n      if (!this._stylesSet.has(style)) {\n        this._stylesSet.add(style);\n        additions.add(style);\n      }\n    });\n    this.onStylesAdded(additions);\n  }\n\n  onStylesAdded(additions: Set<string>): void {}\n\n  getAllStyles(): string[] {\n    return Array.from(this._stylesSet);\n  }\n}\n\n@Injectable()\nexport class DomSharedStylesHost extends SharedStylesHost implements OnDestroy {\n  private _hostNodes = new Set<Node>();\n  private _styleNodes = new Set<Node>();\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n    this._hostNodes.add(_doc.head);\n  }\n\n  private _addStylesToHost(styles: Set<string>, host: Node): void {\n    styles.forEach((style: string) => {\n      const styleEl = this._doc.createElement('style');\n      styleEl.textContent = style;\n      this._styleNodes.add(host.appendChild(styleEl));\n    });\n  }\n\n  addHost(hostNode: Node): void {\n    this._addStylesToHost(this._stylesSet, hostNode);\n    this._hostNodes.add(hostNode);\n  }\n\n  removeHost(hostNode: Node): void {\n    this._hostNodes.delete(hostNode);\n  }\n\n  onStylesAdded(additions: Set<string>): void {\n    this._hostNodes.forEach(hostNode => this._addStylesToHost(additions, hostNode));\n  }\n\n  ngOnDestroy(): void {\n    this._styleNodes.forEach(styleNode => getDOM().remove(styleNode));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_ID, Inject, Injectable, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, ViewEncapsulation} from '@angular/core';\n\nimport {EventManager} from './events/event_manager';\nimport {DomSharedStylesHost} from './shared_styles_host';\n\nexport const NAMESPACE_URIS: {[ns: string]: string} = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n};\n\nconst COMPONENT_REGEX = /%COMP%/g;\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || !!ngDevMode;\n\nexport const COMPONENT_VARIABLE = '%COMP%';\nexport const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n\nexport function shimContentAttribute(componentShortId: string): string {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimHostAttribute(componentShortId: string): string {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function flattenStyles(\n    compId: string, styles: Array<any|any[]>, target: string[]): string[] {\n  for (let i = 0; i < styles.length; i++) {\n    let style = styles[i];\n\n    if (Array.isArray(style)) {\n      flattenStyles(compId, style, target);\n    } else {\n      style = style.replace(COMPONENT_REGEX, compId);\n      target.push(style);\n    }\n  }\n  return target;\n}\n\nfunction decoratePreventDefault(eventHandler: Function): Function {\n  // `DebugNode.triggerEventHandler` needs to know if the listener was created with\n  // decoratePreventDefault or is a listener added outside the Angular context so it can handle the\n  // two differently. In the first case, the special '__ngUnwrap__' token is passed to the unwrap\n  // the listener (see below).\n  return (event: any) => {\n    // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function\n    // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The debug_node\n    // can inspect the listener toString contents for the existence of this special token. Because\n    // the token is a string literal, it is ensured to not be modified by compiled code.\n    if (event === '__ngUnwrap__') {\n      return eventHandler;\n    }\n\n    const allowDefaultBehavior = eventHandler(event);\n    if (allowDefaultBehavior === false) {\n      // TODO(tbosch): move preventDefault into event plugins...\n      event.preventDefault();\n      event.returnValue = false;\n    }\n\n    return undefined;\n  };\n}\n\nlet hasLoggedNativeEncapsulationWarning = false;\n\n@Injectable()\nexport class DomRendererFactory2 implements RendererFactory2 {\n  private rendererByCompId = new Map<string, Renderer2>();\n  private defaultRenderer: Renderer2;\n\n  constructor(\n      private eventManager: EventManager, private sharedStylesHost: DomSharedStylesHost,\n      @Inject(APP_ID) private appId: string) {\n    this.defaultRenderer = new DefaultDomRenderer2(eventManager);\n  }\n\n  createRenderer(element: any, type: RendererType2|null): Renderer2 {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n    switch (type.encapsulation) {\n      case ViewEncapsulation.Emulated: {\n        let renderer = this.rendererByCompId.get(type.id);\n        if (!renderer) {\n          renderer = new EmulatedEncapsulationDomRenderer2(\n              this.eventManager, this.sharedStylesHost, type, this.appId);\n          this.rendererByCompId.set(type.id, renderer);\n        }\n        (<EmulatedEncapsulationDomRenderer2>renderer).applyToHost(element);\n        return renderer;\n      }\n      case 1:\n      case ViewEncapsulation.ShadowDom:\n        // TODO(FW-2290): remove the `case 1:` fallback logic and the warning in v12.\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            !hasLoggedNativeEncapsulationWarning && type.encapsulation === 1) {\n          hasLoggedNativeEncapsulationWarning = true;\n          console.warn(\n              'ViewEncapsulation.Native is no longer supported. Falling back to ViewEncapsulation.ShadowDom. The fallback will be removed in v12.');\n        }\n\n        return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\n      default: {\n        if (!this.rendererByCompId.has(type.id)) {\n          const styles = flattenStyles(type.id, type.styles, []);\n          this.sharedStylesHost.addStyles(styles);\n          this.rendererByCompId.set(type.id, this.defaultRenderer);\n        }\n        return this.defaultRenderer;\n      }\n    }\n  }\n\n  begin() {}\n  end() {}\n}\n\nclass DefaultDomRenderer2 implements Renderer2 {\n  data: {[key: string]: any} = Object.create(null);\n\n  constructor(private eventManager: EventManager) {}\n\n  destroy(): void {}\n\n  destroyNode: null;\n\n  createElement(name: string, namespace?: string): any {\n    if (namespace) {\n      // In cases where Ivy (not ViewEngine) is giving us the actual namespace, the look up by key\n      // will result in undefined, so we just return the namespace here.\n      return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n    }\n\n    return document.createElement(name);\n  }\n\n  createComment(value: string): any {\n    return document.createComment(value);\n  }\n\n  createText(value: string): any {\n    return document.createTextNode(value);\n  }\n\n  appendChild(parent: any, newChild: any): void {\n    parent.appendChild(newChild);\n  }\n\n  insertBefore(parent: any, newChild: any, refChild: any): void {\n    if (parent) {\n      parent.insertBefore(newChild, refChild);\n    }\n  }\n\n  removeChild(parent: any, oldChild: any): void {\n    if (parent) {\n      parent.removeChild(oldChild);\n    }\n  }\n\n  selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): any {\n    let el: any = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\n                                                       selectorOrNode;\n    if (!el) {\n      throw new Error(`The selector \"${selectorOrNode}\" did not match any elements`);\n    }\n    if (!preserveContent) {\n      el.textContent = '';\n    }\n    return el;\n  }\n\n  parentNode(node: any): any {\n    return node.parentNode;\n  }\n\n  nextSibling(node: any): any {\n    return node.nextSibling;\n  }\n\n  setAttribute(el: any, name: string, value: string, namespace?: string): void {\n    if (namespace) {\n      name = namespace + ':' + name;\n      // TODO(FW-811): Ivy may cause issues here because it's passing around\n      // full URIs for namespaces, therefore this lookup will fail.\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n\n  removeAttribute(el: any, name: string, namespace?: string): void {\n    if (namespace) {\n      // TODO(FW-811): Ivy may cause issues here because it's passing around\n      // full URIs for namespaces, therefore this lookup will fail.\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        // TODO(FW-811): Since ivy is passing around full URIs for namespaces\n        // this could result in properties like `http://www.w3.org/2000/svg:cx=\"123\"`,\n        // which is wrong.\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n\n  addClass(el: any, name: string): void {\n    el.classList.add(name);\n  }\n\n  removeClass(el: any, name: string): void {\n    el.classList.remove(name);\n  }\n\n  setStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {\n      el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n\n  removeStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      el.style.removeProperty(style);\n    } else {\n      // IE requires '' instead of null\n      // see https://github.com/angular/angular/issues/7916\n      el.style[style] = '';\n    }\n  }\n\n  setProperty(el: any, name: string, value: any): void {\n    NG_DEV_MODE && checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n\n  setValue(node: any, value: string): void {\n    node.nodeValue = value;\n  }\n\n  listen(target: 'window'|'document'|'body'|any, event: string, callback: (event: any) => boolean):\n      () => void {\n    NG_DEV_MODE && checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      return <() => void>this.eventManager.addGlobalEventListener(\n          target, event, decoratePreventDefault(callback));\n    }\n    return <() => void>this.eventManager.addEventListener(\n               target, event, decoratePreventDefault(callback)) as () => void;\n  }\n}\n\nconst AT_CHARCODE = (() => '@'.charCodeAt(0))();\nfunction checkNoSyntheticProp(name: string, nameKind: string) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new Error(`Found the synthetic ${nameKind} ${\n        name}. Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.`);\n  }\n}\n\nclass EmulatedEncapsulationDomRenderer2 extends DefaultDomRenderer2 {\n  private contentAttr: string;\n  private hostAttr: string;\n\n  constructor(\n      eventManager: EventManager, sharedStylesHost: DomSharedStylesHost,\n      private component: RendererType2, appId: string) {\n    super(eventManager);\n    const styles = flattenStyles(appId + '-' + component.id, component.styles, []);\n    sharedStylesHost.addStyles(styles);\n\n    this.contentAttr = shimContentAttribute(appId + '-' + component.id);\n    this.hostAttr = shimHostAttribute(appId + '-' + component.id);\n  }\n\n  applyToHost(element: any) {\n    super.setAttribute(element, this.hostAttr, '');\n  }\n\n  createElement(parent: any, name: string): Element {\n    const el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\n\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n  private shadowRoot: any;\n\n  constructor(\n      eventManager: EventManager, private sharedStylesHost: DomSharedStylesHost,\n      private hostEl: any, component: RendererType2) {\n    super(eventManager);\n    this.shadowRoot = (hostEl as any).attachShadow({mode: 'open'});\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    const styles = flattenStyles(component.id, component.styles, []);\n    for (let i = 0; i < styles.length; i++) {\n      const styleEl = document.createElement('style');\n      styleEl.textContent = styles[i];\n      this.shadowRoot.appendChild(styleEl);\n    }\n  }\n\n  private nodeOrShadowRoot(node: any): any {\n    return node === this.hostEl ? this.shadowRoot : node;\n  }\n\n  destroy() {\n    this.sharedStylesHost.removeHost(this.shadowRoot);\n  }\n\n  appendChild(parent: any, newChild: any): void {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n  insertBefore(parent: any, newChild: any, refChild: any): void {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n  removeChild(parent: any, oldChild: any): void {\n    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n  }\n  parentNode(node: any): any {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n@Injectable()\nexport class DomEventsPlugin extends EventManagerPlugin {\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  supports(eventName: string): boolean {\n    return true;\n  }\n\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    element.addEventListener(eventName, handler as EventListener, false);\n    return () => this.removeEventListener(element, eventName, handler as EventListener);\n  }\n\n  removeEventListener(target: any, eventName: string, callback: Function): void {\n    return target.removeEventListener(eventName, callback as EventListener);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, NgModule, Optional, Provider, ɵConsole as Console} from '@angular/core';\n\nimport {EVENT_MANAGER_PLUGINS, EventManagerPlugin} from './event_manager';\n\n\n\n/**\n * Supported HammerJS recognizer event names.\n */\nconst EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n};\n\n/**\n * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * @ngModule HammerModule\n * @publicApi\n */\nexport const HAMMER_GESTURE_CONFIG = new InjectionToken<HammerGestureConfig>('HammerGestureConfig');\n\n\n/**\n * Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\n *\n * @publicApi\n */\nexport type HammerLoader = () => Promise<void>;\n\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\nexport const HAMMER_LOADER = new InjectionToken<HammerLoader>('HammerLoader');\n\nexport interface HammerInstance {\n  on(eventName: string, callback?: Function): void;\n  off(eventName: string, callback?: Function): void;\n  destroy?(): void;\n}\n\n/**\n * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\n@Injectable()\nexport class HammerGestureConfig {\n  /**\n   * A set of supported event names for gestures to be used in Angular.\n   * Angular supports all built-in recognizers, as listed in\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  events: string[] = [];\n\n  /**\n   * Maps gesture event names to a set of configuration options\n   * that specify overrides to the default values for specific properties.\n   *\n   * The key is a supported event name to be configured,\n   * and the options object contains a set of properties, with override values\n   * to be applied to the named recognizer event.\n   * For example, to disable recognition of the rotate event, specify\n   *  `{\"rotate\": {\"enable\": false}}`.\n   *\n   * Properties that are not present take the HammerJS default values.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   *\n   */\n  overrides: {[key: string]: Object} = {};\n\n  /**\n   * Properties whose default values can be overridden for a given event.\n   * Different sets of properties apply to different events.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  options?: {\n    cssProps?: any;\n    domEvents?: boolean;\n    enable?: boolean | ((manager: any) => boolean);\n    preset?: any[];\n    touchAction?: string;\n    recognizers?: any[];\n    inputClass?: any;\n    inputTarget?: EventTarget;\n  };\n\n  /**\n   * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n   * and attaches it to a given HTML element.\n   * @param element The element that will recognize gestures.\n   * @returns A HammerJS event-manager object.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new Hammer!(element, this.options);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\n}\n\n/**\n * Event plugin that adds Hammer support to an application.\n *\n * @ngModule HammerModule\n */\n@Injectable()\nexport class HammerGesturesPlugin extends EventManagerPlugin {\n  constructor(\n      @Inject(DOCUMENT) doc: any,\n      @Inject(HAMMER_GESTURE_CONFIG) private _config: HammerGestureConfig, private console: Console,\n      @Optional() @Inject(HAMMER_LOADER) private loader?: HammerLoader|null) {\n    super(doc);\n  }\n\n  supports(eventName: string): boolean {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!(window as any).Hammer && !this.loader) {\n      this.console.warn(\n          `The \"${eventName}\" event cannot be bound because Hammer.JS is not ` +\n          `loaded and no custom loader has been specified.`);\n      return false;\n    }\n\n    return true;\n  }\n\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    // If Hammer is not present but a loader is specified, we defer adding the event listener\n    // until Hammer is loaded.\n    if (!(window as any).Hammer && this.loader) {\n      // This `addEventListener` method returns a function to remove the added listener.\n      // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n      // than remove anything.\n      let cancelRegistration = false;\n      let deregister: Function = () => {\n        cancelRegistration = true;\n      };\n\n      this.loader()\n          .then(() => {\n            // If Hammer isn't actually loaded when the custom loader resolves, give up.\n            if (!(window as any).Hammer) {\n              this.console.warn(\n                  `The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n              deregister = () => {};\n              return;\n            }\n\n            if (!cancelRegistration) {\n              // Now that Hammer is loaded and the listener is being loaded for real,\n              // the deregistration function changes from canceling registration to removal.\n              deregister = this.addEventListener(element, eventName, handler);\n            }\n          })\n          .catch(() => {\n            this.console.warn(\n                `The \"${eventName}\" event cannot be bound because the custom ` +\n                `Hammer.JS loader failed.`);\n            deregister = () => {};\n          });\n\n      // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n      // can change the behavior of `deregister` once the listener is added. Using a closure in\n      // this way allows us to avoid any additional data structures to track listener removal.\n      return () => {\n        deregister();\n      };\n    }\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const mc = this._config.buildHammer(element);\n      const callback = function(eventObj: HammerInput) {\n        zone.runGuarded(function() {\n          handler(eventObj);\n        });\n      };\n      mc.on(eventName, callback);\n      return () => {\n        mc.off(eventName, callback);\n        // destroy mc to prevent memory leak\n        if (typeof mc.destroy === 'function') {\n          mc.destroy();\n        }\n      };\n    });\n  }\n\n  isCustomEvent(eventName: string): boolean {\n    return this._config.events.indexOf(eventName) > -1;\n  }\n}\n\n/**\n * In Ivy, support for Hammer gestures is optional, so applications must\n * import the `HammerModule` at root to turn on support. This means that\n * Hammer-specific code can be tree-shaken away if not needed.\n */\nexport const HAMMER_PROVIDERS__POST_R3__ = [];\n\n/**\n * In View Engine, support for Hammer gestures is built-in by default.\n */\nexport const HAMMER_PROVIDERS__PRE_R3__: Provider[] = [\n  {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: HammerGesturesPlugin,\n    multi: true,\n    deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]\n  },\n  {provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: []},\n];\n\nexport const HAMMER_PROVIDERS = HAMMER_PROVIDERS__PRE_R3__;\n\n/**\n * Adds support for HammerJS.\n *\n * Import this module at the root of your application so that Angular can work with\n * HammerJS to detect gesture events.\n *\n * Note that applications still need to include the HammerJS script itself. This module\n * simply sets up the coordination layer between HammerJS and Angular's EventManager.\n *\n * @publicApi\n */\n@NgModule({providers: HAMMER_PROVIDERS__PRE_R3__})\nexport class HammerModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n\nconst DOM_KEY_LOCATION_NUMPAD = 3;\n\n// Map to convert some key or keyIdentifier values to what will be returned by getEventKey\nconst _keyMap: {[k: string]: string} = {\n  // The following values are here for cross-browser compatibility and to match the W3C standard\n  // cf https://www.w3.org/TR/DOM-Level-3-Events-key/\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n\n// There is a bug in Chrome for numeric keypad keys:\n// https://code.google.com/p/chromium/issues/detail?id=155654\n// 1, 2, 3 ... are reported as A, B, C ...\nconst _chromeNumKeyPadMap = {\n  'A': '1',\n  'B': '2',\n  'C': '3',\n  'D': '4',\n  'E': '5',\n  'F': '6',\n  'G': '7',\n  'H': '8',\n  'I': '9',\n  'J': '*',\n  'K': '+',\n  'M': '-',\n  'N': '.',\n  'O': '/',\n  '\\x60': '0',\n  '\\x90': 'NumLock'\n};\n\n\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey\n};\n\n/**\n * @publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\n@Injectable()\nexport class KeyEventsPlugin extends EventManagerPlugin {\n  /**\n   * Initializes an instance of the browser plug-in.\n   * @param doc The document in which key events will be detected.\n   */\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  /**\n   * Reports whether a named key event is supported.\n   * @param eventName The event name to query.\n   * @return True if the named key event is supported.\n   */\n  supports(eventName: string): boolean {\n    return KeyEventsPlugin.parseEventName(eventName) != null;\n  }\n\n  /**\n   * Registers a handler for a specific element and key event.\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the key event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns The key event that was registered.\n   */\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const parsedEvent = KeyEventsPlugin.parseEventName(eventName)!;\n\n    const outsideHandler =\n        KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n\n  static parseEventName(eventName: string): {fullKey: string, domEventName: string}|null {\n    const parts: string[] = eventName.toLowerCase().split('.');\n\n    const domEventName = parts.shift();\n    if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const key = KeyEventsPlugin._normalizeKey(parts.pop()!);\n\n    let fullKey = '';\n    MODIFIER_KEYS.forEach(modifierName => {\n      const index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.\n    //       The code must remain in the `result['domEventName']` form.\n    // return {domEventName, fullKey};\n    const result: {fullKey: string, domEventName: string} = {} as any;\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n\n  static getEventFullKey(event: KeyboardEvent): string {\n    let fullKey = '';\n    let key = getEventKey(event);\n    key = key.toLowerCase();\n    if (key === ' ') {\n      key = 'space';  // for readability\n    } else if (key === '.') {\n      key = 'dot';  // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName != key) {\n        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          fullKey += modifierName + '.';\n        }\n      }\n    });\n    fullKey += key;\n    return fullKey;\n  }\n\n  /**\n   * Configures a handler callback for a key event.\n   * @param fullKey The event name that combines all simultaneous keystrokes.\n   * @param handler The function that responds to the key event.\n   * @param zone The zone in which the event occurred.\n   * @returns A callback function.\n   */\n  static eventCallback(fullKey: any, handler: Function, zone: NgZone): Function {\n    return (event: any /** TODO #9100 */) => {\n      if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n\n  /** @internal */\n  static _normalizeKey(keyName: string): string {\n    // TODO: switch to a Map if the mapping grows too much\n    switch (keyName) {\n      case 'esc':\n        return 'escape';\n      default:\n        return keyName;\n    }\n  }\n}\n\nfunction getEventKey(event: any): string {\n  let key = event.key;\n  if (key == null) {\n    key = event.keyIdentifier;\n    // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\n    // Safari cf\n    // https://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\n    if (key == null) {\n      return 'Unidentified';\n    }\n    if (key.startsWith('U+')) {\n      key = String.fromCharCode(parseInt(key.substring(2), 16));\n      if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\n        // There is a bug in Chrome for numeric keypad keys:\n        // https://code.google.com/p/chromium/issues/detail?id=155654\n        // 1, 2, 3 ... are reported as A, B, C ...\n        key = (_chromeNumKeyPadMap as any)[key];\n      }\n    }\n  }\n\n  return _keyMap[key] || key;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {forwardRef, Inject, Injectable, Injector, Sanitizer, SecurityContext, ɵ_sanitizeHtml as _sanitizeHtml, ɵ_sanitizeUrl as _sanitizeUrl, ɵallowSanitizationBypassAndThrow as allowSanitizationBypassOrThrow, ɵbypassSanitizationTrustHtml as bypassSanitizationTrustHtml, ɵbypassSanitizationTrustResourceUrl as bypassSanitizationTrustResourceUrl, ɵbypassSanitizationTrustScript as bypassSanitizationTrustScript, ɵbypassSanitizationTrustStyle as bypassSanitizationTrustStyle, ɵbypassSanitizationTrustUrl as bypassSanitizationTrustUrl, ɵBypassType as BypassType, ɵgetSanitizationBypassType as getSanitizationBypassType, ɵunwrapSafeValue as unwrapSafeValue} from '@angular/core';\n\nexport {SecurityContext};\n\n\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useExisting: forwardRef(() => DomSanitizerImpl)})\nexport abstract class DomSanitizer implements Sanitizer {\n  /**\n   * Sanitizes a value for use in the given SecurityContext.\n   *\n   * If value is trusted for the context, this method will unwrap the contained safe value and use\n   * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n   * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n   * is responsible to make sure that the value can definitely be safely used in the given context.\n   */\n  abstract sanitize(context: SecurityContext, value: SafeValue|string|null): string|null;\n\n  /**\n   * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n   * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n   * leave safe HTML intact, so in most situations this method should not be used.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n\n  /**\n   * Bypass security and trust the given value to be safe style value (CSS).\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n\n  /**\n   * Bypass security and trust the given value to be safe JavaScript.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustScript(value: string): SafeScript;\n\n  /**\n   * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n   * in hyperlinks or `<img src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n\n  /**\n   * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n   * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\nexport function domSanitizerImplFactory(injector: Injector) {\n  return new DomSanitizerImpl(injector.get(DOCUMENT));\n}\n\n@Injectable({providedIn: 'root', useFactory: domSanitizerImplFactory, deps: [Injector]})\nexport class DomSanitizerImpl extends DomSanitizer {\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n  }\n\n  sanitize(ctx: SecurityContext, value: SafeValue|string|null): string|null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value as string;\n      case SecurityContext.HTML:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Html)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeHtml(this._doc, String(value));\n      case SecurityContext.STYLE:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Style)) {\n          return unwrapSafeValue(value);\n        }\n        return value as string;\n      case SecurityContext.SCRIPT:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Script)) {\n          return unwrapSafeValue(value);\n        }\n        throw new Error('unsafe value used in a script context');\n      case SecurityContext.URL:\n        const type = getSanitizationBypassType(value);\n        if (allowSanitizationBypassOrThrow(value, BypassType.Url)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.ResourceUrl)) {\n          return unwrapSafeValue(value);\n        }\n        throw new Error(\n            'unsafe value used in a resource URL context (see https://g.co/ng/security#xss)');\n      default:\n        throw new Error(`Unexpected SecurityContext ${ctx} (see https://g.co/ng/security#xss)`);\n    }\n  }\n\n  bypassSecurityTrustHtml(value: string): SafeHtml {\n    return bypassSanitizationTrustHtml(value);\n  }\n  bypassSecurityTrustStyle(value: string): SafeStyle {\n    return bypassSanitizationTrustStyle(value);\n  }\n  bypassSecurityTrustScript(value: string): SafeScript {\n    return bypassSanitizationTrustScript(value);\n  }\n  bypassSecurityTrustUrl(value: string): SafeUrl {\n    return bypassSanitizationTrustUrl(value);\n  }\n  bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return bypassSanitizationTrustResourceUrl(value);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule, DOCUMENT, ɵPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID} from '@angular/common';\nimport {APP_ID, ApplicationModule, createPlatformFactory, ErrorHandler, Inject, ModuleWithProviders, NgModule, NgZone, Optional, PLATFORM_ID, PLATFORM_INITIALIZER, platformCore, PlatformRef, RendererFactory2, Sanitizer, SkipSelf, StaticProvider, Testability, ɵConsole as Console, ɵINJECTOR_SCOPE as INJECTOR_SCOPE, ɵsetDocument} from '@angular/core';\n\nimport {BrowserDomAdapter} from './browser/browser_adapter';\nimport {SERVER_TRANSITION_PROVIDERS, TRANSITION_ID} from './browser/server-transition';\nimport {BrowserGetTestability} from './browser/testability';\nimport {ELEMENT_PROBE_PROVIDERS} from './dom/debug/ng_probe';\nimport {DomRendererFactory2} from './dom/dom_renderer';\nimport {DomEventsPlugin} from './dom/events/dom_events';\nimport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nimport {HAMMER_PROVIDERS} from './dom/events/hammer_gestures';\nimport {KeyEventsPlugin} from './dom/events/key_events';\nimport {DomSharedStylesHost, SharedStylesHost} from './dom/shared_styles_host';\nimport {DomSanitizer, DomSanitizerImpl} from './security/dom_sanitization_service';\n\nexport function initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n  BrowserGetTestability.init();\n}\n\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n\nexport function _document(): any {\n  // Tell ivy about the global document\n  ɵsetDocument(document);\n  return document;\n}\n\nexport const INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[] = [\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n  {provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true},\n  {provide: DOCUMENT, useFactory: _document, deps: []},\n];\n\nconst BROWSER_SANITIZATION_PROVIDERS__PRE_R3__: StaticProvider[] = [\n  {provide: Sanitizer, useExisting: DomSanitizer},\n  {provide: DomSanitizer, useClass: DomSanitizerImpl, deps: [DOCUMENT]},\n];\n\nexport const BROWSER_SANITIZATION_PROVIDERS__POST_R3__ = [];\n\n/**\n * @security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](https://g.co/ng/security).\n * @publicApi\n */\nexport const BROWSER_SANITIZATION_PROVIDERS = BROWSER_SANITIZATION_PROVIDERS__PRE_R3__;\n\n/**\n * A factory function that returns a `PlatformRef` instance associated with browser service\n * providers.\n *\n * @publicApi\n */\nexport const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef =\n    createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n\nexport const BROWSER_MODULE_PROVIDERS: StaticProvider[] = [\n  BROWSER_SANITIZATION_PROVIDERS,\n  {provide: INJECTOR_SCOPE, useValue: 'root'},\n  {provide: ErrorHandler, useFactory: errorHandler, deps: []},\n  {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: DomEventsPlugin,\n    multi: true,\n    deps: [DOCUMENT, NgZone, PLATFORM_ID]\n  },\n  {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT]},\n  HAMMER_PROVIDERS,\n  {\n    provide: DomRendererFactory2,\n    useClass: DomRendererFactory2,\n    deps: [EventManager, DomSharedStylesHost, APP_ID]\n  },\n  {provide: RendererFactory2, useExisting: DomRendererFactory2},\n  {provide: SharedStylesHost, useExisting: DomSharedStylesHost},\n  {provide: DomSharedStylesHost, useClass: DomSharedStylesHost, deps: [DOCUMENT]},\n  {provide: Testability, useClass: Testability, deps: [NgZone]},\n  {provide: EventManager, useClass: EventManager, deps: [EVENT_MANAGER_PLUGINS, NgZone]},\n  ELEMENT_PROBE_PROVIDERS,\n];\n\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\n@NgModule({providers: BROWSER_MODULE_PROVIDERS, exports: [CommonModule, ApplicationModule]})\nexport class BrowserModule {\n  constructor(@Optional() @SkipSelf() @Inject(BrowserModule) parentModule: BrowserModule|null) {\n    if (parentModule) {\n      throw new Error(\n          `BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);\n    }\n  }\n\n  /**\n   * Configures a browser-based app to transition from a server-rendered app, if\n   * one is present on the page.\n   *\n   * @param params An object containing an identifier for the app to transition.\n   * The ID must match between the client and server versions of the app.\n   * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n   */\n  static withServerTransition(params: {appId: string}): ModuleWithProviders<BrowserModule> {\n    return {\n      ngModule: BrowserModule,\n      providers: [\n        {provide: APP_ID, useValue: params.appId},\n        {provide: TRANSITION_ID, useExisting: APP_ID},\n        SERVER_TRANSITION_PROVIDERS,\n      ],\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵDomAdapter as DomAdapter, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, ɵɵinject} from '@angular/core';\n\n/**\n * Represents the attributes of an HTML `<meta>` element. The element itself is\n * represented by the internal `HTMLMetaElement`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see `Meta`\n *\n * @publicApi\n */\nexport type MetaDefinition = {\n  charset?: string;\n  content?: string;\n  httpEquiv?: string;\n  id?: string;\n  itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n}&{\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};\n\n/**\n * Factory to create a `Meta` service instance for the current DOM document.\n */\nexport function createMeta() {\n  return new Meta(ɵɵinject(DOCUMENT));\n}\n\n/**\n * A service for managing HTML `<meta>` tags.\n *\n * Properties of the `MetaDefinition` object match the attributes of the\n * HTML `<meta>` tag. These tags define document metadata that is important for\n * things like configuring a Content Security Policy, defining browser compatibility\n * and security settings, setting HTTP Headers, defining rich content for social sharing,\n * and Search Engine Optimization (SEO).\n *\n * To identify specific `<meta>` tags in a document, use an attribute selection\n * string in the format `\"tag_attribute='value string'\"`.\n * For example, an `attrSelector` value of `\"name='description'\"` matches a tag\n * whose `name` attribute has the value `\"description\"`.\n * Selectors are used with the `querySelector()` Document method,\n * in the format `meta[{attrSelector}]`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)\n *\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: createMeta, deps: []})\nexport class Meta {\n  private _dom: DomAdapter;\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    this._dom = getDOM();\n  }\n  /**\n   * Retrieves or creates a specific `<meta>` tag element in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * If an existing element is found, it is returned and is not modified in any way.\n   * @param tag The definition of a `<meta>` element to match or create.\n   * @param forceCreation True to create a new element without checking whether one already exists.\n   * @returns The existing element with the same attributes and values if found,\n   * the new element if no match is found, or `null` if the tag parameter is not defined.\n   */\n  addTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement|null {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n\n  /**\n   * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * @param tags An array of tag definitions to match or create.\n   * @param forceCreation True to create new elements without checking whether they already exist.\n   * @returns The matching elements if found, or the new elements.\n   */\n  addTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[] {\n    if (!tags) return [];\n    return tags.reduce((result: HTMLMetaElement[], tag: MetaDefinition) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n\n  /**\n   * Retrieves a `<meta>` tag element in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching element, if any.\n   */\n  getTag(attrSelector: string): HTMLMetaElement|null {\n    if (!attrSelector) return null;\n    return this._doc.querySelector(`meta[${attrSelector}]`) || null;\n  }\n\n  /**\n   * Retrieves a set of `<meta>` tag elements in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching elements, if any.\n   */\n  getTags(attrSelector: string): HTMLMetaElement[] {\n    if (!attrSelector) return [];\n    const list /*NodeList*/ = this._doc.querySelectorAll(`meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n\n  /**\n   * Modifies an existing `<meta>` tag element in the current HTML document.\n   * @param tag The tag description with which to replace the existing tag content.\n   * @param selector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   * If not supplied, matches a tag with the same `name` or `property` attribute value as the\n   * replacement tag.\n   * @return The modified element.\n   */\n  updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement|null {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const meta: HTMLMetaElement = this.getTag(selector)!;\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param attrSelector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   */\n  removeTag(attrSelector: string): void {\n    this.removeTagElement(this.getTag(attrSelector)!);\n  }\n\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param meta The tag definition to match against to identify an existing tag.\n   */\n  removeTagElement(meta: HTMLMetaElement): void {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n\n  private _getOrCreateElement(meta: MetaDefinition, forceCreation: boolean = false):\n      HTMLMetaElement {\n    if (!forceCreation) {\n      const selector: string = this._parseSelector(meta);\n      const elem: HTMLMetaElement = this.getTag(selector)!;\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      if (elem && this._containsAttributes(meta, elem)) return elem;\n    }\n    const element: HTMLMetaElement = this._dom.createElement('meta') as HTMLMetaElement;\n    this._setMetaElementAttributes(meta, element);\n    const head = this._doc.getElementsByTagName('head')[0];\n    head.appendChild(element);\n    return element;\n  }\n\n  private _setMetaElementAttributes(tag: MetaDefinition, el: HTMLMetaElement): HTMLMetaElement {\n    Object.keys(tag).forEach(\n        (prop: string) => el.setAttribute(this._getMetaKeyMap(prop), tag[prop]));\n    return el;\n  }\n\n  private _parseSelector(tag: MetaDefinition): string {\n    const attr: string = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n\n  private _containsAttributes(tag: MetaDefinition, elem: HTMLMetaElement): boolean {\n    return Object.keys(tag).every(\n        (key: string) => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key]);\n  }\n\n  private _getMetaKeyMap(prop: string): string {\n    return META_KEYS_MAP[prop] || prop;\n  }\n}\n\n/**\n * Mapping for MetaDefinition properties with their correct meta attribute names\n */\nconst META_KEYS_MAP: {[prop: string]: string;} = {\n  httpEquiv: 'http-equiv'\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, ɵɵinject} from '@angular/core';\n\n\n/**\n * Factory to create Title service.\n */\nexport function createTitle() {\n  return new Title(ɵɵinject(DOCUMENT));\n}\n\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: createTitle, deps: []})\nexport class Title {\n  constructor(@Inject(DOCUMENT) private _doc: any) {}\n  /**\n   * Get the title of the current HTML document.\n   */\n  getTitle(): string {\n    return this._doc.title;\n  }\n\n  /**\n   * Set the title of the current HTML document.\n   * @param newTitle\n   */\n  setTitle(newTitle: string) {\n    this._doc.title = newTitle || '';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst win = typeof window !== 'undefined' && window || <any>{};\nexport {win as window};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {ApplicationRef, ComponentRef} from '@angular/core';\nimport {window} from './browser';\n\nexport class ChangeDetectionPerfRecord {\n  constructor(public msPerTick: number, public numTicks: number) {}\n}\n\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nexport class AngularProfiler {\n  appRef: ApplicationRef;\n\n  constructor(ref: ComponentRef<any>) {\n    this.appRef = ref.injector.get(ApplicationRef);\n  }\n\n  // tslint:disable:no-console\n  /**\n   * Exercises change detection in a loop and then prints the average amount of\n   * time in milliseconds how long a single round of change detection takes for\n   * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n   * of 500 milliseconds.\n   *\n   * Optionally, a user may pass a `config` parameter containing a map of\n   * options. Supported options are:\n   *\n   * `record` (boolean) - causes the profiler to record a CPU profile while\n   * it exercises the change detector. Example:\n   *\n   * ```\n   * ng.profiler.timeChangeDetection({record: true})\n   * ```\n   */\n  timeChangeDetection(config: any): ChangeDetectionPerfRecord {\n    const record = config && config['record'];\n    const profileName = 'Change Detection';\n    // Profiler is not available in Android browsers without dev tools opened\n    const isProfilerAvailable = window.console.profile != null;\n    if (record && isProfilerAvailable) {\n      window.console.profile(profileName);\n    }\n    const start = getDOM().performanceNow();\n    let numTicks = 0;\n    while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {\n      this.appRef.tick();\n      numTicks++;\n    }\n    const end = getDOM().performanceNow();\n    if (record && isProfilerAvailable) {\n      window.console.profileEnd(profileName);\n    }\n    const msPerTick = (end - start) / numTicks;\n    window.console.log(`ran ${numTicks} change detection cycles`);\n    window.console.log(`${msPerTick.toFixed(2)} ms per check`);\n\n    return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {APP_ID, Injectable, NgModule} from '@angular/core';\n\nexport function escapeHtml(text: string): string {\n  const escapedText: {[k: string]: string} = {\n    '&': '&a;',\n    '\"': '&q;',\n    '\\'': '&s;',\n    '<': '&l;',\n    '>': '&g;',\n  };\n  return text.replace(/[&\"'<>]/g, s => escapedText[s]);\n}\n\nexport function unescapeHtml(text: string): string {\n  const unescapedText: {[k: string]: string} = {\n    '&a;': '&',\n    '&q;': '\"',\n    '&s;': '\\'',\n    '&l;': '<',\n    '&g;': '>',\n  };\n  return text.replace(/&[^;]+;/g, s => unescapedText[s]);\n}\n\n/**\n * A type-safe key to use with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n */\nexport type StateKey<T> = string&{__not_a_string: never};\n\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n */\nexport function makeStateKey<T = void>(key: string): StateKey<T> {\n  return key as StateKey<T>;\n}\n\n/**\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * `TransferState` will be available as an injectable token. To use it import\n * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialized in a\n * non-lossy manner.\n *\n * @publicApi\n */\n@Injectable()\nexport class TransferState {\n  private store: {[k: string]: {}|undefined} = {};\n  private onSerializeCallbacks: {[k: string]: () => {} | undefined} = {};\n\n  /** @internal */\n  static init(initState: {}) {\n    const transferState = new TransferState();\n    transferState.store = initState;\n    return transferState;\n  }\n\n  /**\n   * Get the value corresponding to a key. Return `defaultValue` if key is not found.\n   */\n  get<T>(key: StateKey<T>, defaultValue: T): T {\n    return this.store[key] !== undefined ? this.store[key] as T : defaultValue;\n  }\n\n  /**\n   * Set the value corresponding to a key.\n   */\n  set<T>(key: StateKey<T>, value: T): void {\n    this.store[key] = value;\n  }\n\n  /**\n   * Remove a key from the store.\n   */\n  remove<T>(key: StateKey<T>): void {\n    delete this.store[key];\n  }\n\n  /**\n   * Test whether a key exists in the store.\n   */\n  hasKey<T>(key: StateKey<T>) {\n    return this.store.hasOwnProperty(key);\n  }\n\n  /**\n   * Register a callback to provide the value for a key when `toJson` is called.\n   */\n  onSerialize<T>(key: StateKey<T>, callback: () => T): void {\n    this.onSerializeCallbacks[key] = callback;\n  }\n\n  /**\n   * Serialize the current state of the store to JSON.\n   */\n  toJson(): string {\n    // Call the onSerialize callbacks and put those values into the store.\n    for (const key in this.onSerializeCallbacks) {\n      if (this.onSerializeCallbacks.hasOwnProperty(key)) {\n        try {\n          this.store[key] = this.onSerializeCallbacks[key]();\n        } catch (e) {\n          console.warn('Exception in onSerialize callback: ', e);\n        }\n      }\n    }\n    return JSON.stringify(this.store);\n  }\n}\n\nexport function initTransferState(doc: Document, appId: string) {\n  // Locate the script tag with the JSON data transferred from the server.\n  // The id of the script tag is set to the Angular appId + 'state'.\n  const script = doc.getElementById(appId + '-state');\n  let initialState = {};\n  if (script && script.textContent) {\n    try {\n      initialState = JSON.parse(unescapeHtml(script.textContent));\n    } catch (e) {\n      console.warn('Exception while restoring TransferState for app ' + appId, e);\n    }\n  }\n  return TransferState.init(initialState);\n}\n\n/**\n * NgModule to install on the client side while using the `TransferState` to transfer state from\n * server to client.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [{provide: TransferState, useFactory: initTransferState, deps: [DOCUMENT, APP_ID]}],\n})\nexport class BrowserTransferStateModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {DebugElement, DebugNode, Predicate, Type} from '@angular/core';\n\n\n\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\nexport class By {\n  /**\n   * Match all nodes.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n   */\n  static all(): Predicate<DebugNode> {\n    return () => true;\n  }\n\n  /**\n   * Match elements by the given CSS selector.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n   */\n  static css(selector: string): Predicate<DebugElement> {\n    return (debugElement) => {\n      return debugElement.nativeElement != null ?\n          elementMatches(debugElement.nativeElement, selector) :\n          false;\n    };\n  }\n\n  /**\n   * Match nodes that have the given directive present.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n   */\n  static directive(type: Type<any>): Predicate<DebugNode> {\n    return (debugNode) => debugNode.providerTokens!.indexOf(type) !== -1;\n  }\n}\n\nfunction elementMatches(n: any, selector: string): boolean {\n  if (getDOM().isElementNode(n)) {\n    return n.matches && n.matches(selector) ||\n        n.msMatchesSelector && n.msMatchesSelector(selector) ||\n        n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n  }\n\n  return false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\nimport {Version} from '@angular/core';\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('11.0.9');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationBuilder, AnimationFactory, AnimationMetadata, AnimationOptions, AnimationPlayer, sequence} from '@angular/animations';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, RendererFactory2, RendererType2, ViewEncapsulation} from '@angular/core';\n\nimport {AnimationRenderer} from './animation_renderer';\n\n@Injectable()\nexport class BrowserAnimationBuilder extends AnimationBuilder {\n  private _nextAnimationId = 0;\n  private _renderer: AnimationRenderer;\n\n  constructor(rootRenderer: RendererFactory2, @Inject(DOCUMENT) doc: any) {\n    super();\n    const typeData =\n        {id: '0', encapsulation: ViewEncapsulation.None, styles: [], data: {animation: []}} as\n        RendererType2;\n    this._renderer = rootRenderer.createRenderer(doc.body, typeData) as AnimationRenderer;\n  }\n\n  build(animation: AnimationMetadata|AnimationMetadata[]): AnimationFactory {\n    const id = this._nextAnimationId.toString();\n    this._nextAnimationId++;\n    const entry = Array.isArray(animation) ? sequence(animation) : animation;\n    issueAnimationCommand(this._renderer, null, id, 'register', [entry]);\n    return new BrowserAnimationFactory(id, this._renderer);\n  }\n}\n\nexport class BrowserAnimationFactory extends AnimationFactory {\n  constructor(private _id: string, private _renderer: AnimationRenderer) {\n    super();\n  }\n\n  create(element: any, options?: AnimationOptions): AnimationPlayer {\n    return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);\n  }\n}\n\nexport class RendererAnimationPlayer implements AnimationPlayer {\n  public parentPlayer: AnimationPlayer|null = null;\n  private _started = false;\n\n  constructor(\n      public id: string, public element: any, options: AnimationOptions,\n      private _renderer: AnimationRenderer) {\n    this._command('create', options);\n  }\n\n  private _listen(eventName: string, callback: (event: any) => any): () => void {\n    return this._renderer.listen(this.element, `@@${this.id}:${eventName}`, callback);\n  }\n\n  private _command(command: string, ...args: any[]) {\n    return issueAnimationCommand(this._renderer, this.element, this.id, command, args);\n  }\n\n  onDone(fn: () => void): void {\n    this._listen('done', fn);\n  }\n\n  onStart(fn: () => void): void {\n    this._listen('start', fn);\n  }\n\n  onDestroy(fn: () => void): void {\n    this._listen('destroy', fn);\n  }\n\n  init(): void {\n    this._command('init');\n  }\n\n  hasStarted(): boolean {\n    return this._started;\n  }\n\n  play(): void {\n    this._command('play');\n    this._started = true;\n  }\n\n  pause(): void {\n    this._command('pause');\n  }\n\n  restart(): void {\n    this._command('restart');\n  }\n\n  finish(): void {\n    this._command('finish');\n  }\n\n  destroy(): void {\n    this._command('destroy');\n  }\n\n  reset(): void {\n    this._command('reset');\n  }\n\n  setPosition(p: number): void {\n    this._command('setPosition', p);\n  }\n\n  getPosition(): number {\n    return this._renderer.engine.players[+this.id]?.getPosition() ?? 0;\n  }\n\n  public totalTime = 0;\n}\n\nfunction issueAnimationCommand(\n    renderer: AnimationRenderer, element: any, id: string, command: string, args: any[]): any {\n  return renderer.setProperty(element, `@@${id}:${command}`, args);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationTriggerMetadata} from '@angular/animations';\nimport {ɵAnimationEngine as AnimationEngine} from '@angular/animations/browser';\nimport {Injectable, NgZone, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2} from '@angular/core';\n\nconst ANIMATION_PREFIX = '@';\nconst DISABLE_ANIMATIONS_FLAG = '@.disabled';\n\n// Define a recursive type to allow for nested arrays of `AnimationTriggerMetadata`. Note that an\n// interface declaration is used as TypeScript prior to 3.7 does not support recursive type\n// references, see https://github.com/microsoft/TypeScript/pull/33050 for details.\ntype NestedAnimationTriggerMetadata = AnimationTriggerMetadata|RecursiveAnimationTriggerMetadata;\ninterface RecursiveAnimationTriggerMetadata extends Array<NestedAnimationTriggerMetadata> {}\n\n@Injectable()\nexport class AnimationRendererFactory implements RendererFactory2 {\n  private _currentId: number = 0;\n  private _microtaskId: number = 1;\n  private _animationCallbacksBuffer: [(e: any) => any, any][] = [];\n  private _rendererCache = new Map<Renderer2, BaseAnimationRenderer>();\n  private _cdRecurDepth = 0;\n  private promise: Promise<any> = Promise.resolve(0);\n\n  constructor(\n      private delegate: RendererFactory2, private engine: AnimationEngine, private _zone: NgZone) {\n    engine.onRemovalComplete = (element: any, delegate: Renderer2) => {\n      // Note: if an component element has a leave animation, and the component\n      // a host leave animation, the view engine will call `removeChild` for the parent\n      // component renderer as well as for the child component renderer.\n      // Therefore, we need to check if we already removed the element.\n      if (delegate && delegate.parentNode(element)) {\n        delegate.removeChild(element.parentNode, element);\n      }\n    };\n  }\n\n  createRenderer(hostElement: any, type: RendererType2): Renderer2 {\n    const EMPTY_NAMESPACE_ID = '';\n\n    // cache the delegates to find out which cached delegate can\n    // be used by which cached renderer\n    const delegate = this.delegate.createRenderer(hostElement, type);\n    if (!hostElement || !type || !type.data || !type.data['animation']) {\n      let renderer: BaseAnimationRenderer|undefined = this._rendererCache.get(delegate);\n      if (!renderer) {\n        renderer = new BaseAnimationRenderer(EMPTY_NAMESPACE_ID, delegate, this.engine);\n        // only cache this result when the base renderer is used\n        this._rendererCache.set(delegate, renderer);\n      }\n      return renderer;\n    }\n\n    const componentId = type.id;\n    const namespaceId = type.id + '-' + this._currentId;\n    this._currentId++;\n\n    this.engine.register(namespaceId, hostElement);\n\n    const registerTrigger = (trigger: NestedAnimationTriggerMetadata) => {\n      if (Array.isArray(trigger)) {\n        trigger.forEach(registerTrigger);\n      } else {\n        this.engine.registerTrigger(componentId, namespaceId, hostElement, trigger.name, trigger);\n      }\n    };\n    const animationTriggers = type.data['animation'] as NestedAnimationTriggerMetadata[];\n    animationTriggers.forEach(registerTrigger);\n\n    return new AnimationRenderer(this, namespaceId, delegate, this.engine);\n  }\n\n  begin() {\n    this._cdRecurDepth++;\n    if (this.delegate.begin) {\n      this.delegate.begin();\n    }\n  }\n\n  private _scheduleCountTask() {\n    // always use promise to schedule microtask instead of use Zone\n    this.promise.then(() => {\n      this._microtaskId++;\n    });\n  }\n\n  /** @internal */\n  scheduleListenerCallback(count: number, fn: (e: any) => any, data: any) {\n    if (count >= 0 && count < this._microtaskId) {\n      this._zone.run(() => fn(data));\n      return;\n    }\n\n    if (this._animationCallbacksBuffer.length == 0) {\n      Promise.resolve(null).then(() => {\n        this._zone.run(() => {\n          this._animationCallbacksBuffer.forEach(tuple => {\n            const [fn, data] = tuple;\n            fn(data);\n          });\n          this._animationCallbacksBuffer = [];\n        });\n      });\n    }\n\n    this._animationCallbacksBuffer.push([fn, data]);\n  }\n\n  end() {\n    this._cdRecurDepth--;\n\n    // this is to prevent animations from running twice when an inner\n    // component does CD when a parent component instead has inserted it\n    if (this._cdRecurDepth == 0) {\n      this._zone.runOutsideAngular(() => {\n        this._scheduleCountTask();\n        this.engine.flush(this._microtaskId);\n      });\n    }\n    if (this.delegate.end) {\n      this.delegate.end();\n    }\n  }\n\n  whenRenderingDone(): Promise<any> {\n    return this.engine.whenRenderingDone();\n  }\n}\n\nexport class BaseAnimationRenderer implements Renderer2 {\n  constructor(\n      protected namespaceId: string, public delegate: Renderer2, public engine: AnimationEngine) {\n    this.destroyNode = this.delegate.destroyNode ? (n) => delegate.destroyNode!(n) : null;\n  }\n\n  get data() {\n    return this.delegate.data;\n  }\n\n  destroyNode: ((n: any) => void)|null;\n\n  destroy(): void {\n    this.engine.destroy(this.namespaceId, this.delegate);\n    this.delegate.destroy();\n  }\n\n  createElement(name: string, namespace?: string|null|undefined) {\n    return this.delegate.createElement(name, namespace);\n  }\n\n  createComment(value: string) {\n    return this.delegate.createComment(value);\n  }\n\n  createText(value: string) {\n    return this.delegate.createText(value);\n  }\n\n  appendChild(parent: any, newChild: any): void {\n    this.delegate.appendChild(parent, newChild);\n    this.engine.onInsert(this.namespaceId, newChild, parent, false);\n  }\n\n  insertBefore(parent: any, newChild: any, refChild: any, isMove: boolean = true): void {\n    this.delegate.insertBefore(parent, newChild, refChild);\n    // If `isMove` true than we should animate this insert.\n    this.engine.onInsert(this.namespaceId, newChild, parent, isMove);\n  }\n\n  removeChild(parent: any, oldChild: any, isHostElement: boolean): void {\n    this.engine.onRemove(this.namespaceId, oldChild, this.delegate, isHostElement);\n  }\n\n  selectRootElement(selectorOrNode: any, preserveContent?: boolean) {\n    return this.delegate.selectRootElement(selectorOrNode, preserveContent);\n  }\n\n  parentNode(node: any) {\n    return this.delegate.parentNode(node);\n  }\n\n  nextSibling(node: any) {\n    return this.delegate.nextSibling(node);\n  }\n\n  setAttribute(el: any, name: string, value: string, namespace?: string|null|undefined): void {\n    this.delegate.setAttribute(el, name, value, namespace);\n  }\n\n  removeAttribute(el: any, name: string, namespace?: string|null|undefined): void {\n    this.delegate.removeAttribute(el, name, namespace);\n  }\n\n  addClass(el: any, name: string): void {\n    this.delegate.addClass(el, name);\n  }\n\n  removeClass(el: any, name: string): void {\n    this.delegate.removeClass(el, name);\n  }\n\n  setStyle(el: any, style: string, value: any, flags?: RendererStyleFlags2|undefined): void {\n    this.delegate.setStyle(el, style, value, flags);\n  }\n\n  removeStyle(el: any, style: string, flags?: RendererStyleFlags2|undefined): void {\n    this.delegate.removeStyle(el, style, flags);\n  }\n\n  setProperty(el: any, name: string, value: any): void {\n    if (name.charAt(0) == ANIMATION_PREFIX && name == DISABLE_ANIMATIONS_FLAG) {\n      this.disableAnimations(el, !!value);\n    } else {\n      this.delegate.setProperty(el, name, value);\n    }\n  }\n\n  setValue(node: any, value: string): void {\n    this.delegate.setValue(node, value);\n  }\n\n  listen(target: any, eventName: string, callback: (event: any) => boolean | void): () => void {\n    return this.delegate.listen(target, eventName, callback);\n  }\n\n  protected disableAnimations(element: any, value: boolean) {\n    this.engine.disableAnimations(element, value);\n  }\n}\n\nexport class AnimationRenderer extends BaseAnimationRenderer implements Renderer2 {\n  constructor(\n      public factory: AnimationRendererFactory, namespaceId: string, delegate: Renderer2,\n      engine: AnimationEngine) {\n    super(namespaceId, delegate, engine);\n    this.namespaceId = namespaceId;\n  }\n\n  setProperty(el: any, name: string, value: any): void {\n    if (name.charAt(0) == ANIMATION_PREFIX) {\n      if (name.charAt(1) == '.' && name == DISABLE_ANIMATIONS_FLAG) {\n        value = value === undefined ? true : !!value;\n        this.disableAnimations(el, value as boolean);\n      } else {\n        this.engine.process(this.namespaceId, el, name.substr(1), value);\n      }\n    } else {\n      this.delegate.setProperty(el, name, value);\n    }\n  }\n\n  listen(target: 'window'|'document'|'body'|any, eventName: string, callback: (event: any) => any):\n      () => void {\n    if (eventName.charAt(0) == ANIMATION_PREFIX) {\n      const element = resolveElementFromTarget(target);\n      let name = eventName.substr(1);\n      let phase = '';\n      // @listener.phase is for trigger animation callbacks\n      // @@listener is for animation builder callbacks\n      if (name.charAt(0) != ANIMATION_PREFIX) {\n        [name, phase] = parseTriggerCallbackName(name);\n      }\n      return this.engine.listen(this.namespaceId, element, name, phase, event => {\n        const countId = (event as any)['_data'] || -1;\n        this.factory.scheduleListenerCallback(countId, callback, event);\n      });\n    }\n    return this.delegate.listen(target, eventName, callback);\n  }\n}\n\nfunction resolveElementFromTarget(target: 'window'|'document'|'body'|any): any {\n  switch (target) {\n    case 'body':\n      return document.body;\n    case 'document':\n      return document;\n    case 'window':\n      return window;\n    default:\n      return target;\n  }\n}\n\nfunction parseTriggerCallbackName(triggerName: string) {\n  const dotIndex = triggerName.indexOf('.');\n  const trigger = triggerName.substring(0, dotIndex);\n  const phase = triggerName.substr(dotIndex + 1);\n  return [trigger, phase];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationBuilder} from '@angular/animations';\nimport {AnimationDriver, ɵAnimationEngine as AnimationEngine, ɵAnimationStyleNormalizer as AnimationStyleNormalizer, ɵCssKeyframesDriver as CssKeyframesDriver, ɵNoopAnimationDriver as NoopAnimationDriver, ɵsupportsWebAnimations as supportsWebAnimations, ɵWebAnimationsDriver as WebAnimationsDriver, ɵWebAnimationsStyleNormalizer as WebAnimationsStyleNormalizer} from '@angular/animations/browser';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, NgZone, Provider, RendererFactory2} from '@angular/core';\nimport {ɵDomRendererFactory2 as DomRendererFactory2} from '@angular/platform-browser';\n\nimport {BrowserAnimationBuilder} from './animation_builder';\nimport {AnimationRendererFactory} from './animation_renderer';\n\n@Injectable()\nexport class InjectableAnimationEngine extends AnimationEngine {\n  constructor(\n      @Inject(DOCUMENT) doc: any, driver: AnimationDriver, normalizer: AnimationStyleNormalizer) {\n    super(doc.body, driver, normalizer);\n  }\n}\n\nexport function instantiateSupportedAnimationDriver() {\n  return supportsWebAnimations() ? new WebAnimationsDriver() : new CssKeyframesDriver();\n}\n\nexport function instantiateDefaultStyleNormalizer() {\n  return new WebAnimationsStyleNormalizer();\n}\n\nexport function instantiateRendererFactory(\n    renderer: DomRendererFactory2, engine: AnimationEngine, zone: NgZone) {\n  return new AnimationRendererFactory(renderer, engine, zone);\n}\n\n/**\n * @publicApi\n */\nexport const ANIMATION_MODULE_TYPE =\n    new InjectionToken<'NoopAnimations'|'BrowserAnimations'>('AnimationModuleType');\n\nconst SHARED_ANIMATION_PROVIDERS: Provider[] = [\n  {provide: AnimationBuilder, useClass: BrowserAnimationBuilder},\n  {provide: AnimationStyleNormalizer, useFactory: instantiateDefaultStyleNormalizer},\n  {provide: AnimationEngine, useClass: InjectableAnimationEngine}, {\n    provide: RendererFactory2,\n    useFactory: instantiateRendererFactory,\n    deps: [DomRendererFactory2, AnimationEngine, NgZone]\n  }\n];\n\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserModule.\n */\nexport const BROWSER_ANIMATIONS_PROVIDERS: Provider[] = [\n  {provide: AnimationDriver, useFactory: instantiateSupportedAnimationDriver},\n  {provide: ANIMATION_MODULE_TYPE, useValue: 'BrowserAnimations'}, ...SHARED_ANIMATION_PROVIDERS\n];\n\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserTestingModule.\n */\nexport const BROWSER_NOOP_ANIMATIONS_PROVIDERS: Provider[] = [\n  {provide: AnimationDriver, useClass: NoopAnimationDriver},\n  {provide: ANIMATION_MODULE_TYPE, useValue: 'NoopAnimations'}, ...SHARED_ANIMATION_PROVIDERS\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\nimport {BROWSER_ANIMATIONS_PROVIDERS, BROWSER_NOOP_ANIMATIONS_PROVIDERS} from './providers';\n\n/**\n * Exports `BrowserModule` with additional [dependency-injection providers](guide/glossary#provider)\n * for use with animations. See [Animations](guide/animations).\n * @publicApi\n */\n@NgModule({\n  exports: [BrowserModule],\n  providers: BROWSER_ANIMATIONS_PROVIDERS,\n})\nexport class BrowserAnimationsModule {\n}\n\n/**\n * A null player that must be imported to allow disabling of animations.\n * @publicApi\n */\n@NgModule({\n  exports: [BrowserModule],\n  providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,\n})\nexport class NoopAnimationsModule {\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { RuleEditorService, SimpleStyle } from '../rule-editor.service';\n\n@Component({\n  selector: 'lhc-calculate-sum-prompt',\n  templateUrl: './calculate-sum-prompt.component.html',\n  styleUrls: ['./calculate-sum-prompt.component.css']\n})\nexport class CalculateSumPromptComponent implements OnInit {\n  @Input() lhcStyle: SimpleStyle = {};\n  @Output() export: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(private ruleEditorService: RuleEditorService) { }\n\n  /**\n   * Angular lifecycle hook called when the component is initialized\n   */\n  ngOnInit(): void {}\n\n  /**\n   * Close the dialog by specifying this should not be a score calculation\n   */\n  onCloseClick(): void {\n    this.ruleEditorService.toggleMightBeScore();\n  }\n\n  /**\n   * Export the sum of scores as a FHIR Questionnaire\n   */\n  onExportClick(): void {\n    this.export.emit();\n  }\n}\n","/**\n * Full fhirconvert function: validates, converts, then identifies variables.\n * @param {string} str - inputted normal syntax expression\n * @param {Array} vars - array of usable variables entered by user\n * @returns converted fhirpath expression\n */\n export function fhirconvert(str, vars) {\n  if (validate(str, vars)) {\n    return varfind(convert(str), vars);\n  } else {\n    return null;\n  }\n}\n\n// Array of usable operators\nlet ops = [\n  \"+\",\n  \"-\",\n  \"*\",\n  \"/\",\n  \"^\",\n  \"**\",\n  \"||\",\n  \"&&\",\n  \"<\",\n  \">\",\n  \"=\",\n  \"!=\",\n  \"!~\",\n  \">=\",\n  \"<=\",\n  \"xor\",\n  \"XOR\",\n  \"implies\",\n  \"IMPLIES\",\n  \"and\",\n  \"or\",\n  \"AND\",\n  \"OR\"\n];\n\n// Array of usable functions\nlet funs = [\n  \"CEILING\",\n  \"FLOOR\",\n  \"ABS\",\n  \"TRUNCATE\",\n  \"EXP\",\n  \"SQRT\",\n  \"LN\",\n  \"LOG\",\n  \"ceiling\",\n  \"floor\",\n  \"abs\",\n  \"truncate\",\n  \"exp\",\n  \"sqrt\",\n  \"ln\",\n  \"log\",\n  \"NOT\",\n  \"not\",\n];\n\n// Array of functions with no arguments\nlet funs2 = [\n  \"CEILING\",\n  \"FLOOR\",\n  \"ABS\",\n  \"TRUNCATE\",\n  \"EXP\",\n  \"SQRT\",\n  \"LN\",\n  \"NOT\",\n  \"ceiling\",\n  \"floor\",\n  \"abs\",\n  \"truncate\",\n  \"exp\",\n  \"sqrt\",\n  \"ln\",\n  \"not\"\n];\n\n/**\n * Verifies normal syntax by confirming var names, function names,\n * syntax, and number of parenthesis.\n * @param {string} str - inputted normal syntax expression\n * @param {Array} vars - array of usable variables\n * @returns boolean, valid or invalid\n */\nexport function validate(str, vars) {\n  // Operator Validation\n  var len = str.length;\n  var op = \"\";\n  // Loop to identify operator strings\n  for (var j = 0; j < len; j++) {\n    // If operator char, append to op\n    if (!(/[a-zA-Z0-9.,\\s()\\\\-]/.test(str[j]))) {\n      op = op + str[j];\n      if (j == len - 1 || j == 0) {\n        return false;\n      }\n    }\n    // Checks operator if length > 1 and operator string ends\n    else if (op.length > 0) {\n      if (!(ops.includes(op))) {\n        return false;\n      }\n      // Validates expression to left of operator\n      var lsearch = true;\n      var op_l = j - op.length - 1;\n      while(lsearch) {\n        if (!(/[\\s]/.test(str[op_l]))) {\n          if (!(/[a-zA-Z0-9.,)\\\\-]/.test(str[op_l]))) {\n            return false;\n          }\n          lsearch = false;\n        } else {\n          op_l -= 1;\n        }\n      }\n      // Validates expression to right of operator\n      var rsearch = true;\n      var op_r = j;\n      if (op_r > len - 1) {\n        return false;\n      }\n      while(rsearch) {\n        if (!(/[\\s]/.test(str[op_r]))) {\n          if (!(/[a-zA-Z0-9.(\\\\-]/.test(str[op_r]))) {\n            return false;\n          }\n          rsearch = false;\n        } else {\n          op_r += 1;\n        }\n      }\n      op = \"\";\n    }\n    else {\n      op = \"\";\n    }\n  }\n\n  // Function validation\n  var lcount = 0;\n  var rcount = 0;\n  var substr = \"\";\n  // Loop to checks parenthesis and identify non-operator strings\n  for (var i = 0; i < len; i++) {\n    if (str[i] == \"(\") {\n      lcount += 1;\n    }\n    if (str[i] == \")\") {\n      rcount += 1;\n    }\n    if (rcount > lcount) {\n      return false;\n    }\n    // If usable char, add to substring\n    if (/[a-zA-Z0-9]/.test(str[i])) {\n      substr = substr + str[i];\n    }\n    // Checks if substring is valid\n    if ((str[i + 1] == null || !(/[[a-zA-Z0-9]/.test(str[i + 1])))) {\n      if ((funs.includes(substr) && str[i + 1] == \"(\") || substr == \"\") {\n        substr = \"\";\n      } else if (vars.includes(substr) || (ops.includes(substr) || !(isNaN(substr)))) {\n        substr = \"\";\n      } else {\n        return false;\n      }\n    }\n  }\n  return lcount == rcount;\n}\n\n/**\n * Identifies convertable functions in expression and converts them recursively.\n * @param {string} str - inputted normal syntax expression\n * @returns expression with converted functions\n */\nexport function convert(str) {\n  var count = 0;\n  if (str.includes(\"^\")) {\n    var i = str.indexOf(\"^\");\n    var base = lfind(str, i);\n    var power = rfind(str, i);\n    str =\n      str.slice(0, i - base.length) +\n      base.trim() +\n      \".power(\" +\n      power.trim() +\n      \")\" +\n      str.slice(i + power.length + 1);\n    count += 1;\n  }\n  if (str.includes(\"**\")) {\n    var i = str.indexOf(\"**\");\n    var base = lfind(str, i);\n    var power = rfind(str, i+1);\n    str =\n      str.slice(0, i - base.length) +\n      base.trim() +\n      \".power(\" +\n      power.trim() +\n      \")\" +\n      str.slice(i + power.length + 2);\n    count += 1;\n  }\n  for (let f = 0; f < funs2.length; f++) {\n    if (str.includes(funs2[f])) {\n      if (str[str.indexOf(funs2[f]) - 1] != \".\") {\n        str = funcappend(str, funs2[f]);\n        count += 1;\n      }\n    }\n  }\n  if (str.includes(\"LOG\")) {\n    str = logappend(str, \"LOG\");\n    count += 1;\n  }\n  if (str.includes(\"log\")) {\n    if (str[str.indexOf(\"log\") - 1] != \".\") {\n      str = logappend(str, \"log\");\n      count += 1;\n    }\n  }\n  if (str.includes(\"OR\")) {\n    str = str.replace(\"OR\", \"or\");\n    count += 1;\n  }\n  if (str.includes(\"AND\")) {\n    str = str.replace(\"AND\", \"and\");\n    count += 1;\n  }\n  if (str.includes(\"||\")) {\n    str = str.replace(\"||\", \"or\");\n    count += 1;\n  }\n  if (str.includes(\"&&\")) {\n    str = str.replace(\"&&\", \"and\");\n    count += 1;\n  }\n  if (count != 0) {\n    return convert(str);\n  } else {\n    return str;\n  }\n}\n\n/**\n * Identifies functions and appends them in fhirpath form\n * @param {string} str - inputted normal syntax expression\n * @param {string} func - function in inputted normal syntax expression\n * @returns expression with converted function\n */\nexport function funcappend(str, func) {\n  var i = str.indexOf(func);\n  var j = i + func.length;\n  var k = j;\n  var eq = false;\n  var open = 0;\n  var close = 0;\n  while (!eq) {\n    if (str[k] == \"(\") {\n      open += 1;\n    }\n    if (str[k] == \")\") {\n      close += 1;\n    }\n\n    if (open == close) {\n      eq = true;\n    } else {\n      k += 1;\n    }\n  }\n  return (\n    str.slice(0, i).trim() +\n    str.slice(j, k + 1).trim() +\n    \".\" +\n    func.toLowerCase() +\n    \"()\" +\n    str.slice(k + 1).trim()\n  );\n}\n\n/**\n * Same as funcappend, but in LOG format\n * @param {string} str - inputted normal syntax expression\n * @param {string} func - \"LOG\" or \"log\"\n * @returns expression with converted log function\n */\nexport function logappend(str, func) {\n  var i = str.indexOf(func);\n  var j = i + 3;\n  var k = j;\n  var cma = -1;\n  var eq = false;\n  var open = 0;\n  var close = 0;\n\n  while (!eq) {\n    if (str[k] == \"(\") {\n      open += 1;\n    }\n    if (str[k] == \")\") {\n      close += 1;\n    }\n\n    if (open == close + 1 && k != j && str[k] == \",\") {\n      cma = k;\n    }\n    if (open == close) {\n      eq = true;\n    } else {\n      k += 1;\n    }\n  }\n\n  return (\n    str.slice(0, i).trim() +\n    \"(\" +\n    str.slice(cma + 1, k).trim() +\n    \")\" +\n    \".log(\" +\n    str.slice(j + 1, cma).trim() +\n    \")\" +\n    str.slice(k + 1).trim()\n  );\n}\n\n/**\n * Identifies expression to left of operator\n * @param {string} str - inputted expression\n * @param {int} i - operator index\n * @returns expression to left of operator\n */\nexport function lfind(str, i) {\n  if (str[i - 1] != \")\") {\n    var search = true;\n    var lstr = \"\";\n    while (search) {\n      if (i < 2) {\n        search = false;\n      }\n      if (/[a-zA-Z0-9.-\\s]/.test(str[i - 1])) {\n        lstr = str[i - 1] + lstr;\n        i -= 1;\n      } else {\n        search = false;\n      }\n    }\n    return lstr;\n  } else {\n    var eq = false;\n    var open = 0;\n    var close = 0;\n    var k = i - 1;\n\n    while (!eq) {\n      if (str[k] == \"(\") {\n        open += 1;\n      }\n      if (str[k] == \")\") {\n        close += 1;\n      }\n      if (open == close) {\n        eq = true;\n      } else {\n        k -= 1;\n      }\n    }\n    return str.slice(k, i);\n  }\n}\n\n/**\n * Identifies expression to right of operator\n * @param {string} str - inputted expression\n * @param {int} i - operator index\n * @returns expression to right of operator\n */\nexport function rfind(str, i) {\n  if (str[i + 1] != \"(\") {\n    var search = true;\n    var rstr = \"\";\n    while (search) {\n      if (str[i + 2] == undefined) {\n        search = false;\n      }\n      if (/[a-zA-Z0-9.\\s()\\\\-]/.test(str[i + 1])) {\n        rstr = rstr + str[i + 1];\n        i += 1;\n      } else {\n        search = false;\n      }\n    }\n    return rstr;\n  } else {\n    return str.slice(i + 1, str.slice(i).indexOf(\")\") + i + 1);\n  }\n}\n\n/**\n * Identifies variables in expression and adds %\n * @param {string} str - converted expression\n * @param {Array} vars - array of usable variables\n * @returns converted expression with formatted variables\n */\nexport function varfind(str, vars) {\n  var end = false;\n  var i = 0;\n  var j = 0;\n  var v = \"\";\n  while (!end) {\n    if (str[i] == null) {\n      end = true;\n    } else {\n      if (/[a-zA-Z0-9]/.test(str[i])) {\n        v = v + str[i];\n      } else {\n        j = i - v.length;\n        if (vars.includes(v)) {\n          str = str.slice(0, j) + \"%\" + str.slice(j);\n          i += 1;\n        }\n        v = \"\";\n      }\n      if (str[i+1] == null) {\n        j = i - v.length + 1;\n        if (vars.includes(v)) {\n          str = str.slice(0, j) + \"%\" + str.slice(j);\n          i += 1;\n        }\n      }\n      i += 1;\n    }\n  }\n  return str;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as mathToFhirpath from 'math-to-fhirpath';\n\n@Pipe({\n  name: 'mathToFhirpath'\n})\nexport class MathToFhirpathPipe implements PipeTransform {\n\n  transform(value: string, variables: string[]): string {\n    if (value !== undefined) {\n      const fhirPath = mathToFhirpath.fhirconvert(value, variables);\n      if (fhirPath !== null) {\n        return fhirPath;\n      }\n    }\n\n    return 'Not valid';\n  }\n}\n","import { Component, Input, Output, EventEmitter, OnChanges } from '@angular/core';\nimport { MathToFhirpathPipe } from '../math-to-fhirpath.pipe';\nimport { SimpleStyle } from '../rule-editor.service';\n\n@Component({\n  selector: 'lhc-syntax-converter',\n  templateUrl: './syntax-converter.component.html',\n  styleUrls: ['./syntax-converter.component.css']\n})\nexport class SyntaxConverterComponent implements OnChanges {\n  @Input() expression: string;\n  @Input() variables;\n  @Input() lhcStyle: SimpleStyle = {};\n  @Output() expressionChange = new EventEmitter<string>();\n\n  fhirPathExpression: string;\n  jsToFhirPathPipe = new MathToFhirpathPipe();\n\n  constructor() { }\n\n  ngOnChanges(): void {\n    if (this.expression !== '') {\n      this.onExpressionChange(this.expression);\n    }\n  }\n\n  onExpressionChange(value): void {\n    const fhirPath: string = this.jsToFhirPathPipe.transform(value, this.variables);\n    this.fhirPathExpression = fhirPath;\n\n    this.expressionChange.emit(fhirPath);\n  }\n\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { SimpleStyle } from '../rule-editor.service';\n\n@Component({\n  selector: 'lhc-syntax-preview',\n  templateUrl: './syntax-preview.component.html',\n  styleUrls: ['./syntax-preview.component.css']\n})\nexport class SyntaxPreviewComponent implements OnInit {\n  @Input() syntax;\n  @Input() lhcStyle: SimpleStyle;\n  @Input() showWhenEmpty = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RuleEditorComponent } from './rule-editor.component';\n\nimport { FormsModule } from '@angular/forms';\n\nimport { VariablesComponent } from './variables/variables.component';\nimport { UneditableVariablesComponent } from './uneditable-variables/uneditable-variables.component';\nimport { QuestionComponent } from './question/question.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { CalculateSumPromptComponent } from './calculate-sum-prompt/calculate-sum-prompt.component';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MathToFhirpathPipe } from './math-to-fhirpath.pipe';\nimport { SyntaxConverterComponent } from './syntax-converter/syntax-converter.component';\nimport { SyntaxPreviewComponent } from './syntax-preview/syntax-preview.component';\n\n\n\n@NgModule({\n  declarations: [\n    RuleEditorComponent,\n    VariablesComponent,\n    UneditableVariablesComponent,\n    QuestionComponent,\n    CalculateSumPromptComponent,\n    MathToFhirpathPipe,\n    SyntaxConverterComponent,\n    SyntaxPreviewComponent\n  ],\n  imports: [\n    FormsModule,\n    BrowserAnimationsModule,\n    DragDropModule,\n    MatRadioModule\n  ],\n  exports: [\n    RuleEditorComponent\n  ]\n})\nexport class RuleEditorModule { }\n"]}