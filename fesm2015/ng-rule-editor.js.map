{"version":3,"file":"ng-rule-editor.js","sources":["../../../projects/ng-rule-editor/src/lib/variable.ts","../../../projects/ng-rule-editor/src/lib/units.ts","../../../projects/ng-rule-editor/src/lib/rule-editor.service.ts","../../../projects/ng-rule-editor/src/lib/rule-editor.component.ts","../../../projects/ng-rule-editor/src/lib/variables/variables.component.ts","../../../projects/ng-rule-editor/src/lib/uneditable-variables/uneditable-variables.component.ts","../../../projects/ng-rule-editor/src/lib/question/question.component.ts","../../../projects/ng-rule-editor/src/lib/calculate-sum-prompt/calculate-sum-prompt.component.ts","../../../projects/ng-rule-editor/src/lib/easy-path-expressions.pipe.ts","../../../projects/ng-rule-editor/src/lib/syntax-converter/syntax-converter.component.ts","../../../projects/ng-rule-editor/src/lib/syntax-preview/syntax-preview.component.ts","../../../projects/ng-rule-editor/src/lib/query-observation/query-observation.component.ts","../../../projects/ng-rule-editor/src/lib/case-statements/case-statements.component.ts","../../../projects/ng-rule-editor/src/lib/rule-editor.module.ts","../../../projects/ng-rule-editor/src/public-api.ts","../../../projects/ng-rule-editor/src/ng-rule-editor.ts"],"sourcesContent":["export interface UneditableVariable {\n  name: string;\n  type?: string;\n  description?: string;\n}\n\nexport interface Variable {\n  __$index?: number;  // Original index in extension list\n  label: string;\n  type: string;\n  expression: string;\n  simple?: string;\n  linkId?: string;\n  unit?: string;\n  codes?: Array<string>;\n  timeInterval?: number;\n  timeIntervalUnit?: string;\n}\n\nexport interface Question {\n  linkId: string;\n  text: string;\n  itemHasScore?: boolean;\n  unit?: string;\n}\n\nexport interface CaseStatement {\n  condition: string;\n  simpleCondition?: string;\n  output: string;\n  simpleOutput?: string;\n}\n\nexport enum AllVariableType {\n  question = 'Question',\n  expression = 'FHIRPath Expression',\n  simple = 'Easy Path Expression',\n  query = 'FHIR Query',\n  queryObservation = 'FHIR Query (Observation)'\n}\n\nexport enum SimpleVariableType {\n  question = 'Question',\n  simple = 'Easy Path Expression',\n  queryObservation = 'FHIR Query (Observation)'\n}\n\nexport const CASE_REGEX = /^\\s*iif\\s*\\((.*)\\)\\s*$/;\n","// Conversion table for simple units\nexport interface Unit {\n  unit: string;\n  factor: number;\n}\n\n// Supported unit conversions. Key is the \"from\" and value is the \"to\" array\nexport const UNIT_CONVERSION: { [key: string]: Unit[] } = {\n  kg: [{ unit: 'lbs', factor: 2.20462 }],\n  lbs: [{ unit: 'kg', factor: 0.453592 }],\n  '[in_i]': [{ unit: 'cm', factor: 2.54 }, { unit: 'm', factor: 0.0254 }]\n};\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport copy from 'fast-copy';\n\nimport { AllVariableType, CASE_REGEX, Question, SimpleVariableType, UneditableVariable, Variable } from './variable';\nimport { UNIT_CONVERSION } from './units';\n\nexport interface SimpleStyle {\n  h1?: object;\n  h2?: object;\n  previewArea?: object;\n  variableHeader?: object;\n  variableRow?: object;\n  buttonPrimary?: object;\n  buttonSecondary?: object;\n  buttonDanger?: object;\n  input?: object;\n  select?: object;\n  description?: object;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RuleEditorService {\n  syntaxType = 'simple';\n  linkIdContext: string;\n  uneditableVariablesChange: Subject<UneditableVariable[]> =\n    new Subject<UneditableVariable[]>();\n  variablesChange: Subject<Variable[]> = new Subject<Variable[]>();\n  questionsChange: Subject<Question[]> = new Subject<Question[]>();\n  mightBeScoreChange: Subject<boolean> = new Subject<boolean>();\n  finalExpressionChange: Subject<string> = new Subject<string>();\n  disableAdvancedChange: Subject<boolean> = new Subject<boolean>();\n  uneditableVariables: UneditableVariable[];\n  variables: Variable[];\n  questions: Question[];\n  finalExpression: string;\n  simpleExpression: string;\n  caseStatements: boolean;\n  needsAdvancedInterface = false;\n\n  private LANGUAGE_FHIRPATH = 'text/fhirpath';\n  private LANGUAGE_FHIR_QUERY = 'application/x-fhir-query';\n  private QUESTION_REGEX = /^%resource\\.item\\.where\\(linkId='(.*)'\\)\\.answer\\.value(?:\\*(\\d*\\.?\\d*))?$/;\n  private QUERY_REGEX = /^Observation\\?code=(.+)&date=gt{{today\\(\\)-(\\d+) (.+)}}&patient={{%patient.id}}&_sort=-date&_count=1$/;\n  private VARIABLE_EXTENSION = 'http://hl7.org/fhir/StructureDefinition/variable';\n  private SCORE_VARIABLE_EXTENSION = 'http://lhcforms.nlm.nih.gov/fhir/ext/rule-editor-score-variable';\n  private SCORE_EXPRESSION_EXTENSION = 'http://lhcforms.nlm.nih.gov/fhir/ext/rule-editor-expression';\n  private SIMPLE_SYNTAX_EXTENSION = 'http://lhcforms.nlm.nih.gov/fhir/ext/simple-syntax';\n  private CALCULATED_EXPRESSION = 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-calculatedExpression';\n  private LAUNCH_CONTEXT_URI = 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-launchContext';\n\n  private linkIdToQuestion = {};\n  private fhir;\n  mightBeScore = false;\n\n  constructor() {\n    this.variables = [];\n    this.uneditableVariables = [];\n  }\n\n  /**\n   * Create a new variable\n   */\n  addVariable(): void {\n    // Get all the existing variable names\n    const existingNames = this.variables.map((e) => e.label)\n      .concat(this.uneditableVariables.map((e) => e.name));\n\n    this.variables.push({\n      label: this.getNewLabelName(existingNames),\n      type: 'question',\n      expression: ''\n    });\n    this.variablesChange.next(this.variables);\n  }\n\n  /**\n   * Remove a variable\n   * @param i - index of variable to remove\n   */\n  remove(i: number): void {\n    this.variables.splice(i, 1);\n  }\n\n  /**\n   * Trigger an update (used when changing variable names to update the preview)\n   */\n  update(): void {\n    this.variablesChange.next(this.variables);\n  }\n\n  /**\n   * Checks the advanced interface status and allows toggle if no expressions or\n   * queries are present\n   * @param toggleOn - Set the advanced interface on (without having to run checks)\n   */\n  checkAdvancedInterface(toggleOn?: boolean): void {\n    if (toggleOn) {\n      this.needsAdvancedInterface = true;\n    } else {\n      let needsAdvanced = false;\n      // Check variables\n      if (this.variables.find((e) => e.type === 'expression' || e.type === 'query') !== undefined) {\n        needsAdvanced = true;\n      }\n\n      // Check final expression\n      if (this.syntaxType === 'fhirpath') {\n        needsAdvanced = true;\n      }\n\n      this.needsAdvancedInterface = needsAdvanced;\n    }\n\n    this.disableAdvancedChange.next(this.needsAdvancedInterface);\n  }\n\n  /**\n   * Get the list of uneditable variables based on the FHIR Questionnaire\n   * @param questionnaire - FHIR Questionnaire\n   */\n  getUneditableVariables(questionnaire): UneditableVariable[] {\n    if (Array.isArray(questionnaire.extension)) {\n      return questionnaire.extension.reduce((accumulator, extension) => {\n        if (extension.url === this.LAUNCH_CONTEXT_URI && extension.extension) {\n          const uneditableVariable = {\n            name: extension.extension.find((e) => e.url === 'name').valueId,\n            type: extension.extension.filter((e) => e.url === 'type')?.map((e) => e.valueCode).join('|'),\n            description: extension.extension.find((e) => e.url === 'description')?.valueString\n          };\n\n          accumulator.push(uneditableVariable);\n        }\n        return accumulator;\n      }, []);\n    }\n\n    return [];\n  }\n\n  /**\n   * Get and remove the variables from the FHIR object\n   * @param questionnaire\n   */\n  extractVariables(questionnaire): Variable[] {\n    // Look at the top level fhirpath related extensions to populate the editable variables\n    // TODO look at the focus item variables\n\n    if (questionnaire.extension) {\n      const variables = [];\n      const nonVariableExtensions = [];\n\n      // Add an index to each extension which we will then use to get the\n      // variables back in the correct order. __$index will be removed on save\n      questionnaire.extension = questionnaire.extension.map((e, i) => ({ ...e, __$index: i }));\n\n      questionnaire.extension.forEach((extension) => {\n        if (extension.url === this.VARIABLE_EXTENSION && extension.valueExpression) {\n          switch (extension.valueExpression.language) {\n            case this.LANGUAGE_FHIRPATH:\n              const fhirPathVarToAdd = this.processVariable(\n                extension.valueExpression.name,\n                extension.valueExpression.expression,\n                extension.__$index,\n                extension.valueExpression.extension);\n              if (fhirPathVarToAdd.type === 'expression') {\n                this.needsAdvancedInterface = true;\n              }\n              variables.push(fhirPathVarToAdd);\n              break;\n            case this.LANGUAGE_FHIR_QUERY:\n              const queryVarToAdd = this.processQueryVariable(\n                extension.valueExpression.name,\n                extension.valueExpression.expression,\n                extension.__$index);\n              if (queryVarToAdd.type === 'query') {\n                this.needsAdvancedInterface = true;\n              }\n              variables.push(queryVarToAdd);\n              break;\n          }\n        } else {\n          nonVariableExtensions.push(extension);\n        }\n      });\n\n      // Remove the variables so they can be re-added on export\n      questionnaire.extension = nonVariableExtensions;\n\n      return variables;\n    }\n\n    return [];\n  }\n\n  /**\n   * Check if the current item has an ordinalValue extension on the answer\n   * @param item - Question item or linkId\n   */\n  itemHasScore(item): boolean {\n    if (typeof item === 'string') {\n      item = this.linkIdToQuestion[item];\n    }\n\n    return (item.answerOption || []).some((answerOption) => {\n      return (answerOption.extension || []).some((extension) => {\n        return extension.url === 'http://hl7.org/fhir/StructureDefinition/ordinalValue';\n      });\n    });\n  }\n\n  /**\n   * Get the number of ordinalValue on the answers of the questions on the\n   * Questionnaire\n   * @param questionnaire - FHIR Questionnaire\n   * @param linkIdContext - linkId to exclude from calculation\n   * @return number of score questions on the questionnaire\n   */\n  getScoreQuestionCount(questionnaire, linkIdContext): number {\n    let scoreQuestions = 0;\n\n    questionnaire.item.forEach((item) => {\n      if (this.itemHasScore(item)) {\n        scoreQuestions++;\n      }\n    });\n\n    return scoreQuestions;\n  }\n\n  /**\n   * Import a FHIR Questionnaire to populate questions\n   * @param expressionUri - URI of expression extension on linkIdContext question\n   *  to extract and modify\n   * @param questionnaire - FHIR Questionnaire\n   * @param linkIdContext - Context to use for final expression\n   * @return true if load was successful\n   */\n  import(expressionUri: string, questionnaire, linkIdContext): boolean {\n    this.linkIdContext = linkIdContext;  // TODO change notification for linkId?\n    this.fhir = copy(questionnaire);\n    let loadSuccess = false;\n\n    if (this.fhir.resourceType === 'Questionnaire' && this.fhir.item && this.fhir.item.length) {\n      // If there is at least one score question we will ask the user if they\n      // want to calculate the score\n      const SCORE_MIN_QUESTIONS = 1;\n      this.mightBeScore = this.getScoreQuestionCount(this.fhir, linkIdContext) > SCORE_MIN_QUESTIONS;\n      this.mightBeScoreChange.next(this.mightBeScore);\n\n      this.uneditableVariables = this.getUneditableVariables(this.fhir);\n      this.uneditableVariablesChange.next(this.uneditableVariables);\n\n      this.linkIdToQuestion = {};\n      this.needsAdvancedInterface = false;\n      this.processItem(this.fhir.item);\n\n      this.variables = this.extractVariables(this.fhir);\n      this.variablesChange.next(this.variables);\n\n      this.questions = [];\n\n      // tslint:disable-next-line:forin\n      for (const key in this.linkIdToQuestion) {\n        if (!this.linkIdToQuestion.hasOwnProperty(key)) {\n          return;\n        }\n        const e = this.linkIdToQuestion[key];\n        // TODO decimal vs choice\n        const MAX_Q_LEN = 60;  // Maximum question length before truncating.\n\n        const text = e.text;\n\n        this.questions.push({\n          linkId: e.linkId,\n          text: text.length > MAX_Q_LEN ? text.substring(0, MAX_Q_LEN) + '...' : text,\n          unit: this.getQuestionUnits(e.linkId)\n        });\n      }\n      this.questionsChange.next(this.questions);\n\n      const expression = this.extractExpression(expressionUri, this.fhir.item, linkIdContext);\n\n      if (expression !== null) {\n        // @ts-ignore\n        this.finalExpression = expression.valueExpression.expression;\n\n        this.caseStatements = this.finalExpression.match(CASE_REGEX) !== null;\n\n        const simpleSyntax = this.extractSimpleSyntax(expression);\n\n        if (simpleSyntax === null && this.finalExpression !== '') {\n          this.syntaxType = 'fhirpath';\n          this.needsAdvancedInterface = true;\n        } else {\n          this.syntaxType = 'simple';\n          this.simpleExpression = simpleSyntax;\n        }\n      } else {\n        // Reset input to be a blank simple expression if there is nothing on\n        // the form\n        this.syntaxType = 'simple';\n        this.simpleExpression = '';\n        this.finalExpression = '';\n      }\n\n      this.finalExpressionChange.next(this.finalExpression);\n      loadSuccess = true;\n    }\n\n    return loadSuccess;\n  }\n\n  /**\n   * Process nested FHIR Questionnaire items\n   * @param items - Current level of item nesting\n   * @private\n   */\n  private processItem(items): void {\n    items.forEach((e) => {\n      this.linkIdToQuestion[e.linkId] = e;\n      if (e.item) {\n        this.processItem(e.item);\n      }\n    });\n  }\n\n  /**\n   * Get and remove the simple syntax if available. If not return null\n   * @param expression\n   */\n  extractSimpleSyntax(expression): string|null {\n    if (expression.valueExpression && expression.valueExpression.extension) {\n      const customExtension = expression.valueExpression.extension.find((e) => {\n        return e.url === this.SIMPLE_SYNTAX_EXTENSION;\n      });\n\n      if (customExtension !== undefined) {\n        return customExtension.valueString;  // TODO move to code\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get and remove the final expression\n   * @param expressionUri - Expression extension URL\n   * @param items - FHIR questionnaire item array\n   * @param linkId - linkId of question where to extract expression\n   */\n  extractExpression(expressionUri, items, linkId): object|null {\n    for (const item of items) {\n      if (item.linkId === linkId && item.extension) {\n        const extensionIndex = item.extension.findIndex((e) => {\n          return e.url === expressionUri && e.valueExpression.language === this.LANGUAGE_FHIRPATH &&\n            e.valueExpression.expression;\n        });\n\n        if (extensionIndex !== -1) {\n          const finalExpression = item.extension[extensionIndex];\n          item.extension.splice(extensionIndex, 1);\n\n          return finalExpression;\n        }\n      } else if (item.item) {\n        return this.extractExpression(expressionUri, item.item, linkId);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Process a FHIRPath expression into a more user friendly format if possible.\n   * If the format of the FHIRPath matches a format we can display with a\n   * question dropdown, etc show that. If not show the FHIRPath expression.\n   * @param name - Name to assign variable\n   * @param expression - Expression to process\n   * @param index - Original order in extension list\n   * @param extensions - Any additional extensions (for simple fhirpath etc)\n   * @return Variable type which can be used by the Rule Editor to show a\n   * question, expression etc\n   * @private\n   */\n  private processVariable(name, expression, index?: number, extensions?): Variable {\n    const matches = expression.match(this.QUESTION_REGEX);\n\n    const simpleExtension = extensions && extensions.find(e => e.url === this.SIMPLE_SYNTAX_EXTENSION);\n\n    if (matches !== null) {\n      const linkId = matches[1];\n      const factor = matches[2];\n\n      const variable: Variable = {\n        __$index: index,\n        label: name,\n        type: 'question',\n        linkId,\n        expression\n      };\n\n      if (factor) {\n        // We might be able to do unit conversion\n        const sourceUnits = this.getQuestionUnits(linkId);\n\n        if (UNIT_CONVERSION.hasOwnProperty(sourceUnits)) {\n          const conversions = UNIT_CONVERSION[sourceUnits];\n          const conversion = conversions.find((e) => {\n            return e.factor.toString() === factor;\n          });\n\n          variable.unit = conversion.unit;\n        }\n      }\n\n      return variable;\n    } else if (simpleExtension !== undefined) {\n      return {\n        __$index: index,\n        label: name,\n        type: 'simple',\n        expression,\n        simple: simpleExtension.valueString\n      };\n    } else {\n      return {\n        __$index: index,\n        label: name,\n        type: 'expression',\n        expression\n      };\n    }\n  }\n\n  /**\n   * Process a x-fhir-query expression into a more user friendly format if\n   * possible. Show a code autocomplete field if possible if not show the\n   * expression editing field.\n   * @param name - Name to assign variable\n   * @param expression - Expression to process\n   * @param index - Original order in extension list\n   * @return Variable type which can be used by the Rule Editor to show a\n   * question, expression etc\n   * @private\n   */\n  private processQueryVariable(name, expression, index?: number): Variable {\n    const matches = expression.match(this.QUERY_REGEX);\n\n    if (matches !== null) {\n      const codes = matches[1].split('%2C');  // URL encoded comma ','\n      const timeInterval = parseInt(matches[2], 10);\n      const timeIntervalUnits = matches[3];\n\n      return {\n        __$index: index,\n        label: name,\n        type: 'queryObservation',\n        codes,\n        timeInterval,\n        timeIntervalUnit: timeIntervalUnits,\n        expression\n      };\n    } else {\n      return {\n        __$index: index,\n        label: name,\n        type: 'query',\n        expression\n      };\n    }\n  }\n\n  // TODO check behavior of repeating linkId\n  /**\n   * Get question units for the question\n   * @param linkId - Question linkId\n   * @private\n   */\n  private getQuestionUnits(linkId): string {\n    const QUESTIONNAIRE_UNIT = 'http://hl7.org/fhir/StructureDefinition/questionnaire-unit';\n    const question = this.linkIdToQuestion[linkId];\n\n    if (question.extension) {\n      const extension = question.extension.find((e) => {\n        return e.url === QUESTIONNAIRE_UNIT &&\n          e.valueCoding.system && e.valueCoding.system === 'http://unitsofmeasure.org';\n      });\n\n      if (extension && extension.valueCoding.code) {\n        return extension.valueCoding.code;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Generate a label name like A, B, C, ... AA, AB which is not already used\n   * @param existingNames {string[]} - Array of names already used by existing variables\n   * @private\n   */\n  private getNewLabelName(existingNames: string[]): string {\n    // All letters which can be used for a simple variable name\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n\n    // First pass is with a single character variable name. Other passes are with two\n    const firstLetterAlphabet = [''].concat(alphabet);\n    for (const firstLetter of firstLetterAlphabet) {\n      for (const secondLetter of alphabet) {\n        const potentialName = firstLetter + secondLetter;\n\n        const count = existingNames.filter((e) => e === potentialName);\n\n        if (count.length === 0) {\n          return potentialName;\n        }\n      }\n    }\n\n    // Don't return a suggested name if we exhausted all combinations\n    return '';\n  }\n\n  /**\n   * Toggle the mightBeScore\n   */\n  toggleMightBeScore(): void {\n    this.mightBeScore = !this.mightBeScore;\n    this.mightBeScoreChange.next(this.mightBeScore);\n  }\n\n  /**\n   * Add variables and finalExpression and return the new FHIR Questionnaire\n   * @param url Extension URL to use for the expression\n   * @param finalExpression\n   */\n  export(url: string, finalExpression: string): object {\n    // TODO support for different variable scopes\n    // Copy the fhir object so we can export more than once\n    // (if we add our data the second export will have duplicates)\n    const fhir = copy(this.fhir);\n\n    const variablesToAdd = this.variables.map((e) => {\n      const variable = {\n        __$index: e.__$index,\n        url: this.VARIABLE_EXTENSION,\n        valueExpression: {\n          name: e.label,\n          language: e.type === 'query' ? this.LANGUAGE_FHIR_QUERY : this.LANGUAGE_FHIRPATH,\n          expression: e.expression\n        }\n      };\n\n      if (e.type === 'simple') {\n        // @ts-ignore\n        variable.valueExpression.extension = [{\n          url: this.SIMPLE_SYNTAX_EXTENSION,\n          valueString: e.simple\n        }];\n      }\n\n      return variable;\n    });\n\n    // Split the variables into two buckets: Variables present when\n    // Questionnaire was imported and variables added by the user using the Rule\n    // Editor. Add variables present initially among the existing extensions.\n    // Add the remaining variables at the end\n    const variablesPresentInitially = [];\n    const variablesAdded = [];\n\n    variablesToAdd.forEach(e => {\n      if (e.__$index === undefined) {\n        variablesAdded.push(e);\n      } else {\n        variablesPresentInitially.push(e);\n      }\n    });\n\n    if (fhir.extension) {\n      // Introduce variables present before\n      fhir.extension = fhir.extension.concat(variablesPresentInitially);\n      // Sort by index\n      fhir.extension.sort((a, b) => a.__$index - b.__$index);\n      // Add variables added by the user\n      fhir.extension = fhir.extension.concat(variablesAdded);\n    } else {\n      fhir.extension = variablesPresentInitially.concat(variablesAdded);\n    }\n\n    // Remove __$index\n    fhir.extension = fhir.extension.map(({__$index, ...other}) => other);\n\n    const finalExpressionExtension: any = {\n      url,\n      valueExpression: {\n        language: this.LANGUAGE_FHIRPATH,\n        expression: finalExpression\n      }\n    };\n\n    // TODO keep existing extensions\n    if (this.syntaxType === 'simple') {\n      finalExpressionExtension.valueExpression.extension = [{\n        url: this.SIMPLE_SYNTAX_EXTENSION,\n        valueString: this.simpleExpression\n      }];\n    }\n\n    this.insertExtensions(fhir.item, this.linkIdContext, [finalExpressionExtension]);\n\n    // If there are any query observation extensions check to make sure there is\n    // a patient launch context. If there is not add one.\n    const hasQueryObservations = this.variables.find((e) => {\n      return e.type === 'queryObservation';\n    });\n\n    if (hasQueryObservations !== undefined) {\n      const patientLaunchContext = fhir.extension.find((extension) => {\n        if (extension.url === this.LAUNCH_CONTEXT_URI &&\n            Array.isArray(extension.extension)) {\n          const patientName = extension.extension.find((subExtension) => {\n            return subExtension.url === 'name' && subExtension.valueId === 'patient';\n          });\n\n          if (patientName !== undefined) {\n            return true;\n          }\n        }\n\n        return false;\n      });\n\n      if (patientLaunchContext === undefined) {\n        // Add launchContext\n        if (!Array.isArray(fhir.extension)) {\n          fhir.extension = [];\n        }\n\n        const name = 'patient';\n        const type = 'Patient';\n        const description = 'For filling in patient information as the subject for the form';\n\n        fhir.extension.push({\n          url: this.LAUNCH_CONTEXT_URI,\n          extension: [\n            { url: 'name', valueId: name },\n            { url: 'type', valueCode: type },\n            { url: 'description', valueString: description }\n          ]\n        });\n\n        this.uneditableVariables.push({\n          name,\n          type,\n          description\n        });\n        this.uneditableVariablesChange.next(this.uneditableVariables);\n      }\n    }\n\n    return fhir;\n  }\n\n  /**\n   * Takes FHIR questionnaire definition and a linkId and returns the FHIR\n   * Questionnaire with a calculated expression at the given linkId which sums up\n   * all the ordinal values in the questionnaire\n   * @param questionnaire - FHIR Questionnaire\n   * @param linkId - Question linkId\n   */\n  addTotalScoreRule(questionnaire, linkId): object {\n    this.fhir = questionnaire;\n    this.linkIdContext = linkId;\n    return this.addSumOfScores();\n  }\n\n  /**\n   * Given the current FHIR questionnaire definition and a linkId return a new FHIR\n   * Questionnaire with a calculated expression at the given linkId which sums up\n   * all the ordinal values in the questionnaire\n   */\n  addSumOfScores(): object {\n    const fhir = this.fhir;\n    const linkIdContext = this.linkIdContext;\n\n    const variableNames = [];\n    const scoreQuestionLinkIds = [];\n\n    // Get an array of linkIds for score questions\n    fhir.item.forEach((item) => {\n      if (item.linkId !== linkIdContext && this.itemHasScore(item)) {\n        scoreQuestionLinkIds.push(item.linkId);\n      }\n    });\n\n    // Get as many short suggested variable names as we have score questions\n    scoreQuestionLinkIds.forEach(() => {\n      variableNames.push(this.getNewLabelName(variableNames));\n    });\n\n    const scoreQuestions = scoreQuestionLinkIds.map((e, i) => {\n      return {\n        url: this.VARIABLE_EXTENSION,\n        valueExpression: {\n          name: variableNames[i],\n          language: this.LANGUAGE_FHIRPATH,\n          expression: `%questionnaire.item.where(linkId = '${e}').answerOption` +\n            `.where(valueCoding.code=%resource.item.where(linkId = '${e}').answer.valueCoding.code).extension` +\n            `.where(url='http://hl7.org/fhir/StructureDefinition/ordinalValue').valueDecimal`,\n          extension: [{\n            url: this.SCORE_VARIABLE_EXTENSION\n          }]\n        }\n      };\n    });\n\n    const anyQuestionAnswered = {\n      url: this.VARIABLE_EXTENSION,\n      valueExpression: {\n        name: 'any_questions_answered',\n        language: this.LANGUAGE_FHIRPATH,\n        expression: variableNames.map((e) => `%${e}.exists()`).join(' or '),\n        extension: [{\n          url: this.SCORE_VARIABLE_EXTENSION\n        }]\n      }\n    };\n\n    const sumString = variableNames.map((e) => `iif(%${e}.exists(), %${e}, 0)`).join(' + ');\n\n    const totalCalculation = {\n      url: this.CALCULATED_EXPRESSION,\n      valueExpression: {\n        description: 'Total score calculation',\n        language: this.LANGUAGE_FHIRPATH,\n        expression: `iif(%any_questions_answered, ${sumString}, {})`,\n        extension: [{\n          url: this.SCORE_EXPRESSION_EXTENSION\n        }]\n      }\n    };\n\n    scoreQuestions.push(anyQuestionAnswered);\n    // @ts-ignore\n    scoreQuestions.push(totalCalculation);\n\n    this.insertExtensions(fhir.item, linkIdContext, scoreQuestions);\n\n    return fhir;\n  }\n\n  /**\n   * Checks if the referenced Questionnaire item is a score calculation added by\n   * the Rule Editor\n   * @param questionnaire - FHIR Questionnaire\n   * @param linkId - Questionnaire item Link ID to check\n   * @return True if the question at linkId is a score calculation created by\n   * the Rule Editor, false otherwise\n   */\n  isScoreCalculation(questionnaire, linkId): boolean {\n    const checkForScore = (item) => {\n      if (linkId === item.linkId) {\n        const isScore = item.extension.find((extension) => !!this.isScoreExtension(extension));\n\n        if (isScore) {\n          return true;\n        }\n      }\n\n      if (item.item) {\n        const subItemHasScore = item.item.find((subItem) => checkForScore(subItem));\n\n        if (subItemHasScore) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    return !!questionnaire.item.find((item) => checkForScore(item));\n  }\n\n  /**\n   * Updates a FHIR questionnaire score calculation on the item identified by\n   * the linkId\n   * @param questionnaire - FHIR Questionnaire\n   * @param linkId - Questionnaire item Link ID to update\n   * @return Questionnaire with updated calculation\n   */\n  updateScoreCalculation(questionnaire, linkId): object {\n    this.removeSumOfScores(questionnaire, linkId);\n    return this.addTotalScoreRule(questionnaire, linkId);\n  }\n\n  /**\n   * Removes score calculations added by the rule editor on the entire\n   * questionnaire or on a specific item\n   * @param questionnaire - FHIR Questionnaire\n   * @param linkId - Questionnaire item Link ID where to remove score. If empty\n   * try to remove scores from all items.\n   * @return Questionnaire without the score calculation variable and expression\n   */\n  removeSumOfScores(questionnaire, linkId?): object {\n    this.fhir = questionnaire;\n\n    const removeItemScoreVariables = (item) => {\n      if (linkId === undefined || linkId === item.linkId) {\n        item.extension = item.extension.filter((extension) => !this.isScoreExtension(extension));\n      }\n\n      if (item.item) {\n        item.item.forEach((subItem) => removeItemScoreVariables(subItem));\n      }\n    };\n\n    this.fhir.item.forEach(removeItemScoreVariables);\n\n    return this.fhir;\n  }\n\n  /**\n   * Returns true if the extension has an extension for calculating score false otherwise\n   * @param extension - FHIR Extension object\n   * @private\n   */\n  private isScoreExtension(extension): boolean {\n    if (extension.valueExpression && extension.valueExpression.extension &&\n      extension.valueExpression.extension.length) {\n      return !!extension.valueExpression.extension.find(e => e &&\n        (e.url === this.SCORE_VARIABLE_EXTENSION ||\n          e.url === this.SCORE_EXPRESSION_EXTENSION));\n    } else {\n      return false;\n    }\n  }\n\n  private insertExtensions(items, linkId, extensions): void {\n    for (const item of items) {\n      if (item.linkId === linkId) {\n        if (item.extension) {\n          item.extension = item.extension.concat(extensions);\n        } else {\n          item.extension = extensions;\n        }\n        break;\n      } else if (item.item) {\n        this.insertExtensions(item.item, linkId, extensions);\n      }\n    }\n  }\n\n  /**\n   * Get the expression for a question\n   * @param linkId - Question linkId\n   * @param itemHasScore - Answer has an ordinalValue extension\n   * @param convertible - Units can be converted\n   * @param unit - Base units\n   * @param toUnit - Destination units\n   */\n  valueOrScoreExpression(linkId: string, itemHasScore: boolean, convertible: boolean, unit: string, toUnit: string): string {\n    if (itemHasScore) {\n      return `%questionnaire.item.where(linkId = '${linkId}').answerOption` +\n        `.where(valueCoding.code=%resource.item.where(linkId = '${linkId}').answer.valueCoding.code).extension` +\n        `.where(url='http://hl7.org/fhir/StructureDefinition/ordinalValue').valueDecimal`;\n    } else if (convertible && unit && toUnit) {\n      const factor = UNIT_CONVERSION[unit].find((e) => e.unit === toUnit).factor;\n      return `%resource.item.where(linkId='${linkId}').answer.value*${factor}`;\n    } else {\n      return `%resource.item.where(linkId='${linkId}').answer.value`;\n    }\n  }\n}\n","import { DatePipe } from '@angular/common';\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output } from '@angular/core';\nimport { MatRadioChange } from '@angular/material/radio';\n\nimport { RuleEditorService, SimpleStyle } from './rule-editor.service';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'lhc-rule-editor',\n  templateUrl: 'rule-editor.component.html',\n  styleUrls: ['rule-editor.component.css']\n})\nexport class RuleEditorComponent implements OnInit, OnChanges {\n  @Input() advancedInterface = false;\n  @Input() fhirQuestionnaire = null;\n  @Input() itemLinkId = null;\n  @Input() submitButtonName = 'Submit';\n  @Input() titleName = 'Rule Editor';\n  @Input() expressionLabel = 'Final Expression';\n  @Input() expressionUri = 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-calculatedExpression';\n  @Input() lhcStyle: SimpleStyle = {};\n  @Output() save = new EventEmitter<object>();\n\n  errorLoading = 'Could not detect a FHIR Questionnaire; please try a different file.';\n  expressionSyntax: string;\n  simpleExpression: string;\n  finalExpression: string;\n  finalExpressionFhirPath: string;\n  linkIdContext: string;\n  datePipe = new DatePipe('en-US');\n  calculateSum: boolean;\n  suggestions = [];\n  variables: string[];\n  caseStatements: boolean;\n  disableInterfaceToggle = false;\n  loadError = false;\n\n  private calculateSumSubscription;\n  private finalExpressionSubscription;\n  private variablesSubscription;\n  private disableAdvancedSubscription;\n\n  constructor(private variableService: RuleEditorService, private liveAnnouncer: LiveAnnouncer) {}\n\n  ngOnInit(): void {\n    this.calculateSumSubscription = this.variableService.mightBeScoreChange.subscribe((mightBeScore) => {\n      this.calculateSum = mightBeScore;\n    });\n    this.finalExpressionSubscription = this.variableService.finalExpressionChange.subscribe((finalExpression) => {\n      this.finalExpression = finalExpression;\n    });\n    this.variablesSubscription = this.variableService.variablesChange.subscribe((variables) => {\n      this.variables = variables.map(e => e.label);\n    });\n    this.disableAdvancedSubscription = this.variableService.disableAdvancedChange.subscribe((disable) => {\n      this.disableInterfaceToggle = disable;\n    });\n  }\n\n  /**\n   * Angular lifecycle hook called before the component is destroyed\n   */\n  ngDestroy(): void {\n    this.calculateSumSubscription.unsubscribe();\n    this.finalExpressionSubscription.unsubscribe();\n    this.variablesSubscription.unsubscribe();\n    this.disableAdvancedSubscription.unsubscribe();\n  }\n\n  /**\n   * Angular lifecycle hook called on input changes\n   */\n  ngOnChanges(args): void {\n    this.reload();\n  }\n\n  /**\n   * Re-import fhir and context and show the form\n   */\n  reload(): void {\n    if (this.fhirQuestionnaire !== null && this.itemLinkId !== null) {\n      this.loadError = !this.variableService.import(this.expressionUri, this.fhirQuestionnaire, this.itemLinkId);\n      if (this.loadError) {\n        this.liveAnnouncer.announce(this.errorLoading);\n      }\n      this.disableInterfaceToggle = this.variableService.needsAdvancedInterface;\n      this.advancedInterface = this.variableService.needsAdvancedInterface;\n    }\n\n    this.simpleExpression = this.variableService.simpleExpression;\n    this.linkIdContext = this.variableService.linkIdContext;\n    this.expressionSyntax = this.variableService.syntaxType;\n    this.caseStatements = this.variableService.caseStatements;\n    this.calculateSum = this.variableService.mightBeScore;\n    this.finalExpression = this.variableService.finalExpression;\n    this.variables = this.variableService.variables.map(e => e.label);\n  }\n\n  /**\n   * Export FHIR Questionnaire and download as a file\n   */\n  export(): void {\n    this.save.emit(this.variableService.export(this.expressionUri, this.finalExpression));\n  }\n\n  /**\n   * Create a new instance of a FHIR questionnaire file by summing all ordinal\n   * values\n   */\n  addSumOfScores(): void {\n    this.save.emit(this.variableService.addSumOfScores());\n  }\n\n  /**\n   * Called when the syntax type is changed to clean up expressions if the data cannot be converted\n   * @param $event - event from from the caller\n   */\n  onSyntaxChange($event: MatRadioChange): void {\n    const newSyntax = $event.value;\n\n    // Clear the existing expression if switching away from fhirpath\n    if (newSyntax === 'simple') {\n      this.finalExpression = '';\n    }\n\n    this.variableService.syntaxType = newSyntax;\n  }\n\n  /**\n   * Update the final expression\n   */\n  updateFinalExpression(expression): void {\n    this.finalExpression = expression;\n  }\n\n  /**\n   * Update the simple final expression\n   */\n  updateSimpleExpression(simple): void {\n    this.simpleExpression = simple;\n  }\n\n  /**\n   * Toggle the advanced interface based on the type\n   */\n  onTypeChange(event): void {\n    if (event.target.value === 'fhirpath') {\n      this.variableService.checkAdvancedInterface(true);\n    } else {\n      // Need to check all other variables and the final expression before we\n      // allow the advanced interface to be removed\n      this.variableService.checkAdvancedInterface();\n    }\n\n    if (this.variableService.needsAdvancedInterface) {\n      this.advancedInterface = true;\n      this.disableInterfaceToggle = true;\n    } else {\n      this.disableInterfaceToggle = false;\n    }\n  }\n}\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\n\nimport { Variable, AllVariableType, SimpleVariableType } from '../variable';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { RuleEditorService, SimpleStyle } from '../rule-editor.service';\n\n@Component({\n  selector: 'lhc-variables',\n  templateUrl: './variables.component.html',\n  styleUrls: ['./variables.component.css']\n})\nexport class VariablesComponent implements OnInit, OnChanges {\n  @Input() lhcStyle: SimpleStyle = {};\n  @Input() advancedInterface: boolean;\n\n  variableType: any = SimpleVariableType;\n  variableSubscription;\n  variables: Variable[];\n  levels = [{\n      level: 0,\n      name: 'Top Level Scope'\n    }\n  ];\n\n  constructor(private ruleEditorService: RuleEditorService) {}\n\n  /**\n   * Angular lifecycle hook called when the component is initialized\n   */\n  ngOnInit(): void {\n    this.variables = this.ruleEditorService.variables;\n    this.variableSubscription = this.ruleEditorService.variablesChange.subscribe((variables) => {\n      this.variables = variables;\n    });\n  }\n\n  /**\n   * Angular lifecycle hook called when bound property changes\n   */\n  ngOnChanges(changes): void {\n    if (changes.advancedInterface) {\n      this.variableType = this.advancedInterface ? AllVariableType : SimpleVariableType;\n      if (this.variables) {\n        const previousValues = [];\n\n        this.variables.forEach((variable, index) => {\n          previousValues[index] = variable.type;\n          variable.type = '';\n        });\n\n        // Not sure of a better way of setting the previous values than this\n        setTimeout(() => {\n          previousValues.forEach((type, index) => {\n            this.variables[index].type = type;\n          });\n        }, 10);\n      }\n    }\n  }\n\n  /**\n   * Angular lifecycle hook called before the component is destroyed\n   */\n  ngDestroy(): void {\n    this.variableSubscription.unsubscribe();\n  }\n\n  /**\n   * Called when adding a new variable\n   */\n  onAdd(): void {\n    this.ruleEditorService.addVariable();\n  }\n\n  /**\n   * Remove a variable at an index\n   * @param i - index to remove\n   */\n  onRemove(i: number): void {\n    this.ruleEditorService.remove(i);\n  }\n\n  /**\n   * Drag and drop rearrange of variable order\n   * @param event - drag and drop event\n   */\n  drop(event: CdkDragDrop<Variable[]>): void {\n    moveItemInArray(this.variables, event.previousIndex, event.currentIndex);\n  }\n\n  /**\n   * Update the preview when the variable name changes\n   */\n  onNameChange(): void {\n    this.ruleEditorService.update();\n  }\n\n  /**\n   * Toggle the advanced interface based on the type\n   */\n  onTypeChange(event): void {\n    if (event.target.value === 'query' || event.target.value === 'expression') {\n      this.ruleEditorService.checkAdvancedInterface(true);\n    } else {\n      // Need to check all other variables and the final expression before we\n      // allow the advanced interface to be removed\n      this.ruleEditorService.checkAdvancedInterface();\n    }\n  }\n\n  /**\n   * Get the labels of available variables at the current index\n   * @param index - Index of variable we're editing\n   */\n  getAvailableVariables(index: number): Array<string> {\n    const uneditableVariables = this.ruleEditorService.uneditableVariables.map((e) => e.name);\n    // Only return variables up to but not including index\n    const editableVariables = this.variables.map((e) => e.label).slice(0, index);\n\n    return uneditableVariables.concat(editableVariables);\n  }\n\n  /**\n   * Update the expression for variable at the given index.\n   * @param i - index\n   * @param expression - new expression to use\n   */\n  updateExpression(i: number, expression): void {\n    this.variables[i].expression = expression;\n  }\n\n  /**\n   * Update the Easy Path for variable at the given index.\n   * @param i - index\n   * @param easyPath - new expression to use\n   */\n  updateSimpleExpression(i: number, easyPath): void {\n    this.variables[i].simple = easyPath;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { RuleEditorService } from '../rule-editor.service';\nimport { UneditableVariable } from '../variable';\n\n@Component({\n  selector: 'lhc-uneditable-variables',\n  templateUrl: './uneditable-variables.component.html',\n  styleUrls: ['./uneditable-variables.component.css']\n})\nexport class UneditableVariablesComponent implements OnInit {\n  uneditableVariables: UneditableVariable[];\n  uneditableVariablesSubscription;\n\n  constructor(private variableService: RuleEditorService) {}\n\n  /**\n   * Angular lifecycle hook called when the component is initialized\n   */\n  ngOnInit(): void {\n    this.uneditableVariables = this.variableService.uneditableVariables;\n    this.uneditableVariablesSubscription =\n        this.variableService.uneditableVariablesChange.subscribe((variables) => {\n      this.uneditableVariables = variables;\n    });\n  }\n\n  /**\n   * Angular lifecycle hook called before the component is destroyed\n   */\n  ngDestroy(): void {\n    this.uneditableVariablesSubscription.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Question } from '../variable';\nimport { RuleEditorService, SimpleStyle } from '../rule-editor.service';\nimport { Unit, UNIT_CONVERSION } from '../units';\n\n@Component({\n  selector: 'lhc-question',\n  templateUrl: './question.component.html',\n  styleUrls: ['./question.component.css']\n})\nexport class QuestionComponent implements OnInit {\n  @Input() variable;\n  @Input() lhcStyle: SimpleStyle = {};\n  linkId = '';\n  questions: Question[];\n  itemHasScore = false;\n  isNonConvertibleUnit = false;\n  toUnit: string;\n  unit: string;\n  conversionOptions: Unit[];\n\n  constructor(private variableService: RuleEditorService) {}\n\n  /**\n   * Angular lifecycle hook called when the component is initialized\n   */\n  ngOnInit(): void {\n    this.linkId = this.variable.linkId ? this.variable.linkId : '';\n    this.toUnit = this.variable.unit ? this.variable.unit : '';\n    this.questions = this.variableService.questions;\n\n    this.onChange(false);\n\n    this.variableService.questionsChange.subscribe((questions) => {\n      this.questions = questions;\n    });\n  }\n\n  /**\n   * Get the question based on linkId\n   * @param linkId - FHIR linkId\n   */\n  getQuestion(linkId): Question {\n    return this.questions.find((q) => {\n      return q.linkId === linkId;\n    });\n  }\n\n  /**\n   * Get the list of units we can convert to based on the starting unit\n   * @param unit - Starting unit\n   */\n  getConversionOptions(unit: string): Unit[] {\n    return UNIT_CONVERSION[unit];\n  }\n\n  /**\n   * Called when the questionnaire question or unit is changed\n   * @param isQuestion - The change was for a question\n   */\n  onChange(isQuestion): void {\n    if (isQuestion) {\n      // Reset the conversion options when the question changes\n      this.toUnit = '';\n    }\n\n    // If we already have a question selected (as opposed to the select... prompt)\n    if (this.linkId) {\n      const question = this.getQuestion(this.linkId);\n      this.unit = question?.unit;\n      this.conversionOptions = this.getConversionOptions(this.unit);\n      this.isNonConvertibleUnit = this.unit && !this.conversionOptions;\n\n      // Check if this is a score\n      if (!this.conversionOptions && !this.isNonConvertibleUnit) {\n        this.itemHasScore = this.variableService.itemHasScore(this.linkId);\n      } else {\n        this.itemHasScore = false;\n      }\n\n      this.variable.expression = this.variableService.valueOrScoreExpression(\n        this.linkId, this.itemHasScore, !this.isNonConvertibleUnit, this.unit, this.toUnit);\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { RuleEditorService, SimpleStyle } from '../rule-editor.service';\n\n@Component({\n  selector: 'lhc-calculate-sum-prompt',\n  templateUrl: './calculate-sum-prompt.component.html',\n  styleUrls: ['./calculate-sum-prompt.component.css']\n})\nexport class CalculateSumPromptComponent implements OnInit {\n  @Input() lhcStyle: SimpleStyle = {};\n  @Output() export: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(private ruleEditorService: RuleEditorService) { }\n\n  /**\n   * Angular lifecycle hook called when the component is initialized\n   */\n  ngOnInit(): void {}\n\n  /**\n   * Close the dialog by specifying this should not be a score calculation\n   */\n  onCloseClick(): void {\n    this.ruleEditorService.toggleMightBeScore();\n  }\n\n  /**\n   * Export the sum of scores as a FHIR Questionnaire\n   */\n  onExportClick(): void {\n    this.export.emit();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as easyPathExpressions from 'easy-path-expressions';\n\n@Pipe({\n  name: 'easyPathExpressions'\n})\nexport class EasyPathExpressionsPipe implements PipeTransform {\n\n  transform(value: string, variables: string[]): string {\n    if (value !== undefined) {\n      const fhirPath = easyPathExpressions.fhirConvert(value, variables);\n      if (fhirPath !== null) {\n        return fhirPath;\n      }\n    }\n\n    return 'Not valid';\n  }\n}\n","import { Component, Input, Output, EventEmitter, OnChanges } from '@angular/core';\nimport { EasyPathExpressionsPipe } from '../easy-path-expressions.pipe';\nimport { SimpleStyle } from '../rule-editor.service';\n\n@Component({\n  selector: 'lhc-syntax-converter',\n  templateUrl: './syntax-converter.component.html',\n  styleUrls: ['./syntax-converter.component.css']\n})\nexport class SyntaxConverterComponent implements OnChanges {\n  @Input() simple: string;\n  @Input() variables;\n  @Input() lhcStyle: SimpleStyle = {};\n  @Output() simpleChange = new EventEmitter<string>();\n  @Output() expressionChange = new EventEmitter<string>();\n\n  fhirPathExpression: string;\n  jsToFhirPathPipe = new EasyPathExpressionsPipe();\n\n  constructor() { }\n\n  ngOnChanges(): void {\n    this.onExpressionChange(this.simple);\n  }\n\n  onExpressionChange(simple): void {\n    const fhirPath: string = this.jsToFhirPathPipe.transform(simple, this.variables);\n    this.fhirPathExpression = fhirPath;\n\n    this.simpleChange.emit(simple);\n    this.expressionChange.emit(fhirPath);\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { SimpleStyle } from '../rule-editor.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'lhc-syntax-preview',\n  templateUrl: './syntax-preview.component.html',\n  styleUrls: ['./syntax-preview.component.css']\n})\nexport class SyntaxPreviewComponent implements OnInit {\n  @Input() syntax;\n  @Input() lhcStyle: SimpleStyle;\n  @Input() showWhenEmpty = false;\n\n  constructor(private snackBar: MatSnackBar) { }\n\n  ngOnInit(): void {\n  }\n\n  /**\n   * Show an ephemeral notification that the value was copied.\n   */\n  copyNotification(): void {\n    this.snackBar.open('Copied to clipboard', null, {\n      duration: 2000\n    });\n  }\n}\n","import { AfterViewInit, Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { SimpleStyle } from '../rule-editor.service';\nimport Def from 'autocomplete-lhc';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'lhc-query-observation',\n  templateUrl: './query-observation.component.html',\n  styleUrls: ['./query-observation.component.css']\n})\nexport class QueryObservationComponent implements OnInit, AfterViewInit, OnDestroy {\n  queryUrl = 'https://clinicaltables.nlm.nih.gov/api/loinc_items/v3/search?df=text,LOINC_NUM';\n\n  @Input() variable;\n  @Input() index;\n  @Input() lhcStyle: SimpleStyle = {};\n  @ViewChild('autoComplete') autoCompleteElement;\n  autoComplete;\n  codes: Array<string>;\n  timeInterval: number;\n  timeIntervalUnit: string;\n  expression: string;\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit(): void {\n    if (this.variable !== undefined) {\n      this.codes = (this.variable.codes !== undefined) ? this.variable.codes : [];\n      this.timeInterval = this.variable.timeInterval || 1;\n      this.timeIntervalUnit = this.variable.timeIntervalUnit || 'months';\n      this.expression = this.variable.expression;\n    } else {\n      this.codes = [];\n    }\n  }\n\n  /**\n   * After the autocomplete is ready to be interacted with fetch the name for\n   * any codes already in the query search.\n   */\n  ngAfterViewInit(): void {\n    this.autoComplete = new Def.Autocompleter.Search(\n      this.autoCompleteElement.nativeElement, this.queryUrl,\n      {\n        tableFormat: true,\n        valueCols: [0, 1],\n        colHeaders: ['Text', 'LOINC Number'],\n        maxSelect: '*'\n      });\n\n    this.codes.forEach((code) => {\n      const matches = code.match(/http:\\/\\/loinc.org\\|(.+)/);\n\n      if (matches !== null) {\n        const loincCode = matches[1];\n        // LOINC Code\n        this.http.get(`${this.queryUrl}&terms=${loincCode}`)\n          .subscribe((data) => {\n            const namePosition = 3;\n            const name = [data[namePosition][0][0], loincCode].join(' - ');\n            this.autoComplete.storeSelectedItem(name, loincCode);\n            this.autoComplete.addToSelectedArea(name);\n          });\n      } else {\n        // Non-loinc code\n        this.autoComplete.storeSelectedItem(code, undefined);\n        this.autoComplete.addToSelectedArea(code);\n      }\n\n    });\n\n    Def.Autocompleter.Event.observeListSelections(`autocomplete-${this.index}`, () => {\n      const selectedItemData = this.autoComplete.getSelectedItemData();\n\n      // If there is no code then this is not a loinc code and we need to get\n      // the value from the array above\n      this.codes = this.autoComplete.getSelectedCodes().map((code, index) => {\n        return (code === undefined) ? selectedItemData[index].text : `http://loinc.org|${code}`;\n      });\n      this.onChange();\n    });\n  }\n\n  /**\n   * Angular lifecycle hook\n   */\n  ngOnDestroy(): void {\n    if (this.autoComplete !== undefined) {\n      this.autoComplete.destroy();\n    }\n  }\n\n  /**\n   * On changes update the expression and preview\n   */\n  onChange(): void {\n    // Separate with URL encoded version of the comma: ','\n    const codes = this.codes.join('%2C');\n\n    this.variable.expression = this.expression =\n      `Observation?code=${codes}&` +\n      `date=gt{{today()-${this.timeInterval} ${this.timeIntervalUnit}}}&` +\n      `patient={{%patient.id}}&_sort=-date&_count=1`;\n  }\n}\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output } from '@angular/core';\nimport { RuleEditorService, SimpleStyle } from '../rule-editor.service';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { CASE_REGEX, CaseStatement, Variable } from '../variable';\nimport { EasyPathExpressionsPipe } from '../easy-path-expressions.pipe';\n\n@Component({\n  selector: 'lhc-case-statements',\n  templateUrl: './case-statements.component.html',\n  styleUrls: ['./case-statements.component.css']\n})\nexport class CaseStatementsComponent implements OnInit, OnChanges {\n  @Input() lhcStyle: SimpleStyle = {};\n  @Input() syntax: string;\n  @Input() simpleExpression: string;\n  @Input() expression: string;\n\n  @Output() expressionChange = new EventEmitter<string>();\n  @Output() simpleChange = new EventEmitter<string>();\n\n  STRING_REGEX = /^'(.*)'$/;\n  pipe = new EasyPathExpressionsPipe();\n  outputExpressions = true;\n  defaultCase: string;\n  simpleDefaultCase: string;\n  cases: Array<CaseStatement> = [{condition: '', simpleCondition: '', output: '', simpleOutput: ''}];\n  output = '';\n\n  constructor(private ruleEditorService: RuleEditorService) { }\n\n  /**\n   * Angular lifecycle hook for initialization\n   */\n  ngOnInit(): void {\n    if (this.syntax === 'fhirpath' && this.expression !== undefined) {\n      this.parseIif(this.expression, 0);\n    } else if (this.syntax === 'simple' && this.simpleExpression !== undefined) {\n      this.parseSimpleCases();\n    }\n\n    this.output = this.getIif(0);\n  }\n\n  /**\n   * Parses the Easy Path expression and populates the case editor. Toggles \"use\n   * expressions\" off if output is only strings.\n   */\n  parseSimpleCases(): void {\n    this.parseIif(this.simpleExpression, 0);\n\n    // If all output values are strings toggle off \"use expressions\"\n    const outputString = this.cases.find(e => (!this.isString(e.simpleOutput)));\n    const defaultIsString = this.isString(this.simpleDefaultCase);\n\n    if (outputString === undefined && defaultIsString) {\n      this.outputExpressions = false;\n      // Remove quotes from output strings and default case\n      this.cases.forEach(e => {\n        e.simpleOutput = this.removeQuotes(e.simpleOutput);\n      });\n      this.simpleDefaultCase = this.removeQuotes(this.simpleDefaultCase);\n    }\n  }\n\n  /**\n   * Checks if the expression is a string\n   */\n  isString(expression: string): boolean {\n    return this.STRING_REGEX.test(expression);\n  }\n\n  /**\n   * Removes surrounding quotes\n   */\n  removeQuotes(expression: string): string {\n    return expression.match(this.STRING_REGEX)[1];\n  }\n\n  /**\n   * Angular lifecycle hook for changes\n   */\n  ngOnChanges(changes): void {\n    if (changes.syntax && this.syntax === 'simple' && changes.syntax.firstChange === false) {\n      this.parseSimpleCases();\n      this.onChange();\n    } else if (changes.syntax && this.syntax === 'fhirpath' && changes.syntax.firstChange === false) {\n      this.outputExpressions = true;\n      this.parseIif(this.expression, 0);\n      this.onChange();\n    }\n  }\n\n  /**\n   * Called when adding a new case\n   */\n  onAdd(): void {\n    this.cases.push({condition: '', simpleCondition: '', output: '', simpleOutput: ''});\n    this.onChange();\n    // TODO select next input box that was added\n  }\n\n  /**\n   * Remove the case at an index\n   * @param i - index to remove\n   */\n  onRemove(i): void {\n    this.cases.splice(i, 1);\n    this.onChange();\n  }\n\n  /**\n   * Angular lifecycle hook for changes\n   */\n  onChange(): void {\n    this.output = this.getIif(0);\n    this.expressionChange.emit(this.output);\n    this.simpleChange.emit(this.simpleExpression);\n  }\n\n  /**\n   * Parse iif expression at specified level. Top level is 0\n   * @param expression - expression to parse\n   * @param level - depth or level of expression nesting\n   */\n  parseIif(expression: string, level: number): boolean {\n    // If expressions don't start with iif( and end with ) they cannot be parsed\n    const matches = expression.match(CASE_REGEX);\n\n    if (matches !== null) {\n      const iifContents = matches[1];\n      let commaMatches = 0;\n      let nestingLevel = 0;\n      let comma1 = -1;\n      let comma2 = -1;\n\n      // Check where the ',' is relative to depth as indicated by parenthesis\n      for (let i = 0; i < iifContents.length; i++) {\n        switch (iifContents[i]) {\n          case '(':\n            nestingLevel++;\n            break;\n          case ')':\n            nestingLevel--;\n            break;\n          case ',':\n            if (nestingLevel === 0) {\n              commaMatches++;\n              if (comma1 === -1) {\n                comma1 = i;\n              } else if (comma2 === -1) {\n                comma2 = i;\n              }\n            }\n            break;\n        }\n      }\n\n      if (commaMatches === 2 && nestingLevel === 0) {\n        // Clear out any existing cases if we have a match for iif\n        if (level === 0) {\n          this.cases = [];\n        }\n        const condition = iifContents.substring(0, comma1).trim();\n        const trueCase = iifContents.substring(comma1 + 1, comma2).trim();\n        const falseCase = iifContents.substring(comma2 + 1, iifContents.length).trim();\n\n        if (this.syntax === 'simple') {\n          const variableNames = this.ruleEditorService.variables.map(e => e.label);\n\n          this.cases.push({\n            simpleCondition: condition,\n            simpleOutput: trueCase,\n            condition: this.pipe.transform(condition, variableNames),\n            output: this.pipe.transform(trueCase, variableNames)\n          });\n        } else {\n          this.cases.push({\n            condition,\n            output: trueCase\n          });\n        }\n\n        const parseResult = this.parseIif(falseCase, level + 1);\n        if (parseResult === false && this.syntax !== 'simple') {\n          this.defaultCase = falseCase;\n        } else if (parseResult === false && this.syntax === 'simple') {\n          this.simpleDefaultCase = falseCase;\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get an iif expression given a nesting level\n   * @param level - nesting level\n   */\n  getIif(level: number): string {\n    const isSimple = this.syntax === 'simple';\n    const output = this.transformIfSimple(isSimple ?\n      this.cases[level].simpleOutput :\n      this.cases[level].output, true);\n    const condition = this.transformIfSimple(isSimple ?\n      this.cases[level].simpleCondition :\n      this.cases[level].condition, false);\n\n    if (level === this.cases.length - 1) {\n      const defaultCase = this.transformIfSimple(isSimple ?\n        this.simpleDefaultCase : this.defaultCase, true);\n      return `iif(${condition},${output},${defaultCase})`;\n    } else {\n      return `iif(${condition},${output},${this.getIif(level + 1)})`;\n    }\n  }\n\n  /**\n   * Transform the expression parameter if the syntax type is Easy Path,\n   * otherwise return the expression. Additionally if this is an output column\n   * and output expressions are off surround with quotes.\n   * @param expression - Easy Path or FHIRPath expression\n   * @param isOutput - True if processing an output or default value\n   * @return FHIRPath Expression\n   */\n  transformIfSimple(expression: string, isOutput: boolean): string {\n    if (expression === undefined) {\n      return '';\n    }\n\n    let processedExpression = expression;\n\n    if (isOutput && !this.outputExpressions) {\n      processedExpression = `'${processedExpression}'`;  // TODO should we escape the expression?\n    }\n\n    // Convert when syntax is simple but not in the output column is outputExpressions is disabled\n    if (this.syntax === 'simple' && !(isOutput && !this.outputExpressions)) {\n      return this.pipe.transform(processedExpression, this.ruleEditorService.variables.map(e => e.label));\n    } else {\n      return processedExpression;\n    }\n  }\n\n  /**\n   * Drag and drop rearrange of variable order\n   * @param event - drag and drop event\n   */\n  drop(event: CdkDragDrop<Variable[]>): void {\n    moveItemInArray(this.cases, event.previousIndex, event.currentIndex);\n    this.onChange();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\nimport { RuleEditorComponent } from './rule-editor.component';\nimport { VariablesComponent } from './variables/variables.component';\nimport { UneditableVariablesComponent } from './uneditable-variables/uneditable-variables.component';\nimport { QuestionComponent } from './question/question.component';\nimport { CalculateSumPromptComponent } from './calculate-sum-prompt/calculate-sum-prompt.component';\nimport { EasyPathExpressionsPipe } from './easy-path-expressions.pipe';\nimport { SyntaxConverterComponent } from './syntax-converter/syntax-converter.component';\nimport { SyntaxPreviewComponent } from './syntax-preview/syntax-preview.component';\nimport { QueryObservationComponent } from './query-observation/query-observation.component';\nimport { CaseStatementsComponent } from './case-statements/case-statements.component';\n\n@NgModule({\n  declarations: [\n    RuleEditorComponent,\n    VariablesComponent,\n    UneditableVariablesComponent,\n    QuestionComponent,\n    CalculateSumPromptComponent,\n    EasyPathExpressionsPipe,\n    SyntaxConverterComponent,\n    SyntaxPreviewComponent,\n    QueryObservationComponent,\n    CaseStatementsComponent\n  ],\n  imports: [\n    FormsModule,\n    BrowserAnimationsModule,\n    DragDropModule,\n    MatRadioModule,\n    ClipboardModule,\n    MatTooltipModule,\n    MatSnackBarModule\n  ],\n  exports: [\n    RuleEditorComponent\n  ]\n})\nexport class RuleEditorModule {\n}\n","/*\n * Public API Surface of ng-rule-editor\n */\n\nexport * from './lib/rule-editor.service';\nexport * from './lib/rule-editor.component';\nexport * from './lib/rule-editor.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {CalculateSumPromptComponent as ɵd} from './lib/calculate-sum-prompt/calculate-sum-prompt.component';\nexport {CaseStatementsComponent as ɵi} from './lib/case-statements/case-statements.component';\nexport {EasyPathExpressionsPipe as ɵe} from './lib/easy-path-expressions.pipe';\nexport {QueryObservationComponent as ɵh} from './lib/query-observation/query-observation.component';\nexport {QuestionComponent as ɵc} from './lib/question/question.component';\nexport {SyntaxConverterComponent as ɵf} from './lib/syntax-converter/syntax-converter.component';\nexport {SyntaxPreviewComponent as ɵg} from './lib/syntax-preview/syntax-preview.component';\nexport {UneditableVariablesComponent as ɵb} from './lib/uneditable-variables/uneditable-variables.component';\nexport {VariablesComponent as ɵa} from './lib/variables/variables.component';"],"names":[],"mappings":"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"}