{"version":3,"file":"ng-rule-editor.js","sources":["../../../projects/ng-rule-editor/src/lib/variable.ts","../../../projects/ng-rule-editor/src/lib/units.ts","../../../projects/ng-rule-editor/src/lib/rule-editor.service.ts","../../../projects/ng-rule-editor/src/lib/rule-editor.component.ts","../../../projects/ng-rule-editor/src/lib/variables/variables.component.ts","../../../projects/ng-rule-editor/src/lib/uneditable-variables/uneditable-variables.component.ts","../../../projects/ng-rule-editor/src/lib/question/question.component.ts","../../../projects/ng-rule-editor/src/lib/calculate-sum-prompt/calculate-sum-prompt.component.ts","../../../projects/ng-rule-editor/src/lib/easy-path-expressions.pipe.ts","../../../projects/ng-rule-editor/src/lib/syntax-converter/syntax-converter.component.ts","../../../projects/ng-rule-editor/src/lib/syntax-preview/syntax-preview.component.ts","../../../projects/ng-rule-editor/src/lib/query-observation/query-observation.component.ts","../../../projects/ng-rule-editor/src/lib/case-statements/case-statements.component.ts","../../../projects/ng-rule-editor/src/lib/rule-editor.module.ts","../../../projects/ng-rule-editor/src/public-api.ts","../../../projects/ng-rule-editor/src/ng-rule-editor.ts"],"names":[],"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","sourcesContent":["export interface UneditableVariable {\n  name: string;\n  type?: string;\n  description?: string;\n}\n\nexport interface Variable {\n  __$index?: number;  // Original index in extension list\n  label: string;\n  type: string;\n  expression: string;\n  simple?: string;\n  linkId?: string;\n  unit?: string;\n  codes?: Array<string>;\n  timeInterval?: number;\n  timeIntervalUnit?: string;\n}\n\nexport interface Question {\n  linkId: string;\n  text: string;\n  itemHasScore?: boolean;\n  unit?: string;\n}\n\nexport interface CaseStatement {\n  condition: string;\n  simpleCondition?: string;\n  output: string;\n  simpleOutput?: string;\n}\n\nexport enum AllVariableType {\n  question = 'Question',\n  expression = 'FHIRPath Expression',\n  simple = 'Easy Path Expression',\n  query = 'FHIR Query',\n  queryObservation = 'FHIR Query (Observation)'\n}\n\nexport enum SimpleVariableType {\n  question = 'Question',\n  simple = 'Easy Path Expression',\n  queryObservation = 'FHIR Query (Observation)'\n}\n\nexport const CASE_REGEX = /^\\s*iif\\s*\\((.*)\\)\\s*$/;\n","// Conversion table for simple units\nexport interface Unit {\n  unit: string;\n  factor: number;\n}\n\n// Supported unit conversions. Key is the \"from\" and value is the \"to\" array\nexport const UNIT_CONVERSION: { [key: string]: Unit[] } = {\n  kg: [{ unit: 'lbs', factor: 2.20462 }],\n  lbs: [{ unit: 'kg', factor: 0.453592 }],\n  '[in_i]': [{ unit: 'cm', factor: 2.54 }, { unit: 'm', factor: 0.0254 }]\n};\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport copy from 'fast-copy';\n\nimport { AllVariableType, CASE_REGEX, Question, SimpleVariableType, UneditableVariable, Variable } from './variable';\nimport { UNIT_CONVERSION } from './units';\n\nexport interface SimpleStyle {\n  h1?: object;\n  h2?: object;\n  previewArea?: object;\n  variableHeader?: object;\n  variableRow?: object;\n  buttonPrimary?: object;\n  buttonSecondary?: object;\n  buttonDanger?: object;\n  input?: object;\n  select?: object;\n  description?: object;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RuleEditorService {\n  syntaxType = 'simple';\n  linkIdContext: string;\n  uneditableVariablesChange: Subject<UneditableVariable[]> =\n    new Subject<UneditableVariable[]>();\n  variablesChange: Subject<Variable[]> = new Subject<Variable[]>();\n  questionsChange: Subject<Question[]> = new Subject<Question[]>();\n  mightBeScoreChange: Subject<boolean> = new Subject<boolean>();\n  finalExpressionChange: Subject<string> = new Subject<string>();\n  disableAdvancedChange: Subject<boolean> = new Subject<boolean>();\n  uneditableVariables: UneditableVariable[];\n  variables: Variable[];\n  questions: Question[];\n  finalExpression: string;\n  simpleExpression: string;\n  caseStatements: boolean;\n  needsAdvancedInterface = false;\n\n  private LANGUAGE_FHIRPATH = 'text/fhirpath';\n  private LANGUAGE_FHIR_QUERY = 'application/x-fhir-query';\n  private QUESTION_REGEX = /^%resource\\.item\\.where\\(linkId='(.*)'\\)\\.answer\\.value(?:\\*(\\d*\\.?\\d*))?$/;\n  private QUERY_REGEX = /^Observation\\?code=(.+)&date=gt{{today\\(\\)-(\\d+) (.+)}}&patient={{%patient.id}}&_sort=-date&_count=1$/;\n  private VARIABLE_EXTENSION = 'http://hl7.org/fhir/StructureDefinition/variable';\n  private SCORE_VARIABLE_EXTENSION = 'http://lhcforms.nlm.nih.gov/fhir/ext/rule-editor-score-variable';\n  private SCORE_EXPRESSION_EXTENSION = 'http://lhcforms.nlm.nih.gov/fhir/ext/rule-editor-expression';\n  private SIMPLE_SYNTAX_EXTENSION = 'http://lhcforms.nlm.nih.gov/fhir/ext/simple-syntax';\n  private CALCULATED_EXPRESSION = 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-calculatedExpression';\n  private LAUNCH_CONTEXT_URI = 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-launchContext';\n\n  private linkIdToQuestion = {};\n  private fhir;\n  mightBeScore = false;\n\n  constructor() {\n    this.variables = [];\n    this.uneditableVariables = [];\n  }\n\n  /**\n   * Create a new variable\n   */\n  addVariable(): void {\n    // Get all the existing variable names\n    const existingNames = this.variables.map((e) => e.label)\n      .concat(this.uneditableVariables.map((e) => e.name));\n\n    this.variables.push({\n      label: this.getNewLabelName(existingNames),\n      type: 'question',\n      expression: ''\n    });\n    this.variablesChange.next(this.variables);\n  }\n\n  /**\n   * Remove a variable\n   * @param i - index of variable to remove\n   */\n  remove(i: number): void {\n    this.variables.splice(i, 1);\n  }\n\n  /**\n   * Trigger an update (used when changing variable names to update the preview)\n   */\n  update(): void {\n    this.variablesChange.next(this.variables);\n  }\n\n  /**\n   * Checks the advanced interface status and allows toggle if no expressions or\n   * queries are present\n   * @param toggleOn - Set the advanced interface on (without having to run checks)\n   */\n  checkAdvancedInterface(toggleOn?: boolean): void {\n    if (toggleOn) {\n      this.needsAdvancedInterface = true;\n    } else {\n      let needsAdvanced = false;\n      // Check variables\n      if (this.variables.find((e) => e.type === 'expression' || e.type === 'query') !== undefined) {\n        needsAdvanced = true;\n      }\n\n      // Check final expression\n      if (this.syntaxType === 'fhirpath') {\n        needsAdvanced = true;\n      }\n\n      this.needsAdvancedInterface = needsAdvanced;\n    }\n\n    this.disableAdvancedChange.next(this.needsAdvancedInterface);\n  }\n\n  /**\n   * Get the list of uneditable variables based on the FHIR Questionnaire\n   * @param questionnaire - FHIR Questionnaire\n   */\n  getUneditableVariables(questionnaire): UneditableVariable[] {\n    if (Array.isArray(questionnaire.extension)) {\n      return questionnaire.extension.reduce((accumulator, extension) => {\n        if (extension.url === this.LAUNCH_CONTEXT_URI && extension.extension) {\n          const uneditableVariable = {\n            name: extension.extension.find((e) => e.url === 'name').valueId,\n            type: extension.extension.filter((e) => e.url === 'type')?.map((e) => e.valueCode).join('|'),\n            description: extension.extension.find((e) => e.url === 'description')?.valueString\n          };\n\n          accumulator.push(uneditableVariable);\n        }\n        return accumulator;\n      }, []);\n    }\n\n    return [];\n  }\n\n  /**\n   * Get and remove the variables from the FHIR object\n   * @param questionnaire\n   */\n  extractVariables(questionnaire): Variable[] {\n    // Look at the top level fhirpath related extensions to populate the editable variables\n    // TODO look at the focus item variables\n\n    if (questionnaire.extension) {\n      const variables = [];\n      const nonVariableExtensions = [];\n\n      // Add an index to each extension which we will then use to get the\n      // variables back in the correct order. __$index will be removed on save\n      questionnaire.extension = questionnaire.extension.map((e, i) => ({ ...e, __$index: i }));\n\n      questionnaire.extension.forEach((extension) => {\n        if (extension.url === this.VARIABLE_EXTENSION && extension.valueExpression) {\n          switch (extension.valueExpression.language) {\n            case this.LANGUAGE_FHIRPATH:\n              const fhirPathVarToAdd = this.processVariable(\n                extension.valueExpression.name,\n                extension.valueExpression.expression,\n                extension.__$index,\n                extension.valueExpression.extension);\n              if (fhirPathVarToAdd.type === 'expression') {\n                this.needsAdvancedInterface = true;\n              }\n              variables.push(fhirPathVarToAdd);\n              break;\n            case this.LANGUAGE_FHIR_QUERY:\n              const queryVarToAdd = this.processQueryVariable(\n                extension.valueExpression.name,\n                extension.valueExpression.expression,\n                extension.__$index);\n              if (queryVarToAdd.type === 'query') {\n                this.needsAdvancedInterface = true;\n              }\n              variables.push(queryVarToAdd);\n              break;\n          }\n        } else {\n          nonVariableExtensions.push(extension);\n        }\n      });\n\n      // Remove the variables so they can be re-added on export\n      questionnaire.extension = nonVariableExtensions;\n\n      return variables;\n    }\n\n    return [];\n  }\n\n  /**\n   * Check if the current item has an ordinalValue extension on the answer\n   * @param item - Question item or linkId\n   */\n  itemHasScore(item): boolean {\n    if (typeof item === 'string') {\n      item = this.linkIdToQuestion[item];\n    }\n\n    return (item.answerOption || []).some((answerOption) => {\n      return (answerOption.extension || []).some((extension) => {\n        return extension.url === 'http://hl7.org/fhir/StructureDefinition/ordinalValue';\n      });\n    });\n  }\n\n  /**\n   * Get the number of ordinalValue on the answers of the questions on the\n   * Questionnaire\n   * @param questionnaire - FHIR Questionnaire\n   * @param linkIdContext - linkId to exclude from calculation\n   * @return number of score questions on the questionnaire\n   */\n  getScoreQuestionCount(questionnaire, linkIdContext): number {\n    let scoreQuestions = 0;\n\n    questionnaire.item.forEach((item) => {\n      if (this.itemHasScore(item)) {\n        scoreQuestions++;\n      }\n    });\n\n    return scoreQuestions;\n  }\n\n  /**\n   * Import a FHIR Questionnaire to populate questions\n   * @param expressionUri - URI of expression extension on linkIdContext question\n   *  to extract and modify\n   * @param questionnaire - FHIR Questionnaire\n   * @param linkIdContext - Context to use for final expression\n   * @return true if load was successful\n   */\n  import(expressionUri: string, questionnaire, linkIdContext): boolean {\n    this.linkIdContext = linkIdContext;  // TODO change notification for linkId?\n    this.fhir = copy(questionnaire);\n    let loadSuccess = false;\n\n    if (this.fhir.resourceType === 'Questionnaire' && this.fhir.item && this.fhir.item.length) {\n      // If there is at least one score question we will ask the user if they\n      // want to calculate the score\n      const SCORE_MIN_QUESTIONS = 1;\n      this.mightBeScore = this.getScoreQuestionCount(this.fhir, linkIdContext) > SCORE_MIN_QUESTIONS;\n      this.mightBeScoreChange.next(this.mightBeScore);\n\n      this.uneditableVariables = this.getUneditableVariables(this.fhir);\n      this.uneditableVariablesChange.next(this.uneditableVariables);\n\n      this.linkIdToQuestion = {};\n      this.needsAdvancedInterface = false;\n      this.processItem(this.fhir.item);\n\n      this.variables = this.extractVariables(this.fhir);\n      this.variablesChange.next(this.variables);\n\n      this.questions = [];\n\n      // tslint:disable-next-line:forin\n      for (const key in this.linkIdToQuestion) {\n        if (!this.linkIdToQuestion.hasOwnProperty(key)) {\n          return;\n        }\n        const e = this.linkIdToQuestion[key];\n        // TODO decimal vs choice\n        const MAX_Q_LEN = 60;  // Maximum question length before truncating.\n\n        const text = e.text;\n\n        this.questions.push({\n          linkId: e.linkId,\n          text: text.length > MAX_Q_LEN ? text.substring(0, MAX_Q_LEN) + '...' : text,\n          unit: this.getQuestionUnits(e.linkId)\n        });\n      }\n      this.questionsChange.next(this.questions);\n\n      const expression = this.extractExpression(expressionUri, this.fhir.item, linkIdContext);\n\n      if (expression !== null) {\n        // @ts-ignore\n        this.finalExpression = expression.valueExpression.expression;\n\n        this.caseStatements = this.finalExpression.match(CASE_REGEX) !== null;\n\n        const simpleSyntax = this.extractSimpleSyntax(expression);\n\n        if (simpleSyntax === null && this.finalExpression !== '') {\n          this.syntaxType = 'fhirpath';\n          this.needsAdvancedInterface = true;\n        } else {\n          this.syntaxType = 'simple';\n          this.simpleExpression = simpleSyntax;\n        }\n      } else {\n        // Reset input to be a blank simple expression if there is nothing on\n        // the form\n        this.syntaxType = 'simple';\n        this.simpleExpression = '';\n        this.finalExpression = '';\n      }\n\n      this.finalExpressionChange.next(this.finalExpression);\n      loadSuccess = true;\n    }\n\n    return loadSuccess;\n  }\n\n  /**\n   * Process nested FHIR Questionnaire items\n   * @param items - Current level of item nesting\n   * @private\n   */\n  private processItem(items): void {\n    items.forEach((e) => {\n      this.linkIdToQuestion[e.linkId] = e;\n      if (e.item) {\n        this.processItem(e.item);\n      }\n    });\n  }\n\n  /**\n   * Get and remove the simple syntax if available. If not return null\n   * @param expression\n   */\n  extractSimpleSyntax(expression): string|null {\n    if (expression.valueExpression && expression.valueExpression.extension) {\n      const customExtension = expression.valueExpression.extension.find((e) => {\n        return e.url === this.SIMPLE_SYNTAX_EXTENSION;\n      });\n\n      if (customExtension !== undefined) {\n        return customExtension.valueString;  // TODO move to code\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get and remove the final expression\n   * @param expressionUri - Expression extension URL\n   * @param items - FHIR questionnaire item array\n   * @param linkId - linkId of question where to extract expression\n   */\n  extractExpression(expressionUri, items, linkId): object|null {\n    for (const item of items) {\n      if (item.linkId === linkId && item.extension) {\n        const extensionIndex = item.extension.findIndex((e) => {\n          return e.url === expressionUri && e.valueExpression.language === this.LANGUAGE_FHIRPATH &&\n            e.valueExpression.expression;\n        });\n\n        if (extensionIndex !== -1) {\n          const finalExpression = item.extension[extensionIndex];\n          item.extension.splice(extensionIndex, 1);\n\n          return finalExpression;\n        }\n      } else if (item.item) {\n        return this.extractExpression(expressionUri, item.item, linkId);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Process a FHIRPath expression into a more user friendly format if possible.\n   * If the format of the FHIRPath matches a format we can display with a\n   * question dropdown, etc show that. If not show the FHIRPath expression.\n   * @param name - Name to assign variable\n   * @param expression - Expression to process\n   * @param index - Original order in extension list\n   * @param extensions - Any additional extensions (for simple fhirpath etc)\n   * @return Variable type which can be used by the Rule Editor to show a\n   * question, expression etc\n   * @private\n   */\n  private processVariable(name, expression, index?: number, extensions?): Variable {\n    const matches = expression.match(this.QUESTION_REGEX);\n\n    const simpleExtension = extensions && extensions.find(e => e.url === this.SIMPLE_SYNTAX_EXTENSION);\n\n    if (matches !== null) {\n      const linkId = matches[1];\n      const factor = matches[2];\n\n      const variable: Variable = {\n        __$index: index,\n        label: name,\n        type: 'question',\n        linkId,\n        expression\n      };\n\n      if (factor) {\n        // We might be able to do unit conversion\n        const sourceUnits = this.getQuestionUnits(linkId);\n\n        if (UNIT_CONVERSION.hasOwnProperty(sourceUnits)) {\n          const conversions = UNIT_CONVERSION[sourceUnits];\n          const conversion = conversions.find((e) => {\n            return e.factor.toString() === factor;\n          });\n\n          variable.unit = conversion.unit;\n        }\n      }\n\n      return variable;\n    } else if (simpleExtension !== undefined) {\n      return {\n        __$index: index,\n        label: name,\n        type: 'simple',\n        expression,\n        simple: simpleExtension.valueString\n      };\n    } else {\n      return {\n        __$index: index,\n        label: name,\n        type: 'expression',\n        expression\n      };\n    }\n  }\n\n  /**\n   * Process a x-fhir-query expression into a more user friendly format if\n   * possible. Show a code autocomplete field if possible if not show the\n   * expression editing field.\n   * @param name - Name to assign variable\n   * @param expression - Expression to process\n   * @param index - Original order in extension list\n   * @return Variable type which can be used by the Rule Editor to show a\n   * question, expression etc\n   * @private\n   */\n  private processQueryVariable(name, expression, index?: number): Variable {\n    const matches = expression.match(this.QUERY_REGEX);\n\n    if (matches !== null) {\n      const codes = matches[1].split('%2C');  // URL encoded comma ','\n      const timeInterval = parseInt(matches[2], 10);\n      const timeIntervalUnits = matches[3];\n\n      return {\n        __$index: index,\n        label: name,\n        type: 'queryObservation',\n        codes,\n        timeInterval,\n        timeIntervalUnit: timeIntervalUnits,\n        expression\n      };\n    } else {\n      return {\n        __$index: index,\n        label: name,\n        type: 'query',\n        expression\n      };\n    }\n  }\n\n  // TODO check behavior of repeating linkId\n  /**\n   * Get question units for the question\n   * @param linkId - Question linkId\n   * @private\n   */\n  private getQuestionUnits(linkId): string {\n    const QUESTIONNAIRE_UNIT = 'http://hl7.org/fhir/StructureDefinition/questionnaire-unit';\n    const question = this.linkIdToQuestion[linkId];\n\n    if (question.extension) {\n      const extension = question.extension.find((e) => {\n        return e.url === QUESTIONNAIRE_UNIT &&\n          e.valueCoding.system && e.valueCoding.system === 'http://unitsofmeasure.org';\n      });\n\n      if (extension && extension.valueCoding.code) {\n        return extension.valueCoding.code;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Generate a label name like A, B, C, ... AA, AB which is not already used\n   * @param existingNames {string[]} - Array of names already used by existing variables\n   * @private\n   */\n  private getNewLabelName(existingNames: string[]): string {\n    // All letters which can be used for a simple variable name\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n\n    // First pass is with a single character variable name. Other passes are with two\n    const firstLetterAlphabet = [''].concat(alphabet);\n    for (const firstLetter of firstLetterAlphabet) {\n      for (const secondLetter of alphabet) {\n        const potentialName = firstLetter + secondLetter;\n\n        const count = existingNames.filter((e) => e === potentialName);\n\n        if (count.length === 0) {\n          return potentialName;\n        }\n      }\n    }\n\n    // Don't return a suggested name if we exhausted all combinations\n    return '';\n  }\n\n  /**\n   * Toggle the mightBeScore\n   */\n  toggleMightBeScore(): void {\n    this.mightBeScore = !this.mightBeScore;\n    this.mightBeScoreChange.next(this.mightBeScore);\n  }\n\n  /**\n   * Add variables and finalExpression and return the new FHIR Questionnaire\n   * @param url Extension URL to use for the expression\n   * @param finalExpression\n   */\n  export(url: string, finalExpression: string): object {\n    // TODO support for different variable scopes\n    // Copy the fhir object so we can export more than once\n    // (if we add our data the second export will have duplicates)\n    const fhir = copy(this.fhir);\n\n    const variablesToAdd = this.variables.map((e) => {\n      const variable = {\n        __$index: e.__$index,\n        url: this.VARIABLE_EXTENSION,\n        valueExpression: {\n          name: e.label,\n          language: e.type === 'query' ? this.LANGUAGE_FHIR_QUERY : this.LANGUAGE_FHIRPATH,\n          expression: e.expression\n        }\n      };\n\n      if (e.type === 'simple') {\n        // @ts-ignore\n        variable.valueExpression.extension = [{\n          url: this.SIMPLE_SYNTAX_EXTENSION,\n          valueString: e.simple\n        }];\n      }\n\n      return variable;\n    });\n\n    // Split the variables into two buckets: Variables present when\n    // Questionnaire was imported and variables added by the user using the Rule\n    // Editor. Add variables present initially among the existing extensions.\n    // Add the remaining variables at the end\n    const variablesPresentInitially = [];\n    const variablesAdded = [];\n\n    variablesToAdd.forEach(e => {\n      if (e.__$index === undefined) {\n        variablesAdded.push(e);\n      } else {\n        variablesPresentInitially.push(e);\n      }\n    });\n\n    if (fhir.extension) {\n      // Introduce variables present before\n      fhir.extension = fhir.extension.concat(variablesPresentInitially);\n      // Sort by index\n      fhir.extension.sort((a, b) => a.__$index - b.__$index);\n      // Add variables added by the user\n      fhir.extension = fhir.extension.concat(variablesAdded);\n    } else {\n      fhir.extension = variablesPresentInitially.concat(variablesAdded);\n    }\n\n    // Remove __$index\n    fhir.extension = fhir.extension.map(({__$index, ...other}) => other);\n\n    const finalExpressionExtension: any = {\n      url,\n      valueExpression: {\n        language: this.LANGUAGE_FHIRPATH,\n        expression: finalExpression\n      }\n    };\n\n    // TODO keep existing extensions\n    if (this.syntaxType === 'simple') {\n      finalExpressionExtension.valueExpression.extension = [{\n        url: this.SIMPLE_SYNTAX_EXTENSION,\n        valueString: this.simpleExpression\n      }];\n    }\n\n    this.insertExtensions(fhir.item, this.linkIdContext, [finalExpressionExtension]);\n\n    // If there are any query observation extensions check to make sure there is\n    // a patient launch context. If there is not add one.\n    const hasQueryObservations = this.variables.find((e) => {\n      return e.type === 'queryObservation';\n    });\n\n    if (hasQueryObservations !== undefined) {\n      const patientLaunchContext = fhir.extension.find((extension) => {\n        if (extension.url === this.LAUNCH_CONTEXT_URI &&\n            Array.isArray(extension.extension)) {\n          const patientName = extension.extension.find((subExtension) => {\n            return subExtension.url === 'name' && subExtension.valueId === 'patient';\n          });\n\n          if (patientName !== undefined) {\n            return true;\n          }\n        }\n\n        return false;\n      });\n\n      if (patientLaunchContext === undefined) {\n        // Add launchContext\n        if (!Array.isArray(fhir.extension)) {\n          fhir.extension = [];\n        }\n\n        const name = 'patient';\n        const type = 'Patient';\n        const description = 'For filling in patient information as the subject for the form';\n\n        fhir.extension.push({\n          url: this.LAUNCH_CONTEXT_URI,\n          extension: [\n            { url: 'name', valueId: name },\n            { url: 'type', valueCode: type },\n            { url: 'description', valueString: description }\n          ]\n        });\n\n        this.uneditableVariables.push({\n          name,\n          type,\n          description\n        });\n        this.uneditableVariablesChange.next(this.uneditableVariables);\n      }\n    }\n\n    return fhir;\n  }\n\n  /**\n   * Takes FHIR questionnaire definition and a linkId and returns the FHIR\n   * Questionnaire with a calculated expression at the given linkId which sums up\n   * all the ordinal values in the questionnaire\n   * @param questionnaire - FHIR Questionnaire\n   * @param linkId - Question linkId\n   */\n  addTotalScoreRule(questionnaire, linkId): object {\n    this.fhir = questionnaire;\n    this.linkIdContext = linkId;\n    return this.addSumOfScores();\n  }\n\n  /**\n   * Given the current FHIR questionnaire definition and a linkId return a new FHIR\n   * Questionnaire with a calculated expression at the given linkId which sums up\n   * all the ordinal values in the questionnaire\n   */\n  addSumOfScores(): object {\n    const fhir = this.fhir;\n    const linkIdContext = this.linkIdContext;\n\n    const variableNames = [];\n    const scoreQuestionLinkIds = [];\n\n    // Get an array of linkIds for score questions\n    fhir.item.forEach((item) => {\n      if (item.linkId !== linkIdContext && this.itemHasScore(item)) {\n        scoreQuestionLinkIds.push(item.linkId);\n      }\n    });\n\n    // Get as many short suggested variable names as we have score questions\n    scoreQuestionLinkIds.forEach(() => {\n      variableNames.push(this.getNewLabelName(variableNames));\n    });\n\n    const scoreQuestions = scoreQuestionLinkIds.map((e, i) => {\n      return {\n        url: this.VARIABLE_EXTENSION,\n        valueExpression: {\n          name: variableNames[i],\n          language: this.LANGUAGE_FHIRPATH,\n          expression: `%questionnaire.item.where(linkId = '${e}').answerOption` +\n            `.where(valueCoding.code=%resource.item.where(linkId = '${e}').answer.valueCoding.code).extension` +\n            `.where(url='http://hl7.org/fhir/StructureDefinition/ordinalValue').valueDecimal`,\n          extension: [{\n            url: this.SCORE_VARIABLE_EXTENSION\n          }]\n        }\n      };\n    });\n\n    const anyQuestionAnswered = {\n      url: this.VARIABLE_EXTENSION,\n      valueExpression: {\n        name: 'any_questions_answered',\n        language: this.LANGUAGE_FHIRPATH,\n        expression: variableNames.map((e) => `%${e}.exists()`).join(' or '),\n        extension: [{\n          url: this.SCORE_VARIABLE_EXTENSION\n        }]\n      }\n    };\n\n    const sumString = variableNames.map((e) => `iif(%${e}.exists(), %${e}, 0)`).join(' + ');\n\n    const totalCalculation = {\n      url: this.CALCULATED_EXPRESSION,\n      valueExpression: {\n        description: 'Total score calculation',\n        language: this.LANGUAGE_FHIRPATH,\n        expression: `iif(%any_questions_answered, ${sumString}, {})`,\n        extension: [{\n          url: this.SCORE_EXPRESSION_EXTENSION\n        }]\n      }\n    };\n\n    scoreQuestions.push(anyQuestionAnswered);\n    // @ts-ignore\n    scoreQuestions.push(totalCalculation);\n\n    this.insertExtensions(fhir.item, linkIdContext, scoreQuestions);\n\n    return fhir;\n  }\n\n  /**\n   * Checks if the referenced Questionnaire item is a score calculation added by\n   * the Rule Editor\n   * @param questionnaire - FHIR Questionnaire\n   * @param linkId - Questionnaire item Link ID to check\n   * @return True if the question at linkId is a score calculation created by\n   * the Rule Editor, false otherwise\n   */\n  isScoreCalculation(questionnaire, linkId): boolean {\n    const checkForScore = (item) => {\n      if (linkId === item.linkId) {\n        const isScore = item.extension.find((extension) => !!this.isScoreExtension(extension));\n\n        if (isScore) {\n          return true;\n        }\n      }\n\n      if (item.item) {\n        const subItemHasScore = item.item.find((subItem) => checkForScore(subItem));\n\n        if (subItemHasScore) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    return !!questionnaire.item.find((item) => checkForScore(item));\n  }\n\n  /**\n   * Updates a FHIR questionnaire score calculation on the item identified by\n   * the linkId\n   * @param questionnaire - FHIR Questionnaire\n   * @param linkId - Questionnaire item Link ID to update\n   * @return Questionnaire with updated calculation\n   */\n  updateScoreCalculation(questionnaire, linkId): object {\n    this.removeSumOfScores(questionnaire, linkId);\n    return this.addTotalScoreRule(questionnaire, linkId);\n  }\n\n  /**\n   * Removes score calculations added by the rule editor on the entire\n   * questionnaire or on a specific item\n   * @param questionnaire - FHIR Questionnaire\n   * @param linkId - Questionnaire item Link ID where to remove score. If empty\n   * try to remove scores from all items.\n   * @return Questionnaire without the score calculation variable and expression\n   */\n  removeSumOfScores(questionnaire, linkId?): object {\n    this.fhir = questionnaire;\n\n    const removeItemScoreVariables = (item) => {\n      if (linkId === undefined || linkId === item.linkId) {\n        item.extension = item.extension.filter((extension) => !this.isScoreExtension(extension));\n      }\n\n      if (item.item) {\n        item.item.forEach((subItem) => removeItemScoreVariables(subItem));\n      }\n    };\n\n    this.fhir.item.forEach(removeItemScoreVariables);\n\n    return this.fhir;\n  }\n\n  /**\n   * Returns true if the extension has an extension for calculating score false otherwise\n   * @param extension - FHIR Extension object\n   * @private\n   */\n  private isScoreExtension(extension): boolean {\n    if (extension.valueExpression && extension.valueExpression.extension &&\n      extension.valueExpression.extension.length) {\n      return !!extension.valueExpression.extension.find(e => e &&\n        (e.url === this.SCORE_VARIABLE_EXTENSION ||\n          e.url === this.SCORE_EXPRESSION_EXTENSION));\n    } else {\n      return false;\n    }\n  }\n\n  private insertExtensions(items, linkId, extensions): void {\n    for (const item of items) {\n      if (item.linkId === linkId) {\n        if (item.extension) {\n          item.extension = item.extension.concat(extensions);\n        } else {\n          item.extension = extensions;\n        }\n        break;\n      } else if (item.item) {\n        this.insertExtensions(item.item, linkId, extensions);\n      }\n    }\n  }\n\n  /**\n   * Get the expression for a question\n   * @param linkId - Question linkId\n   * @param itemHasScore - Answer has an ordinalValue extension\n   * @param convertible - Units can be converted\n   * @param unit - Base units\n   * @param toUnit - Destination units\n   */\n  valueOrScoreExpression(linkId: string, itemHasScore: boolean, convertible: boolean, unit: string, toUnit: string): string {\n    if (itemHasScore) {\n      return `%questionnaire.item.where(linkId = '${linkId}').answerOption` +\n        `.where(valueCoding.code=%resource.item.where(linkId = '${linkId}').answer.valueCoding.code).extension` +\n        `.where(url='http://hl7.org/fhir/StructureDefinition/ordinalValue').valueDecimal`;\n    } else if (convertible && unit && toUnit) {\n      const factor = UNIT_CONVERSION[unit].find((e) => e.unit === toUnit).factor;\n      return `%resource.item.where(linkId='${linkId}').answer.value*${factor}`;\n    } else {\n      return `%resource.item.where(linkId='${linkId}').answer.value`;\n    }\n  }\n}\n","import { DatePipe } from '@angular/common';\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output } from '@angular/core';\nimport { MatRadioChange } from '@angular/material/radio';\n\nimport { RuleEditorService, SimpleStyle } from './rule-editor.service';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'lhc-rule-editor',\n  templateUrl: 'rule-editor.component.html',\n  styleUrls: ['rule-editor.component.css']\n})\nexport class RuleEditorComponent implements OnInit, OnChanges {\n  @Input() advancedInterface = false;\n  @Input() fhirQuestionnaire = null;\n  @Input() itemLinkId = null;\n  @Input() submitButtonName = 'Submit';\n  @Input() titleName = 'Rule Editor';\n  @Input() expressionLabel = 'Final Expression';\n  @Input() expressionUri = 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-calculatedExpression';\n  @Input() lhcStyle: SimpleStyle = {};\n  @Output() save = new EventEmitter<object>();\n\n  errorLoading = 'Could not detect a FHIR Questionnaire; please try a different file.';\n  expressionSyntax: string;\n  simpleExpression: string;\n  finalExpression: string;\n  finalExpressionFhirPath: string;\n  linkIdContext: string;\n  datePipe = new DatePipe('en-US');\n  calculateSum: boolean;\n  suggestions = [];\n  variables: string[];\n  caseStatements: boolean;\n  disableInterfaceToggle = false;\n  loadError = false;\n\n  private calculateSumSubscription;\n  private finalExpressionSubscription;\n  private variablesSubscription;\n  private disableAdvancedSubscription;\n\n  constructor(private variableService: RuleEditorService, private liveAnnouncer: LiveAnnouncer) {}\n\n  ngOnInit(): void {\n    this.calculateSumSubscription = this.variableService.mightBeScoreChange.subscribe((mightBeScore) => {\n      this.calculateSum = mightBeScore;\n    });\n    this.finalExpressionSubscription = this.variableService.finalExpressionChange.subscribe((finalExpression) => {\n      this.finalExpression = finalExpression;\n    });\n    this.variablesSubscription = this.variableService.variablesChange.subscribe((variables) => {\n      this.variables = variables.map(e => e.label);\n    });\n    this.disableAdvancedSubscription = this.variableService.disableAdvancedChange.subscribe((disable) => {\n      this.disableInterfaceToggle = disable;\n    });\n  }\n\n  /**\n   * Angular lifecycle hook called before the component is destroyed\n   */\n  ngDestroy(): void {\n    this.calculateSumSubscription.unsubscribe();\n    this.finalExpressionSubscription.unsubscribe();\n    this.variablesSubscription.unsubscribe();\n    this.disableAdvancedSubscription.unsubscribe();\n  }\n\n  /**\n   * Angular lifecycle hook called on input changes\n   */\n  ngOnChanges(args): void {\n    this.reload();\n  }\n\n  /**\n   * Re-import fhir and context and show the form\n   */\n  reload(): void {\n    if (this.fhirQuestionnaire !== null && this.itemLinkId !== null) {\n      this.loadError = !this.variableService.import(this.expressionUri, this.fhirQuestionnaire, this.itemLinkId);\n      if (this.loadError) {\n        this.liveAnnouncer.announce(this.errorLoading);\n      }\n      this.disableInterfaceToggle = this.variableService.needsAdvancedInterface;\n      this.advancedInterface = this.variableService.needsAdvancedInterface;\n    }\n\n    this.simpleExpression = this.variableService.simpleExpression;\n    this.linkIdContext = this.variableService.linkIdContext;\n    this.expressionSyntax = this.variableService.syntaxType;\n    this.caseStatements = this.variableService.caseStatements;\n    this.calculateSum = this.variableService.mightBeScore;\n    this.finalExpression = this.variableService.finalExpression;\n    this.variables = this.variableService.variables.map(e => e.label);\n  }\n\n  /**\n   * Export FHIR Questionnaire and download as a file\n   */\n  export(): void {\n    this.save.emit(this.variableService.export(this.expressionUri, this.finalExpression));\n  }\n\n  /**\n   * Create a new instance of a FHIR questionnaire file by summing all ordinal\n   * values\n   */\n  addSumOfScores(): void {\n    this.save.emit(this.variableService.addSumOfScores());\n  }\n\n  /**\n   * Called when the syntax type is changed to clean up expressions if the data cannot be converted\n   * @param $event - event from from the caller\n   */\n  onSyntaxChange($event: MatRadioChange): void {\n    const newSyntax = $event.value;\n\n    // Clear the existing expression if switching away from fhirpath\n    if (newSyntax === 'simple') {\n      this.finalExpression = '';\n    }\n\n    this.variableService.syntaxType = newSyntax;\n  }\n\n  /**\n   * Update the final expression\n   */\n  updateFinalExpression(expression): void {\n    this.finalExpression = expression;\n  }\n\n  /**\n   * Update the simple final expression\n   */\n  updateSimpleExpression(simple): void {\n    this.simpleExpression = simple;\n  }\n\n  /**\n   * Toggle the advanced interface based on the type\n   */\n  onTypeChange(event): void {\n    if (event.target.value === 'fhirpath') {\n      this.variableService.checkAdvancedInterface(true);\n    } else {\n      // Need to check all other variables and the final expression before we\n      // allow the advanced interface to be removed\n      this.variableService.checkAdvancedInterface();\n    }\n\n    if (this.variableService.needsAdvancedInterface) {\n      this.advancedInterface = true;\n      this.disableInterfaceToggle = true;\n    } else {\n      this.disableInterfaceToggle = false;\n    }\n  }\n}\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\n\nimport { Variable, AllVariableType, SimpleVariableType } from '../variable';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { RuleEditorService, SimpleStyle } from '../rule-editor.service';\n\n@Component({\n  selector: 'lhc-variables',\n  templateUrl: './variables.component.html',\n  styleUrls: ['./variables.component.css']\n})\nexport class VariablesComponent implements OnInit, OnChanges {\n  @Input() lhcStyle: SimpleStyle = {};\n  @Input() advancedInterface: boolean;\n\n  variableType: any = SimpleVariableType;\n  variableSubscription;\n  variables: Variable[];\n  levels = [{\n      level: 0,\n      name: 'Top Level Scope'\n    }\n  ];\n\n  constructor(private ruleEditorService: RuleEditorService) {}\n\n  /**\n   * Angular lifecycle hook called when the component is initialized\n   */\n  ngOnInit(): void {\n    this.variables = this.ruleEditorService.variables;\n    this.variableSubscription = this.ruleEditorService.variablesChange.subscribe((variables) => {\n      this.variables = variables;\n    });\n  }\n\n  /**\n   * Angular lifecycle hook called when bound property changes\n   */\n  ngOnChanges(changes): void {\n    if (changes.advancedInterface) {\n      this.variableType = this.advancedInterface ? AllVariableType : SimpleVariableType;\n      if (this.variables) {\n        const previousValues = [];\n\n        this.variables.forEach((variable, index) => {\n          previousValues[index] = variable.type;\n          variable.type = '';\n        });\n\n        // Not sure of a better way of setting the previous values than this\n        setTimeout(() => {\n          previousValues.forEach((type, index) => {\n            this.variables[index].type = type;\n          });\n        }, 10);\n      }\n    }\n  }\n\n  /**\n   * Angular lifecycle hook called before the component is destroyed\n   */\n  ngDestroy(): void {\n    this.variableSubscription.unsubscribe();\n  }\n\n  /**\n   * Called when adding a new variable\n   */\n  onAdd(): void {\n    this.ruleEditorService.addVariable();\n  }\n\n  /**\n   * Remove a variable at an index\n   * @param i - index to remove\n   */\n  onRemove(i: number): void {\n    this.ruleEditorService.remove(i);\n  }\n\n  /**\n   * Drag and drop rearrange of variable order\n   * @param event - drag and drop event\n   */\n  drop(event: CdkDragDrop<Variable[]>): void {\n    moveItemInArray(this.variables, event.previousIndex, event.currentIndex);\n  }\n\n  /**\n   * Update the preview when the variable name changes\n   */\n  onNameChange(): void {\n    this.ruleEditorService.update();\n  }\n\n  /**\n   * Toggle the advanced interface based on the type\n   */\n  onTypeChange(event): void {\n    if (event.target.value === 'query' || event.target.value === 'expression') {\n      this.ruleEditorService.checkAdvancedInterface(true);\n    } else {\n      // Need to check all other variables and the final expression before we\n      // allow the advanced interface to be removed\n      this.ruleEditorService.checkAdvancedInterface();\n    }\n  }\n\n  /**\n   * Get the labels of available variables at the current index\n   * @param index - Index of variable we're editing\n   */\n  getAvailableVariables(index: number): Array<string> {\n    const uneditableVariables = this.ruleEditorService.uneditableVariables.map((e) => e.name);\n    // Only return variables up to but not including index\n    const editableVariables = this.variables.map((e) => e.label).slice(0, index);\n\n    return uneditableVariables.concat(editableVariables);\n  }\n\n  /**\n   * Update the expression for variable at the given index.\n   * @param i - index\n   * @param expression - new expression to use\n   */\n  updateExpression(i: number, expression): void {\n    this.variables[i].expression = expression;\n  }\n\n  /**\n   * Update the Easy Path for variable at the given index.\n   * @param i - index\n   * @param easyPath - new expression to use\n   */\n  updateSimpleExpression(i: number, easyPath): void {\n    this.variables[i].simple = easyPath;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { RuleEditorService } from '../rule-editor.service';\nimport { UneditableVariable } from '../variable';\n\n@Component({\n  selector: 'lhc-uneditable-variables',\n  templateUrl: './uneditable-variables.component.html',\n  styleUrls: ['./uneditable-variables.component.css']\n})\nexport class UneditableVariablesComponent implements OnInit {\n  uneditableVariables: UneditableVariable[];\n  uneditableVariablesSubscription;\n\n  constructor(private variableService: RuleEditorService) {}\n\n  /**\n   * Angular lifecycle hook called when the component is initialized\n   */\n  ngOnInit(): void {\n    this.uneditableVariables = this.variableService.uneditableVariables;\n    this.uneditableVariablesSubscription =\n        this.variableService.uneditableVariablesChange.subscribe((variables) => {\n      this.uneditableVariables = variables;\n    });\n  }\n\n  /**\n   * Angular lifecycle hook called before the component is destroyed\n   */\n  ngDestroy(): void {\n    this.uneditableVariablesSubscription.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Question } from '../variable';\nimport { RuleEditorService, SimpleStyle } from '../rule-editor.service';\nimport { Unit, UNIT_CONVERSION } from '../units';\n\n@Component({\n  selector: 'lhc-question',\n  templateUrl: './question.component.html',\n  styleUrls: ['./question.component.css']\n})\nexport class QuestionComponent implements OnInit {\n  @Input() variable;\n  @Input() lhcStyle: SimpleStyle = {};\n  linkId = '';\n  questions: Question[];\n  itemHasScore = false;\n  isNonConvertibleUnit = false;\n  toUnit: string;\n  unit: string;\n  conversionOptions: Unit[];\n\n  constructor(private variableService: RuleEditorService) {}\n\n  /**\n   * Angular lifecycle hook called when the component is initialized\n   */\n  ngOnInit(): void {\n    this.linkId = this.variable.linkId ? this.variable.linkId : '';\n    this.toUnit = this.variable.unit ? this.variable.unit : '';\n    this.questions = this.variableService.questions;\n\n    this.onChange(false);\n\n    this.variableService.questionsChange.subscribe((questions) => {\n      this.questions = questions;\n    });\n  }\n\n  /**\n   * Get the question based on linkId\n   * @param linkId - FHIR linkId\n   */\n  getQuestion(linkId): Question {\n    return this.questions.find((q) => {\n      return q.linkId === linkId;\n    });\n  }\n\n  /**\n   * Get the list of units we can convert to based on the starting unit\n   * @param unit - Starting unit\n   */\n  getConversionOptions(unit: string): Unit[] {\n    return UNIT_CONVERSION[unit];\n  }\n\n  /**\n   * Called when the questionnaire question or unit is changed\n   * @param isQuestion - The change was for a question\n   */\n  onChange(isQuestion): void {\n    if (isQuestion) {\n      // Reset the conversion options when the question changes\n      this.toUnit = '';\n    }\n\n    // If we already have a question selected (as opposed to the select... prompt)\n    if (this.linkId) {\n      const question = this.getQuestion(this.linkId);\n      this.unit = question?.unit;\n      this.conversionOptions = this.getConversionOptions(this.unit);\n      this.isNonConvertibleUnit = this.unit && !this.conversionOptions;\n\n      // Check if this is a score\n      if (!this.conversionOptions && !this.isNonConvertibleUnit) {\n        this.itemHasScore = this.variableService.itemHasScore(this.linkId);\n      } else {\n        this.itemHasScore = false;\n      }\n\n      this.variable.expression = this.variableService.valueOrScoreExpression(\n        this.linkId, this.itemHasScore, !this.isNonConvertibleUnit, this.unit, this.toUnit);\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { RuleEditorService, SimpleStyle } from '../rule-editor.service';\n\n@Component({\n  selector: 'lhc-calculate-sum-prompt',\n  templateUrl: './calculate-sum-prompt.component.html',\n  styleUrls: ['./calculate-sum-prompt.component.css']\n})\nexport class CalculateSumPromptComponent implements OnInit {\n  @Input() lhcStyle: SimpleStyle = {};\n  @Output() export: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(private ruleEditorService: RuleEditorService) { }\n\n  /**\n   * Angular lifecycle hook called when the component is initialized\n   */\n  ngOnInit(): void {}\n\n  /**\n   * Close the dialog by specifying this should not be a score calculation\n   */\n  onCloseClick(): void {\n    this.ruleEditorService.toggleMightBeScore();\n  }\n\n  /**\n   * Export the sum of scores as a FHIR Questionnaire\n   */\n  onExportClick(): void {\n    this.export.emit();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as easyPathExpressions from 'easy-path-expressions';\n\n@Pipe({\n  name: 'easyPathExpressions'\n})\nexport class EasyPathExpressionsPipe implements PipeTransform {\n\n  transform(value: string, variables: string[]): string {\n    if (value !== undefined) {\n      const fhirPath = easyPathExpressions.fhirConvert(value, variables);\n      if (fhirPath !== null) {\n        return fhirPath;\n      }\n    }\n\n    return 'Not valid';\n  }\n}\n","import { Component, Input, Output, EventEmitter, OnChanges } from '@angular/core';\nimport { EasyPathExpressionsPipe } from '../easy-path-expressions.pipe';\nimport { SimpleStyle } from '../rule-editor.service';\n\n@Component({\n  selector: 'lhc-syntax-converter',\n  templateUrl: './syntax-converter.component.html',\n  styleUrls: ['./syntax-converter.component.css']\n})\nexport class SyntaxConverterComponent implements OnChanges {\n  @Input() simple: string;\n  @Input() variables;\n  @Input() lhcStyle: SimpleStyle = {};\n  @Output() simpleChange = new EventEmitter<string>();\n  @Output() expressionChange = new EventEmitter<string>();\n\n  fhirPathExpression: string;\n  jsToFhirPathPipe = new EasyPathExpressionsPipe();\n\n  constructor() { }\n\n  ngOnChanges(): void {\n    this.onExpressionChange(this.simple);\n  }\n\n  onExpressionChange(simple): void {\n    const fhirPath: string = this.jsToFhirPathPipe.transform(simple, this.variables);\n    this.fhirPathExpression = fhirPath;\n\n    this.simpleChange.emit(simple);\n    this.expressionChange.emit(fhirPath);\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { SimpleStyle } from '../rule-editor.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'lhc-syntax-preview',\n  templateUrl: './syntax-preview.component.html',\n  styleUrls: ['./syntax-preview.component.css']\n})\nexport class SyntaxPreviewComponent implements OnInit {\n  @Input() syntax;\n  @Input() lhcStyle: SimpleStyle;\n  @Input() showWhenEmpty = false;\n\n  constructor(private snackBar: MatSnackBar) { }\n\n  ngOnInit(): void {\n  }\n\n  /**\n   * Show an ephemeral notification that the value was copied.\n   */\n  copyNotification(): void {\n    this.snackBar.open('Copied to clipboard', null, {\n      duration: 2000\n    });\n  }\n}\n","import { AfterViewInit, Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { SimpleStyle } from '../rule-editor.service';\nimport Def from 'autocomplete-lhc';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'lhc-query-observation',\n  templateUrl: './query-observation.component.html',\n  styleUrls: ['./query-observation.component.css']\n})\nexport class QueryObservationComponent implements OnInit, AfterViewInit, OnDestroy {\n  queryUrl = 'https://clinicaltables.nlm.nih.gov/api/loinc_items/v3/search?df=text,LOINC_NUM';\n\n  @Input() variable;\n  @Input() index;\n  @Input() lhcStyle: SimpleStyle = {};\n  @ViewChild('autoComplete') autoCompleteElement;\n  autoComplete;\n  codes: Array<string>;\n  timeInterval: number;\n  timeIntervalUnit: string;\n  expression: string;\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit(): void {\n    if (this.variable !== undefined) {\n      this.codes = (this.variable.codes !== undefined) ? this.variable.codes : [];\n      this.timeInterval = this.variable.timeInterval || 1;\n      this.timeIntervalUnit = this.variable.timeIntervalUnit || 'months';\n      this.expression = this.variable.expression;\n    } else {\n      this.codes = [];\n    }\n  }\n\n  /**\n   * After the autocomplete is ready to be interacted with fetch the name for\n   * any codes already in the query search.\n   */\n  ngAfterViewInit(): void {\n    this.autoComplete = new Def.Autocompleter.Search(\n      this.autoCompleteElement.nativeElement, this.queryUrl,\n      {\n        tableFormat: true,\n        valueCols: [0, 1],\n        colHeaders: ['Text', 'LOINC Number'],\n        maxSelect: '*'\n      });\n\n    this.codes.forEach((code) => {\n      const matches = code.match(/http:\\/\\/loinc.org\\|(.+)/);\n\n      if (matches !== null) {\n        const loincCode = matches[1];\n        // LOINC Code\n        this.http.get(`${this.queryUrl}&terms=${loincCode}`)\n          .subscribe((data) => {\n            const namePosition = 3;\n            const name = [data[namePosition][0][0], loincCode].join(' - ');\n            this.autoComplete.storeSelectedItem(name, loincCode);\n            this.autoComplete.addToSelectedArea(name);\n          });\n      } else {\n        // Non-loinc code\n        this.autoComplete.storeSelectedItem(code, undefined);\n        this.autoComplete.addToSelectedArea(code);\n      }\n\n    });\n\n    Def.Autocompleter.Event.observeListSelections(`autocomplete-${this.index}`, () => {\n      const selectedItemData = this.autoComplete.getSelectedItemData();\n\n      // If there is no code then this is not a loinc code and we need to get\n      // the value from the array above\n      this.codes = this.autoComplete.getSelectedCodes().map((code, index) => {\n        return (code === undefined) ? selectedItemData[index].text : `http://loinc.org|${code}`;\n      });\n      this.onChange();\n    });\n  }\n\n  /**\n   * Angular lifecycle hook\n   */\n  ngOnDestroy(): void {\n    if (this.autoComplete !== undefined) {\n      this.autoComplete.destroy();\n    }\n  }\n\n  /**\n   * On changes update the expression and preview\n   */\n  onChange(): void {\n    // Separate with URL encoded version of the comma: ','\n    const codes = this.codes.join('%2C');\n\n    this.variable.expression = this.expression =\n      `Observation?code=${codes}&` +\n      `date=gt{{today()-${this.timeInterval} ${this.timeIntervalUnit}}}&` +\n      `patient={{%patient.id}}&_sort=-date&_count=1`;\n  }\n}\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output } from '@angular/core';\nimport { RuleEditorService, SimpleStyle } from '../rule-editor.service';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { CASE_REGEX, CaseStatement, Variable } from '../variable';\nimport { EasyPathExpressionsPipe } from '../easy-path-expressions.pipe';\n\n@Component({\n  selector: 'lhc-case-statements',\n  templateUrl: './case-statements.component.html',\n  styleUrls: ['./case-statements.component.css']\n})\nexport class CaseStatementsComponent implements OnInit, OnChanges {\n  @Input() lhcStyle: SimpleStyle = {};\n  @Input() syntax: string;\n  @Input() simpleExpression: string;\n  @Input() expression: string;\n\n  @Output() expressionChange = new EventEmitter<string>();\n  @Output() simpleChange = new EventEmitter<string>();\n\n  STRING_REGEX = /^'(.*)'$/;\n  pipe = new EasyPathExpressionsPipe();\n  outputExpressions = true;\n  defaultCase: string;\n  simpleDefaultCase: string;\n  cases: Array<CaseStatement> = [{condition: '', simpleCondition: '', output: '', simpleOutput: ''}];\n  output = '';\n\n  constructor(private ruleEditorService: RuleEditorService) { }\n\n  /**\n   * Angular lifecycle hook for initialization\n   */\n  ngOnInit(): void {\n    if (this.syntax === 'fhirpath' && this.expression !== undefined) {\n      this.parseIif(this.expression, 0);\n    } else if (this.syntax === 'simple' && this.simpleExpression !== undefined) {\n      this.parseSimpleCases();\n    }\n\n    this.output = this.getIif(0);\n  }\n\n  /**\n   * Parses the Easy Path expression and populates the case editor. Toggles \"use\n   * expressions\" off if output is only strings.\n   */\n  parseSimpleCases(): void {\n    this.parseIif(this.simpleExpression, 0);\n\n    // If all output values are strings toggle off \"use expressions\"\n    const outputString = this.cases.find(e => (!this.isString(e.simpleOutput)));\n    const defaultIsString = this.isString(this.simpleDefaultCase);\n\n    if (outputString === undefined && defaultIsString) {\n      this.outputExpressions = false;\n      // Remove quotes from output strings and default case\n      this.cases.forEach(e => {\n        e.simpleOutput = this.removeQuotes(e.simpleOutput);\n      });\n      this.simpleDefaultCase = this.removeQuotes(this.simpleDefaultCase);\n    }\n  }\n\n  /**\n   * Checks if the expression is a string\n   */\n  isString(expression: string): boolean {\n    return this.STRING_REGEX.test(expression);\n  }\n\n  /**\n   * Removes surrounding quotes\n   */\n  removeQuotes(expression: string): string {\n    return expression.match(this.STRING_REGEX)[1];\n  }\n\n  /**\n   * Angular lifecycle hook for changes\n   */\n  ngOnChanges(changes): void {\n    if (changes.syntax && this.syntax === 'simple' && changes.syntax.firstChange === false) {\n      this.parseSimpleCases();\n      this.onChange();\n    } else if (changes.syntax && this.syntax === 'fhirpath' && changes.syntax.firstChange === false) {\n      this.outputExpressions = true;\n      this.parseIif(this.expression, 0);\n      this.onChange();\n    }\n  }\n\n  /**\n   * Called when adding a new case\n   */\n  onAdd(): void {\n    this.cases.push({condition: '', simpleCondition: '', output: '', simpleOutput: ''});\n    this.onChange();\n    // TODO select next input box that was added\n  }\n\n  /**\n   * Remove the case at an index\n   * @param i - index to remove\n   */\n  onRemove(i): void {\n    this.cases.splice(i, 1);\n    this.onChange();\n  }\n\n  /**\n   * Angular lifecycle hook for changes\n   */\n  onChange(): void {\n    this.output = this.getIif(0);\n    this.expressionChange.emit(this.output);\n    this.simpleChange.emit(this.simpleExpression);\n  }\n\n  /**\n   * Parse iif expression at specified level. Top level is 0\n   * @param expression - expression to parse\n   * @param level - depth or level of expression nesting\n   */\n  parseIif(expression: string, level: number): boolean {\n    // If expressions don't start with iif( and end with ) they cannot be parsed\n    const matches = expression.match(CASE_REGEX);\n\n    if (matches !== null) {\n      const iifContents = matches[1];\n      let commaMatches = 0;\n      let nestingLevel = 0;\n      let comma1 = -1;\n      let comma2 = -1;\n\n      // Check where the ',' is relative to depth as indicated by parenthesis\n      for (let i = 0; i < iifContents.length; i++) {\n        switch (iifContents[i]) {\n          case '(':\n            nestingLevel++;\n            break;\n          case ')':\n            nestingLevel--;\n            break;\n          case ',':\n            if (nestingLevel === 0) {\n              commaMatches++;\n              if (comma1 === -1) {\n                comma1 = i;\n              } else if (comma2 === -1) {\n                comma2 = i;\n              }\n            }\n            break;\n        }\n      }\n\n      if (commaMatches === 2 && nestingLevel === 0) {\n        // Clear out any existing cases if we have a match for iif\n        if (level === 0) {\n          this.cases = [];\n        }\n        const condition = iifContents.substring(0, comma1).trim();\n        const trueCase = iifContents.substring(comma1 + 1, comma2).trim();\n        const falseCase = iifContents.substring(comma2 + 1, iifContents.length).trim();\n\n        if (this.syntax === 'simple') {\n          const variableNames = this.ruleEditorService.variables.map(e => e.label);\n\n          this.cases.push({\n            simpleCondition: condition,\n            simpleOutput: trueCase,\n            condition: this.pipe.transform(condition, variableNames),\n            output: this.pipe.transform(trueCase, variableNames)\n          });\n        } else {\n          this.cases.push({\n            condition,\n            output: trueCase\n          });\n        }\n\n        const parseResult = this.parseIif(falseCase, level + 1);\n        if (parseResult === false && this.syntax !== 'simple') {\n          this.defaultCase = falseCase;\n        } else if (parseResult === false && this.syntax === 'simple') {\n          this.simpleDefaultCase = falseCase;\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get an iif expression given a nesting level\n   * @param level - nesting level\n   */\n  getIif(level: number): string {\n    const isSimple = this.syntax === 'simple';\n    const output = this.transformIfSimple(isSimple ?\n      this.cases[level].simpleOutput :\n      this.cases[level].output, true);\n    const condition = this.transformIfSimple(isSimple ?\n      this.cases[level].simpleCondition :\n      this.cases[level].condition, false);\n\n    if (level === this.cases.length - 1) {\n      const defaultCase = this.transformIfSimple(isSimple ?\n        this.simpleDefaultCase : this.defaultCase, true);\n      return `iif(${condition},${output},${defaultCase})`;\n    } else {\n      return `iif(${condition},${output},${this.getIif(level + 1)})`;\n    }\n  }\n\n  /**\n   * Transform the expression parameter if the syntax type is Easy Path,\n   * otherwise return the expression. Additionally if this is an output column\n   * and output expressions are off surround with quotes.\n   * @param expression - Easy Path or FHIRPath expression\n   * @param isOutput - True if processing an output or default value\n   * @return FHIRPath Expression\n   */\n  transformIfSimple(expression: string, isOutput: boolean): string {\n    if (expression === undefined) {\n      return '';\n    }\n\n    let processedExpression = expression;\n\n    if (isOutput && !this.outputExpressions) {\n      processedExpression = `'${processedExpression}'`;  // TODO should we escape the expression?\n    }\n\n    // Convert when syntax is simple but not in the output column is outputExpressions is disabled\n    if (this.syntax === 'simple' && !(isOutput && !this.outputExpressions)) {\n      return this.pipe.transform(processedExpression, this.ruleEditorService.variables.map(e => e.label));\n    } else {\n      return processedExpression;\n    }\n  }\n\n  /**\n   * Drag and drop rearrange of variable order\n   * @param event - drag and drop event\n   */\n  drop(event: CdkDragDrop<Variable[]>): void {\n    moveItemInArray(this.cases, event.previousIndex, event.currentIndex);\n    this.onChange();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\nimport { RuleEditorComponent } from './rule-editor.component';\nimport { VariablesComponent } from './variables/variables.component';\nimport { UneditableVariablesComponent } from './uneditable-variables/uneditable-variables.component';\nimport { QuestionComponent } from './question/question.component';\nimport { CalculateSumPromptComponent } from './calculate-sum-prompt/calculate-sum-prompt.component';\nimport { EasyPathExpressionsPipe } from './easy-path-expressions.pipe';\nimport { SyntaxConverterComponent } from './syntax-converter/syntax-converter.component';\nimport { SyntaxPreviewComponent } from './syntax-preview/syntax-preview.component';\nimport { QueryObservationComponent } from './query-observation/query-observation.component';\nimport { CaseStatementsComponent } from './case-statements/case-statements.component';\n\n@NgModule({\n  declarations: [\n    RuleEditorComponent,\n    VariablesComponent,\n    UneditableVariablesComponent,\n    QuestionComponent,\n    CalculateSumPromptComponent,\n    EasyPathExpressionsPipe,\n    SyntaxConverterComponent,\n    SyntaxPreviewComponent,\n    QueryObservationComponent,\n    CaseStatementsComponent\n  ],\n  imports: [\n    FormsModule,\n    BrowserAnimationsModule,\n    DragDropModule,\n    MatRadioModule,\n    ClipboardModule,\n    MatTooltipModule,\n    MatSnackBarModule\n  ],\n  exports: [\n    RuleEditorComponent\n  ]\n})\nexport class RuleEditorModule {\n}\n","/*\n * Public API Surface of ng-rule-editor\n */\n\nexport * from './lib/rule-editor.service';\nexport * from './lib/rule-editor.component';\nexport * from './lib/rule-editor.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {CalculateSumPromptComponent as ɵd} from './lib/calculate-sum-prompt/calculate-sum-prompt.component';\nexport {CaseStatementsComponent as ɵi} from './lib/case-statements/case-statements.component';\nexport {EasyPathExpressionsPipe as ɵe} from './lib/easy-path-expressions.pipe';\nexport {QueryObservationComponent as ɵh} from './lib/query-observation/query-observation.component';\nexport {QuestionComponent as ɵc} from './lib/question/question.component';\nexport {SyntaxConverterComponent as ɵf} from './lib/syntax-converter/syntax-converter.component';\nexport {SyntaxPreviewComponent as ɵg} from './lib/syntax-preview/syntax-preview.component';\nexport {UneditableVariablesComponent as ɵb} from './lib/uneditable-variables/uneditable-variables.component';\nexport {VariablesComponent as ɵa} from './lib/variables/variables.component';"]}